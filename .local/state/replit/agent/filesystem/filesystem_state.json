{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nCryptoFund is a full-stack Web3 crowdfunding platform that combines the features of Kickstarter, GoFundMe, and AngelList with blockchain transparency and a cyberpunk-styled glassmorphism UI. The platform enables creators to launch fundraising campaigns after KYC verification and allows backers to contribute using both cryptocurrency and fiat payments, with all transactions recorded on-chain for transparency.\n\n## Migration Status\n**COMPLETED** - Successfully migrated from Replit Agent to standard Replit environment (August 15, 2025)\n- Fixed all critical errors identified in the analysis\n- Database seeded with sample campaigns and users\n- Authentication system working properly\n- Images loading correctly with Unsplash integration\n- Fixed Three.js shader errors (renamed color attribute to particleColor)\n- Added CORS middleware for proper API communication\n- Fixed login redirect issue (buttons now go to /auth instead of /api/login)\n- Added placeholder image endpoint and updated campaign images\n- Enhanced KYC document upload system with proper file handling\n- Improved admin KYC review system with document preview and approval workflow\n- Fixed authentication route consistency (/api/user vs /api/auth/user)\n- Fixed file upload payload size limits (increased server limit to 10MB, added 5MB client validation)\n\n## Security Enhancements (August 15, 2025)\n**COMPLETED** - Implemented robust role-based authentication and authorization\n- **Admin Role System**: Added role field to user schema with 'user' and 'admin' roles\n- **Admin Authorization**: Created requireAdmin middleware for proper role verification\n- **Secured Admin Endpoints**: All admin routes now require admin privileges (KYC management, user management, campaign approval)\n- **Admin User Created**: Default admin account established for platform management\n- **Client/Server Separation**: Proper authorization checks prevent unauthorized access to admin functions\n- **Authentication Updates**: User responses now include role and flagged status for frontend security\n\n## KYC System Enhancement (August 14, 2025)\n**COMPLETED** - Comprehensive KYC verification system integrated\n- Multi-step KYC form with document upload functionality and step-by-step validation\n- Database schema updated with KYC applications and admin management\n- Admin portal with real-time KYC application review and approval\n- API endpoints for KYC submission, status checking, and admin workflow\n- Campaign creation restricted until KYC verification is approved\n- Live admin dashboard for managing user verification applications\n- Fixed form validation issues for smooth user experience\n- Navigation updated to include KYC and Admin access links\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Radix UI primitives with custom components following the shadcn/ui design system\n- **Styling**: Tailwind CSS with custom cyberpunk and glassmorphism themes, CSS variables for theming\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **Forms**: React Hook Form with Zod validation\n- **Animations**: Framer Motion for smooth transitions and effects\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Pattern**: RESTful API endpoints under `/api` prefix\n- **Development**: Hot module replacement with Vite integration in development mode\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n\n## Authentication & Authorization\n- **Provider**: Manual username/password authentication system\n- **Session Management**: Express sessions with PostgreSQL storage using connect-pg-simple\n- **Strategy**: Passport.js with Local Strategy for username/password authentication\n- **Password Security**: Scrypt hashing with salt for secure password storage\n- **User Management**: Manual user registration and login with form validation\n\n## Database & ORM\n- **Database**: PostgreSQL with connection via environment variable\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Schema**: Strongly typed schema definitions with Zod validation\n- **Migrations**: Drizzle Kit for database schema management\n\n## Key Data Models\n- **Users**: Profile management with KYC status and wallet integration\n- **Campaigns**: Full campaign lifecycle with funding types (donation/reward/equity)\n- **Contributions**: Transaction tracking with multiple payment methods\n- **Transactions**: Blockchain transaction logging\n- **AI Interactions**: Campaign optimization and suggestions\n\n## Blockchain Integration\n- **Network**: Polygon Mumbai testnet for development\n- **Web3 Provider**: Mock blockchain utilities simulating real Web3 interactions\n- **Smart Contracts**: Campaign contract addresses for different funding types\n- **Payment Methods**: Support for ETH, MATIC, USDC, and fiat payments\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connectivity\n- **drizzle-orm & drizzle-zod**: Database ORM and validation\n- **express & passport**: Web framework and authentication\n- **@tanstack/react-query**: Server state management\n- **@radix-ui/***: Accessible UI component primitives\n\n### Development Tools\n- **Vite**: Build tool and dev server with HMR\n- **TypeScript**: Type safety across the stack\n- **Tailwind CSS**: Utility-first CSS framework\n- **@replit/vite-plugin-***: Replit-specific development plugins\n\n### Payment Integration\n- Mock implementations for:\n- **Stripe/Razorpay**: Fiat payment processing\n- **MetaMask**: Crypto wallet integration\n- **Polygon Mumbai**: Testnet blockchain interactions\n\n### AI Features\n- **OpenAI API**: Campaign optimization and content enhancement\n- GPT-4o model for title suggestions and funding predictions\n- AI-powered credibility scoring and market analysis\n\n### UI/UX Libraries\n- **Framer Motion**: Animation and transitions\n- **Lucide React**: Icon library\n- **date-fns**: Date manipulation and formatting\n- **class-variance-authority**: Component variant management","size_bytes":6227},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        cyber: {\n          blue: \"var(--cyber-blue)\",\n          purple: \"var(--cyber-purple)\",\n          green: \"var(--cyber-green)\",\n          pink: \"var(--cyber-pink)\",\n          yellow: \"var(--cyber-yellow)\",\n        },\n        glass: {\n          white: \"var(--glass-white)\",\n          dark: \"var(--glass-dark)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        glow: {\n          \"0%\": {\n            boxShadow: \"0 0 20px -10px var(--cyber-blue)\",\n          },\n          \"100%\": {\n            boxShadow: \"0 0 20px -5px var(--cyber-blue)\",\n          },\n        },\n        float: {\n          \"0%, 100%\": {\n            transform: \"translateY(0px)\",\n          },\n          \"50%\": {\n            transform: \"translateY(-20px)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        glow: \"glow 2s ease-in-out infinite alternate\",\n        float: \"float 6s ease-in-out infinite\",\n        \"pulse-slow\": \"pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3187},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/node-postgres';\nimport { Pool } from 'pg';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":386},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDatabase } from \"./seed\";\n\nconst app = express();\n\n// CORS middleware\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');\n  \n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n});\n\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Seed the database with sample data\n  await seedDatabase();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 80 for Replit compatibility.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '80', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2590},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nconst hasValidApiKey = () => {\n  const apiKey = process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR;\n  return apiKey && apiKey !== \"default_key\" && apiKey.startsWith(\"sk-\");\n};\n\nexport interface CampaignOptimization {\n  titleSuggestions: string[];\n  descriptionEnhancements: string[];\n  fundingPrediction: {\n    successProbability: number;\n    recommendedGoal: number;\n    estimatedDuration: number;\n  };\n  credibilityScore: number;\n  marketAnalysis: {\n    similarCampaigns: number;\n    categoryTrends: string;\n    competitionLevel: string;\n  };\n}\n\nexport async function optimizeCampaignTitle(title: string): Promise<{\n  suggestions: string[];\n  engagementBoost: string;\n}> {\n  if (!hasValidApiKey()) {\n    return {\n      suggestions: [\n        `Enhanced: ${title}`,\n        `Professional: ${title}`,\n        `Innovative: ${title}`\n      ],\n      engagementBoost: \"AI optimization unavailable - requires OpenAI API key\"\n    };\n  }\n  \n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a crowdfunding optimization expert. Analyze campaign titles and provide 3 improved alternatives that increase engagement. Respond with JSON in this format: { 'suggestions': ['title1', 'title2', 'title3'], 'engagementBoost': 'percentage increase estimate' }\",\n        },\n        {\n          role: \"user\",\n          content: `Optimize this crowdfunding campaign title: \"${title}\"`,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const content = response.choices[0]?.message?.content;\n    if (!content) {\n      throw new Error(\"No content received from OpenAI\");\n    }\n    const result = JSON.parse(content);\n    return {\n      suggestions: result.suggestions || [],\n      engagementBoost: result.engagementBoost || \"0%\",\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n    throw new Error(\"Failed to optimize campaign title: \" + errorMessage);\n  }\n}\n\nexport async function enhanceCampaignDescription(description: string, category: string): Promise<{\n  enhancedDescription: string;\n  keyImprovements: string[];\n}> {\n  if (!hasValidApiKey()) {\n    return {\n      enhancedDescription: description,\n      keyImprovements: [\"AI enhancement unavailable - requires OpenAI API key\"]\n    };\n  }\n  \n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a crowdfunding copywriting expert. Enhance campaign descriptions to be more compelling and persuasive. Focus on clear value propositions, emotional connection, and credibility. Respond with JSON in this format: { 'enhancedDescription': 'improved text', 'keyImprovements': ['improvement1', 'improvement2'] }\",\n        },\n        {\n          role: \"user\",\n          content: `Enhance this ${category} crowdfunding campaign description: \"${description}\"`,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const content = response.choices[0]?.message?.content;\n    if (!content) {\n      throw new Error(\"No content received from OpenAI\");\n    }\n    const result = JSON.parse(content);\n    return {\n      enhancedDescription: result.enhancedDescription || description,\n      keyImprovements: result.keyImprovements || [],\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n    throw new Error(\"Failed to enhance campaign description: \" + errorMessage);\n  }\n}\n\nexport async function analyzeCampaignCredibility(campaignData: {\n  title: string;\n  description: string;\n  category: string;\n  goalAmount: number;\n  creatorKycStatus: string;\n}): Promise<{\n  score: number;\n  factors: {\n    factor: string;\n    impact: string;\n    score: number;\n  }[];\n  recommendations: string[];\n}> {\n  if (!hasValidApiKey()) {\n    return {\n      score: campaignData.creatorKycStatus === \"verified\" ? 7.5 : 5.0,\n      factors: [\n        { factor: \"KYC Status\", impact: campaignData.creatorKycStatus === \"verified\" ? \"positive\" : \"negative\", score: campaignData.creatorKycStatus === \"verified\" ? 8 : 4 },\n        { factor: \"Goal Amount\", impact: \"neutral\", score: 6 },\n        { factor: \"Description Length\", impact: campaignData.description.length > 100 ? \"positive\" : \"negative\", score: campaignData.description.length > 100 ? 7 : 5 }\n      ],\n      recommendations: [\"AI analysis unavailable - requires OpenAI API key\"]\n    };\n  }\n  \n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a crowdfunding credibility analyst. Analyze campaigns and provide credibility scores (0-10) based on various factors. Respond with JSON in this format: { 'score': number, 'factors': [{'factor': 'string', 'impact': 'positive/negative/neutral', 'score': number}], 'recommendations': ['rec1', 'rec2'] }\",\n        },\n        {\n          role: \"user\",\n          content: `Analyze the credibility of this campaign: Title: \"${campaignData.title}\", Description: \"${campaignData.description}\", Category: ${campaignData.category}, Goal: $${campaignData.goalAmount}, KYC Status: ${campaignData.creatorKycStatus}`,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const content = response.choices[0]?.message?.content;\n    if (!content) {\n      throw new Error(\"No content received from OpenAI\");\n    }\n    const result = JSON.parse(content);\n    return {\n      score: Math.max(0, Math.min(10, result.score || 0)),\n      factors: result.factors || [],\n      recommendations: result.recommendations || [],\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n    throw new Error(\"Failed to analyze campaign credibility: \" + errorMessage);\n  }\n}\n\nexport async function predictFundingSuccess(campaignData: {\n  title: string;\n  description: string;\n  category: string;\n  goalAmount: number;\n  duration: number;\n}): Promise<{\n  successProbability: number;\n  recommendedGoal: number;\n  marketInsights: string[];\n}> {\n  if (!hasValidApiKey()) {\n    return {\n      successProbability: Math.min(0.85, Math.max(0.45, 0.70 - (campaignData.goalAmount / 100000))),\n      recommendedGoal: campaignData.goalAmount,\n      marketInsights: [\"AI prediction unavailable - requires OpenAI API key\"]\n    };\n  }\n  \n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a crowdfunding market analyst. Predict funding success probability and provide optimization recommendations. Respond with JSON in this format: { 'successProbability': number (0-1), 'recommendedGoal': number, 'marketInsights': ['insight1', 'insight2'] }\",\n        },\n        {\n          role: \"user\",\n          content: `Analyze funding potential: Category: ${campaignData.category}, Goal: $${campaignData.goalAmount}, Duration: ${campaignData.duration} days, Title: \"${campaignData.title}\"`,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const content = response.choices[0]?.message?.content;\n    if (!content) {\n      throw new Error(\"No content received from OpenAI\");\n    }\n    const result = JSON.parse(content);\n    return {\n      successProbability: Math.max(0, Math.min(1, result.successProbability || 0)),\n      recommendedGoal: result.recommendedGoal || campaignData.goalAmount,\n      marketInsights: result.marketInsights || [],\n    };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n    throw new Error(\"Failed to predict funding success: \" + errorMessage);\n  }\n}\n","size_bytes":8143},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  console.warn(\"REPLIT_DOMAINS not set, using development fallback\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    try {\n      return await client.discovery(\n        new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n        process.env.REPL_ID!\n      );\n    } catch (error) {\n      console.error(\"OIDC discovery failed:\", error);\n      throw new Error(\"Authentication system configuration error\");\n    }\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || \"fallback-secret-for-development-only-not-secure\",\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  // For now, we'll handle user creation manually as this is a manual auth system\n  console.log(\"User claims received:\", claims);\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Handle missing REPLIT_DOMAINS for development\n  if (!process.env.REPLIT_DOMAINS) {\n    console.warn(\"Skipping OIDC setup - REPLIT_DOMAINS not configured\");\n    return;\n  }\n\n  let config: any = null;\n  \n  try {\n    config = await getOidcConfig();\n\n    const verify: VerifyFunction = async (\n      tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n      verified: passport.AuthenticateCallback\n    ) => {\n      const userClaims = tokens.claims();\n      if (!userClaims) {\n        return verified(new Error(\"No user claims found\"));\n      }\n      \n      const user = {\n        id: userClaims.sub as string,\n        username: userClaims.preferred_username as string || userClaims.sub as string,\n        email: userClaims.email as string,\n        password: \"\", // Not used for OIDC\n        firstName: (userClaims.first_name as string) || null,\n        lastName: (userClaims.last_name as string) || null,\n        profileImageUrl: (userClaims.profile_image_url as string) || null,\n        walletAddress: null,\n        kycStatus: \"pending\",\n        kycDocuments: null,\n        role: \"user\",\n        isFlagged: false,\n        flaggedReason: null,\n        flaggedBy: null,\n        flaggedAt: null,\n        profileCompletion: 0,\n        joinDate: new Date(),\n        createdAt: new Date(),\n        updatedAt: null,\n      };\n      updateUserSession(user, tokens);\n      await upsertUser(userClaims);\n      verified(null, user);\n    };\n\n    for (const domain of process.env.REPLIT_DOMAINS.split(\",\")) {\n      const strategy = new Strategy(\n        {\n          name: `replitauth:${domain}`,\n          config,\n          scope: \"openid email profile offline_access\",\n          callbackURL: `https://${domain}/api/callback`,\n        },\n        verify,\n      );\n      passport.use(strategy);\n    }\n    \n    console.log(\"Authentication setup completed successfully\");\n  } catch (error) {\n    console.error(\"Failed to setup authentication:\", error);\n    console.warn(\"Authentication will not be available\");\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    if (!config) {\n      return res.status(501).json({ message: \"Authentication not configured\" });\n    }\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    if (!config) {\n      return res.status(501).json({ message: \"Authentication not configured\" });\n    }\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    if (!config) {\n      req.logout(() => {\n        res.redirect(\"/\");\n      });\n      return;\n    }\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":6048},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, requireAdmin } from \"./auth\";\nimport { \n  optimizeCampaignTitle, \n  enhanceCampaignDescription, \n  analyzeCampaignCredibility,\n  predictFundingSuccess \n} from \"./openai\";\nimport { insertCampaignSchema, insertContributionSchema, insertTransactionSchema, insertKycApplicationSchema, insertReinstatementRequestSchema, insertUserNotificationSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  setupAuth(app);\n\n  // Removed duplicate auth route - using the one in auth.ts instead\n\n  // Campaign routes\n  app.get('/api/campaigns', async (req, res) => {\n    try {\n      const { category, status, limit, offset } = req.query;\n      const campaigns = await storage.getCampaigns({\n        category: category as string,\n        status: status as string,\n        limit: limit ? parseInt(limit as string) : undefined,\n        offset: offset ? parseInt(offset as string) : undefined,\n      });\n      res.json(campaigns);\n    } catch (error) {\n      console.error(\"Error fetching campaigns:\", error);\n      res.status(500).json({ message: \"Failed to fetch campaigns\" });\n    }\n  });\n\n  // Get campaigns by category (more specific route)\n  app.get('/api/campaigns/:category', async (req, res) => {\n    try {\n      const { category } = req.params;\n      const { status, limit, offset } = req.query;\n      \n      // Check if this is a category or an actual campaign ID (UUIDs are 36 chars)\n      if (category.length === 36 && category.includes('-')) {\n        // This is likely a UUID, treat as campaign ID\n        const campaign = await storage.getCampaign(category);\n        if (!campaign) {\n          return res.status(404).json({ message: \"Campaign not found\" });\n        }\n        return res.json(campaign);\n      }\n      \n      // This is a category filter\n      const campaigns = await storage.getCampaigns({\n        category: category,\n        status: status as string,\n        limit: limit ? parseInt(limit as string) : undefined,\n        offset: offset ? parseInt(offset as string) : undefined,\n      });\n      res.json(campaigns);\n    } catch (error) {\n      console.error(\"Error fetching campaigns:\", error);\n      res.status(500).json({ message: \"Failed to fetch campaigns\" });\n    }\n  });\n\n  app.post('/api/campaigns', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.kycStatus !== \"approved\") {\n        return res.status(403).json({ \n          message: \"KYC verification required to create campaigns\",\n          kycStatus: user?.kycStatus || 'pending'\n        });\n      }\n\n      const campaignData = insertCampaignSchema.parse({\n        ...req.body,\n        creatorId: userId,\n        status: 'pending_approval', // New campaigns start as pending approval\n      });\n\n      const campaign = await storage.createCampaign(campaignData);\n      res.status(201).json(campaign);\n    } catch (error) {\n      console.error(\"Error creating campaign:\", error);\n      res.status(400).json({ message: (error as Error).message || \"Failed to create campaign\" });\n    }\n  });\n\n  app.put('/api/campaigns/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (user?.isFlagged) {\n        return res.status(403).json({ message: \"Cannot edit campaigns while account is flagged\" });\n      }\n      \n      const campaign = await storage.getCampaign(req.params.id);\n      \n      if (!campaign) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n      \n      if (campaign.creatorId !== userId) {\n        return res.status(403).json({ message: \"Unauthorized to update this campaign\" });\n      }\n      \n      // Check if campaign is pending re-approval after edits\n      if (campaign.isEditedAfterApproval && campaign.status === \"pending_approval\") {\n        return res.status(403).json({ \n          message: \"Cannot edit campaign while pending admin re-approval\",\n          requiresReview: true \n        });\n      }\n      \n      // Can't edit rejected campaigns\n      if (campaign.status === \"rejected\") {\n        return res.status(403).json({ message: \"Cannot edit rejected campaigns\" });\n      }\n      \n      // Determine if this is a critical edit that requires re-approval\n      const criticalFields = ['title', 'description', 'goalAmount', 'deadline', 'fundingType', 'category'];\n      const isCriticalEdit = criticalFields.some(field => \n        req.body[field] !== undefined && req.body[field] !== campaign[field as keyof typeof campaign]\n      );\n      \n      let updateData = { ...req.body };\n      \n      // If this is a critical edit to an approved campaign, mark for re-approval\n      if (isCriticalEdit && campaign.status === \"active\" && campaign.originalApprovalDate) {\n        updateData = {\n          ...updateData,\n          status: \"pending_approval\",\n          isEditedAfterApproval: true,\n          editCount: (campaign.editCount || 0) + 1,\n          lastEditedAt: new Date(),\n          adminComments: null, // Clear previous admin comments\n          reviewedBy: null,\n          reviewedAt: null,\n        };\n        \n        // Create notification for user\n        await storage.createUserNotification({\n          userId,\n          title: \"Campaign Under Review\",\n          message: `Your campaign \"${campaign.title}\" has been submitted for admin review due to significant changes. The campaign is temporarily paused until approval.`,\n          type: \"warning\",\n          relatedCampaignId: campaign.id,\n        });\n      } else if (!isCriticalEdit) {\n        // Minor edit - just update last edited time\n        updateData.lastEditedAt = new Date();\n      }\n\n      const updatedCampaign = await storage.updateCampaignWithEditTracking(req.params.id, updateData, userId);\n      \n      res.json({\n        ...updatedCampaign,\n        requiresReview: isCriticalEdit && campaign.status === \"active\" && campaign.originalApprovalDate,\n        editType: isCriticalEdit ? \"critical\" : \"minor\"\n      });\n    } catch (error) {\n      console.error(\"Error updating campaign:\", error);\n      res.status(400).json({ message: (error as Error).message || \"Failed to update campaign\" });\n    }\n  });\n\n  // Contribution routes\n  app.get('/api/contributions', async (req, res) => {\n    try {\n      const { campaignId, backerId } = req.query;\n      const contributions = await storage.getContributions(\n        campaignId as string,\n        backerId as string\n      );\n      res.json(contributions);\n    } catch (error) {\n      console.error(\"Error fetching contributions:\", error);\n      res.status(500).json({ message: \"Failed to fetch contributions\" });\n    }\n  });\n\n  app.post('/api/contributions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const contributionData = insertContributionSchema.parse({\n        ...req.body,\n        backerId: userId,\n      });\n\n      const contribution = await storage.createContribution(contributionData);\n      \n      // Create corresponding blockchain transaction\n      if (contributionData.transactionHash) {\n        await storage.createTransaction({\n          hash: contributionData.transactionHash,\n          campaignId: contributionData.campaignId,\n          fromAddress: req.body.fromAddress || \"0x0000\",\n          toAddress: req.body.toAddress || \"0x0000\",\n          amount: contributionData.amount,\n          gasUsed: req.body.gasUsed || \"21000\",\n          gasPrice: req.body.gasPrice || \"0.02\",\n          blockNumber: req.body.blockNumber || \"0\",\n          transactionType: \"contribution\",\n          status: \"confirmed\",\n        });\n      }\n\n      res.status(201).json(contribution);\n    } catch (error) {\n      console.error(\"Error creating contribution:\", error);\n      res.status(400).json({ message: (error as Error).message || \"Failed to create contribution\" });\n    }\n  });\n\n  // Transaction routes\n  app.get('/api/transactions', async (req, res) => {\n    try {\n      const { campaignId, transactionType, limit } = req.query;\n      const transactions = await storage.getTransactions({\n        campaignId: campaignId as string,\n        transactionType: transactionType as string,\n        limit: limit ? parseInt(limit as string) : undefined,\n      });\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  // Get transactions by campaign ID\n  app.get('/api/transactions/:campaignId', async (req, res) => {\n    try {\n      const { campaignId } = req.params;\n      const transactions = await storage.getTransactions({ campaignId });\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching campaign transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch campaign transactions\" });\n    }\n  });\n\n  // Get contributions by campaign ID\n  app.get('/api/contributions/:campaignId', async (req, res) => {\n    try {\n      const { campaignId } = req.params;\n      const contributions = await storage.getContributions(campaignId);\n      res.json(contributions);\n    } catch (error) {\n      console.error(\"Error fetching campaign contributions:\", error);\n      res.status(500).json({ message: \"Failed to fetch campaign contributions\" });\n    }\n  });\n\n  // AI Assistant routes\n  app.post('/api/ai/optimize-title', isAuthenticated, async (req: any, res) => {\n    try {\n      const { title } = req.body;\n      if (!title) {\n        return res.status(400).json({ message: \"Title is required\" });\n      }\n\n      const result = await optimizeCampaignTitle(title);\n      \n      // Store AI interaction\n      await storage.createAiInteraction({\n        userId: req.user.id,\n        interactionType: \"title_optimization\",\n        inputData: { title },\n        outputData: result,\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error optimizing title:\", error);\n      res.status(500).json({ message: \"Failed to optimize title\" });\n    }\n  });\n\n  app.post('/api/ai/enhance-description', isAuthenticated, async (req: any, res) => {\n    try {\n      const { description, category } = req.body;\n      if (!description || !category) {\n        return res.status(400).json({ message: \"Description and category are required\" });\n      }\n\n      const result = await enhanceCampaignDescription(description, category);\n      \n      // Store AI interaction\n      await storage.createAiInteraction({\n        userId: req.user.id,\n        interactionType: \"description_enhancement\",\n        inputData: { description, category },\n        outputData: result,\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error enhancing description:\", error);\n      res.status(500).json({ message: \"Failed to enhance description\" });\n    }\n  });\n\n  app.post('/api/ai/analyze-credibility', isAuthenticated, async (req: any, res) => {\n    try {\n      const { campaignData } = req.body;\n      const user = await storage.getUser(req.user.id);\n      \n      const result = await analyzeCampaignCredibility({\n        ...campaignData,\n        creatorKycStatus: user?.kycStatus || \"pending\",\n      });\n      \n      // Store AI interaction\n      await storage.createAiInteraction({\n        userId: req.user.id,\n        interactionType: \"credibility_analysis\",\n        inputData: campaignData,\n        outputData: result,\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error analyzing credibility:\", error);\n      res.status(500).json({ message: \"Failed to analyze credibility\" });\n    }\n  });\n\n  app.post('/api/ai/predict-funding', isAuthenticated, async (req: any, res) => {\n    try {\n      const { campaignData } = req.body;\n      \n      const result = await predictFundingSuccess(campaignData);\n      \n      // Store AI interaction\n      await storage.createAiInteraction({\n        userId: req.user.id,\n        interactionType: \"funding_prediction\",\n        inputData: campaignData,\n        outputData: result,\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error predicting funding success:\", error);\n      res.status(500).json({ message: \"Failed to predict funding success\" });\n    }\n  });\n\n  // Placeholder image endpoint\n  app.get('/api/placeholder/:width/:height', (req, res) => {\n    const { width, height } = req.params;\n    const w = parseInt(width) || 400;\n    const h = parseInt(height) || 300;\n    \n    // Generate SVG placeholder\n    const svg = `<svg width=\"${w}\" height=\"${h}\" xmlns=\"http://www.w3.org/2000/svg\">\n      <defs>\n        <linearGradient id=\"grad\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n          <stop offset=\"0%\" style=\"stop-color:#6366f1;stop-opacity:1\" />\n          <stop offset=\"100%\" style=\"stop-color:#8b5cf6;stop-opacity:1\" />\n        </linearGradient>\n      </defs>\n      <rect width=\"100%\" height=\"100%\" fill=\"url(#grad)\"/>\n      <text x=\"50%\" y=\"50%\" font-family=\"Arial, sans-serif\" font-size=\"16\" fill=\"white\" text-anchor=\"middle\" dy=\"0.3em\">\n        Campaign Image\n      </text>\n    </svg>`;\n    \n    res.setHeader('Content-Type', 'image/svg+xml');\n    res.setHeader('Cache-Control', 'public, max-age=31536000');\n    res.send(svg);\n  });\n\n  // Statistics routes\n  app.get('/api/stats', async (req, res) => {\n    try {\n      const stats = await storage.getCampaignStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch statistics\" });\n    }\n  });\n\n  // KYC routes\n  app.post('/api/kyc/submit', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const kycData = insertKycApplicationSchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      // Check if user already has a pending/approved KYC\n      const existingKyc = await storage.getKycApplication(userId);\n      if (existingKyc && (existingKyc.status === 'pending' || existingKyc.status === 'approved')) {\n        return res.status(400).json({ message: \"KYC application already exists\" });\n      }\n\n      const kycApplication = await storage.createKycApplication(kycData);\n      \n      // Update user's KYC status to pending\n      await storage.updateUser(userId, { kycStatus: 'pending' });\n\n      res.json(kycApplication);\n    } catch (error) {\n      console.error(\"Error submitting KYC:\", error);\n      res.status(500).json({ message: \"Failed to submit KYC application\" });\n    }\n  });\n\n  app.get('/api/kyc/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const kycApplication = await storage.getKycApplication(userId);\n      \n      if (!kycApplication) {\n        return res.json({ status: 'not_submitted' });\n      }\n\n      res.json({\n        status: kycApplication.status,\n        submittedAt: kycApplication.createdAt,\n        reviewedAt: kycApplication.reviewedAt,\n        adminComments: kycApplication.adminComments,\n      });\n    } catch (error) {\n      console.error(\"Error fetching KYC status:\", error);\n      res.status(500).json({ message: \"Failed to fetch KYC status\" });\n    }\n  });\n\n  // Admin KYC routes\n  app.get('/api/admin/kyc/applications', requireAdmin, async (req: any, res) => {\n    try {\n      const { status } = req.query;\n      const applications = await storage.getAllKycApplications(status as string);\n      res.json(applications);\n    } catch (error) {\n      console.error(\"Error fetching KYC applications:\", error);\n      res.status(500).json({ message: \"Failed to fetch KYC applications\" });\n    }\n  });\n\n  app.get('/api/admin/kyc/applications/:id', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const application = await storage.getKycApplicationById(id);\n      \n      if (!application) {\n        return res.status(404).json({ message: \"KYC application not found\" });\n      }\n\n      res.json(application);\n    } catch (error) {\n      console.error(\"Error fetching KYC application:\", error);\n      res.status(500).json({ message: \"Failed to fetch KYC application\" });\n    }\n  });\n\n  app.put('/api/admin/kyc/applications/:id', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status, adminComments } = req.body;\n\n      const application = await storage.getKycApplicationById(id);\n      if (!application) {\n        return res.status(404).json({ message: \"KYC application not found\" });\n      }\n\n      const updatedApplication = await storage.updateKycApplication(id, {\n        status,\n        adminComments,\n        reviewedBy: req.user.username,\n        reviewedAt: new Date(),\n      });\n\n      // Update user's KYC status\n      await storage.updateUser(application.userId, { kycStatus: status });\n\n      res.json(updatedApplication);\n    } catch (error) {\n      console.error(\"Error updating KYC application:\", error);\n      res.status(500).json({ message: \"Failed to update KYC application\" });\n    }\n  });\n\n  // Admin Campaign Management Routes\n  app.get('/api/admin/campaigns', requireAdmin, async (req: any, res) => {\n    try {\n      const { status } = req.query;\n      const campaigns = await storage.getCampaigns({\n        status: status as string,\n        limit: 100,\n      });\n      res.json(campaigns);\n    } catch (error) {\n      console.error(\"Error fetching admin campaigns:\", error);\n      res.status(500).json({ message: \"Failed to fetch campaigns\" });\n    }\n  });\n\n  app.get('/api/admin/campaigns/:id', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const campaign = await storage.getCampaign(id);\n      \n      if (!campaign) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n\n      res.json(campaign);\n    } catch (error) {\n      console.error(\"Error fetching campaign:\", error);\n      res.status(500).json({ message: \"Failed to fetch campaign\" });\n    }\n  });\n\n  app.put('/api/admin/campaigns/:id/status', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status, adminComments } = req.body;\n\n      const campaign = await storage.getCampaign(id);\n      if (!campaign) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n\n      const updatedCampaign = await storage.updateCampaign(id, {\n        status,\n        adminComments,\n        reviewedBy: req.user.username,\n        reviewedAt: new Date(),\n        ...(status === \"active\" && !campaign.originalApprovalDate && { originalApprovalDate: new Date() }),\n      });\n\n      // Create notification for campaign creator\n      if (campaign.creatorId) {\n        await storage.createUserNotification({\n          userId: campaign.creatorId,\n          title: `Campaign ${status === \"active\" ? \"Approved\" : status === \"rejected\" ? \"Rejected\" : \"Updated\"}`,\n          message: `Your campaign \"${campaign.title}\" has been ${status}${adminComments ? `. Admin notes: ${adminComments}` : \".\"}`,\n          type: status === \"active\" ? \"success\" : status === \"rejected\" ? \"error\" : \"info\",\n          relatedCampaignId: id,\n        });\n      }\n\n      res.json(updatedCampaign);\n    } catch (error) {\n      console.error(\"Error updating campaign status:\", error);\n      res.status(500).json({ message: \"Failed to update campaign status\" });\n    }\n  });\n\n  // Enhanced User Management Routes\n  app.get('/api/admin/users', requireAdmin, async (req: any, res) => {\n    try {\n      const { flagged, kycStatus, limit, offset } = req.query;\n      const users = await storage.getAllUsers({\n        flagged: flagged === 'true' ? true : flagged === 'false' ? false : undefined,\n        kycStatus: kycStatus as string,\n        limit: limit ? parseInt(limit as string) : undefined,\n        offset: offset ? parseInt(offset as string) : undefined,\n      });\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.delete('/api/admin/users/:id', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteUser(id);\n      \n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  app.put('/api/admin/users/:id/suspend', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { reason } = req.body;\n\n      if (!reason) {\n        return res.status(400).json({ message: \"Reason is required for suspending a user\" });\n      }\n\n      const user = await storage.suspendUser(id, reason, req.user.username);\n      \n      // Create notification for suspended user\n      await storage.createUserNotification({\n        userId: id,\n        title: \"Account Suspended\",\n        message: `Your account has been suspended: ${reason}. Please contact support for assistance.`,\n        type: \"error\",\n      });\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error suspending user:\", error);\n      res.status(500).json({ message: \"Failed to suspend user\" });\n    }\n  });\n\n  app.put('/api/admin/users/:id/unsuspend', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n\n      const user = await storage.unsuspendUser(id);\n      \n      // Create notification for unsuspended user\n      await storage.createUserNotification({\n        userId: id,\n        title: \"Account Restored\",\n        message: \"Your account has been restored. You now have full access to all features.\",\n        type: \"success\",\n      });\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error unsuspending user:\", error);\n      res.status(500).json({ message: \"Failed to unsuspend user\" });\n    }\n  });\n\n  app.put('/api/admin/users/:id', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      // Don't allow updating password this way\n      delete updates.password;\n      delete updates.id;\n      delete updates.createdAt;\n\n      const user = await storage.updateUser(id, updates);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.post('/api/admin/users/:id/reset-password', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { newPassword } = req.body;\n\n      if (!newPassword || newPassword.length < 6) {\n        return res.status(400).json({ message: \"Password must be at least 6 characters\" });\n      }\n\n      // Hash the new password\n      const scrypt = require('crypto').scrypt;\n      const randomBytes = require('crypto').randomBytes;\n      const salt = randomBytes(16).toString(\"hex\");\n      const hashedPassword = await new Promise((resolve, reject) => {\n        scrypt(newPassword, salt, 64, (err: any, derivedKey: any) => {\n          if (err) reject(err);\n          resolve(`${derivedKey.toString(\"hex\")}.${salt}`);\n        });\n      });\n\n      const user = await storage.resetUserPassword(id, hashedPassword as string);\n      \n      // Create notification for user\n      await storage.createUserNotification({\n        userId: id,\n        title: \"Password Reset\",\n        message: \"Your password has been reset by an administrator. Please use your new password to log in.\",\n        type: \"info\",\n      });\n\n      res.json({ message: \"Password reset successfully\" });\n    } catch (error) {\n      console.error(\"Error resetting password:\", error);\n      res.status(500).json({ message: \"Failed to reset password\" });\n    }\n  });\n\n  app.post('/api/admin/users/:id/notify', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { title, message, type = \"info\" } = req.body;\n\n      if (!title || !message) {\n        return res.status(400).json({ message: \"Title and message are required\" });\n      }\n\n      const notification = await storage.createUserNotification({\n        userId: id,\n        title,\n        message,\n        type,\n      });\n\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error sending notification:\", error);\n      res.status(500).json({ message: \"Failed to send notification\" });\n    }\n  });\n\n  app.get('/api/admin/users/:id/campaigns', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const campaigns = await storage.getUserCampaigns(id);\n      res.json(campaigns);\n    } catch (error) {\n      console.error(\"Error fetching user campaigns:\", error);\n      res.status(500).json({ message: \"Failed to fetch user campaigns\" });\n    }\n  });\n\n  app.get('/api/admin/users/:id/contributions', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const contributions = await storage.getUserContributions(id);\n      res.json(contributions);\n    } catch (error) {\n      console.error(\"Error fetching user contributions:\", error);\n      res.status(500).json({ message: \"Failed to fetch user contributions\" });\n    }\n  });\n\n  app.get('/api/admin/users/:id/export', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const [user, campaigns, contributions, kycApplication] = await Promise.all([\n        storage.getUser(id),\n        storage.getUserCampaigns(id),\n        storage.getUserContributions(id),\n        storage.getKycApplication(id),\n      ]);\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const exportData = {\n        user: {\n          ...user,\n          password: \"[REDACTED]\", // Don't export password\n        },\n        campaigns,\n        contributions,\n        kycApplication,\n        exportedAt: new Date().toISOString(),\n        exportedBy: req.user.username,\n      };\n\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"user-${user.username}-${Date.now()}.json\"`);\n      res.json(exportData);\n    } catch (error) {\n      console.error(\"Error exporting user data:\", error);\n      res.status(500).json({ message: \"Failed to export user data\" });\n    }\n  });\n\n  app.get('/api/admin/users/:id', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.getUser(id);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Get user's campaigns, contributions, and KYC info\n      const [campaigns, contributions, kycApplication] = await Promise.all([\n        storage.getUserCampaigns(id),\n        storage.getContributions(undefined, id),\n        storage.getKycApplication(id),\n      ]);\n\n      res.json({\n        ...user,\n        campaigns,\n        contributions,\n        kycApplication,\n      });\n    } catch (error) {\n      console.error(\"Error fetching user details:\", error);\n      res.status(500).json({ message: \"Failed to fetch user details\" });\n    }\n  });\n\n  app.put('/api/admin/users/:id/flag', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { reason } = req.body;\n\n      if (!reason) {\n        return res.status(400).json({ message: \"Reason is required for flagging a user\" });\n      }\n\n      const user = await storage.flagUser(id, reason, req.user.username);\n      \n      // Create notification for flagged user\n      await storage.createUserNotification({\n        userId: id,\n        title: \"Account Flagged\",\n        message: `Your account has been flagged: ${reason}. Please submit a reinstatement request to regain full access.`,\n        type: \"warning\",\n      });\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error flagging user:\", error);\n      res.status(500).json({ message: \"Failed to flag user\" });\n    }\n  });\n\n  app.put('/api/admin/users/:id/unflag', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n\n      const user = await storage.unflagUser(id);\n      \n      // Create notification for unflagged user\n      await storage.createUserNotification({\n        userId: id,\n        title: \"Account Unflagged\",\n        message: \"Your account has been unflagged. You now have full access to all features.\",\n        type: \"success\",\n      });\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error unflagging user:\", error);\n      res.status(500).json({ message: \"Failed to unflag user\" });\n    }\n  });\n\n  // Reinstatement Request Routes\n  app.post('/api/reinstatement-requests', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n\n      if (!user?.isFlagged) {\n        return res.status(400).json({ message: \"User is not flagged\" });\n      }\n\n      // Check if there's already a pending request\n      const existingRequest = await storage.getReinstatementRequestByUserId(userId);\n      if (existingRequest && existingRequest.status === \"pending\") {\n        return res.status(400).json({ message: \"You already have a pending reinstatement request\" });\n      }\n\n      const requestData = insertReinstatementRequestSchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const request = await storage.createReinstatementRequest(requestData);\n      res.status(201).json(request);\n    } catch (error) {\n      console.error(\"Error creating reinstatement request:\", error);\n      res.status(400).json({ message: (error as Error).message || \"Failed to create reinstatement request\" });\n    }\n  });\n\n  app.get('/api/reinstatement-requests', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const request = await storage.getReinstatementRequestByUserId(userId);\n      res.json(request || null);\n    } catch (error) {\n      console.error(\"Error fetching reinstatement request:\", error);\n      res.status(500).json({ message: \"Failed to fetch reinstatement request\" });\n    }\n  });\n\n  app.get('/api/admin/reinstatement-requests', requireAdmin, async (req: any, res) => {\n    try {\n      const { status } = req.query;\n      const requests = await storage.getReinstatementRequests(status as string);\n      res.json(requests);\n    } catch (error) {\n      console.error(\"Error fetching reinstatement requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch reinstatement requests\" });\n    }\n  });\n\n  app.put('/api/admin/reinstatement-requests/:id', requireAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status, adminComments } = req.body;\n\n      const request = await storage.updateReinstatementRequest(id, {\n        status,\n        adminComments,\n        reviewedBy: req.user.username,\n        reviewedAt: new Date(),\n      });\n\n      // If approved, unflag the user\n      if (status === \"approved\") {\n        const userId = request.userId;\n        await storage.unflagUser(userId);\n        \n        await storage.createUserNotification({\n          userId,\n          title: \"Reinstatement Request Approved\",\n          message: \"Your reinstatement request has been approved. Your account has been unflagged and you now have full access.\",\n          type: \"success\",\n        });\n      } else if (status === \"rejected\") {\n        await storage.createUserNotification({\n          userId: request.userId,\n          title: \"Reinstatement Request Rejected\",\n          message: `Your reinstatement request has been rejected${adminComments ? `: ${adminComments}` : \".\"}`,\n          type: \"error\",\n        });\n      }\n\n      res.json(request);\n    } catch (error) {\n      console.error(\"Error updating reinstatement request:\", error);\n      res.status(500).json({ message: \"Failed to update reinstatement request\" });\n    }\n  });\n\n  // User Notification Routes\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { unreadOnly } = req.query;\n      const notifications = await storage.getUserNotifications(userId, unreadOnly === 'true');\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.put('/api/notifications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const notification = await storage.markNotificationAsRead(id);\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.put('/api/notifications/mark-all-read', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      await storage.markAllNotificationsAsRead(userId);\n      res.json({ message: \"All notifications marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking all notifications as read:\", error);\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  // Enhanced Campaign Routes\n  app.get('/api/user/campaigns', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const campaigns = await storage.getUserCampaigns(userId);\n      res.json(campaigns);\n    } catch (error) {\n      console.error(\"Error fetching user campaigns:\", error);\n      res.status(500).json({ message: \"Failed to fetch user campaigns\" });\n    }\n  });\n\n  app.get('/api/user/can-create-campaign', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const result = await storage.canUserCreateCampaign(userId);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error checking campaign creation eligibility:\", error);\n      res.status(500).json({ message: \"Failed to check campaign creation eligibility\" });\n    }\n  });\n\n\n  // Campaign edit eligibility check\n  app.get('/api/campaigns/:id/can-edit', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (user?.isFlagged) {\n        return res.json({ \n          canEdit: false, \n          reason: \"Cannot edit campaigns while account is flagged\" \n        });\n      }\n      \n      const campaign = await storage.getCampaign(req.params.id);\n      \n      if (!campaign) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n      \n      if (campaign.creatorId !== userId) {\n        return res.json({ \n          canEdit: false, \n          reason: \"You can only edit your own campaigns\" \n        });\n      }\n      \n      // Check if campaign is pending re-approval after edits\n      if (campaign.isEditedAfterApproval && campaign.status === \"pending_approval\") {\n        return res.json({ \n          canEdit: false, \n          reason: \"Cannot edit campaign while pending admin re-approval\",\n          requiresReview: true \n        });\n      }\n      \n      // Can't edit rejected campaigns\n      if (campaign.status === \"rejected\") {\n        return res.json({ \n          canEdit: false, \n          reason: \"Cannot edit rejected campaigns\" \n        });\n      }\n      \n      res.json({ canEdit: true });\n    } catch (error) {\n      console.error(\"Error checking campaign edit eligibility:\", error);\n      res.status(500).json({ message: \"Failed to check campaign edit eligibility\" });\n    }\n  });\n\n  // User profile completion status\n  app.get('/api/user/profile-completion', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      let completionScore = 0;\n      const completionItems = [\n        { field: 'firstName', label: 'First Name', completed: !!user.firstName },\n        { field: 'lastName', label: 'Last Name', completed: !!user.lastName },\n        { field: 'email', label: 'Email Address', completed: !!user.email },\n        { field: 'profileImageUrl', label: 'Profile Picture', completed: !!user.profileImageUrl },\n        { field: 'walletAddress', label: 'Wallet Address', completed: !!user.walletAddress },\n        { field: 'kycStatus', label: 'KYC Verification', completed: user.kycStatus === 'approved' }\n      ];\n      \n      completionScore = Math.round((completionItems.filter(item => item.completed).length / completionItems.length) * 100);\n      \n      res.json({\n        completionScore,\n        completionItems,\n        isProfileComplete: completionScore >= 80\n      });\n    } catch (error) {\n      console.error(\"Error fetching profile completion:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile completion\" });\n    }\n  });\n\n  // User financial overview\n  app.get('/api/user/financial-overview', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const [campaigns, contributions] = await Promise.all([\n        storage.getUserCampaigns(userId),\n        storage.getUserContributions(userId)\n      ]);\n      \n      const totalRaised = campaigns.reduce((sum, campaign) => sum + parseFloat(campaign.currentAmount || \"0\"), 0);\n      const totalContributed = contributions.reduce((sum, contribution) => sum + parseFloat(contribution.amount || \"0\"), 0);\n      const totalGoalAmount = campaigns.reduce((sum, campaign) => sum + parseFloat(campaign.goalAmount || \"0\"), 0);\n      \n      const activeCampaigns = campaigns.filter(c => c.status === \"active\");\n      const pendingCampaigns = campaigns.filter(c => c.status === \"pending_approval\");\n      const completedCampaigns = campaigns.filter(c => c.status === \"completed\");\n      const rejectedCampaigns = campaigns.filter(c => c.status === \"rejected\");\n      \n      const averageFunding = campaigns.length > 0 ? totalRaised / campaigns.length : 0;\n      const fundingGoalProgress = totalGoalAmount > 0 ? (totalRaised / totalGoalAmount) * 100 : 0;\n      \n      res.json({\n        totalRaised: totalRaised.toFixed(4),\n        totalContributed: totalContributed.toFixed(4),\n        totalGoalAmount: totalGoalAmount.toFixed(4),\n        averageFunding: averageFunding.toFixed(4),\n        fundingGoalProgress: Math.round(fundingGoalProgress),\n        campaignStats: {\n          total: campaigns.length,\n          active: activeCampaigns.length,\n          pending: pendingCampaigns.length,\n          completed: completedCampaigns.length,\n          rejected: rejectedCampaigns.length\n        },\n        contributionStats: {\n          totalContributions: contributions.length,\n          averageContribution: contributions.length > 0 ? totalContributed / contributions.length : 0\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching financial overview:\", error);\n      res.status(500).json({ message: \"Failed to fetch financial overview\" });\n    }\n  });\n\n  // User notifications\n  app.get('/api/notifications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const notifications = await storage.getUserNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  // Mark notification as read\n  app.put('/api/notifications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const notification = await storage.markNotificationAsRead(id);\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // Mark all notifications as read\n  app.put('/api/notifications/mark-all-read', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      await storage.markAllNotificationsAsRead(userId);\n      res.json({ message: \"All notifications marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking all notifications as read:\", error);\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n\n  // Handle API 404s properly\n  app.all('/api/*', (req, res) => {\n    res.status(404).json({ \n      error: 'API endpoint not found',\n      path: req.path,\n      method: req.method \n    });\n  });\n\n  // Error handling middleware for API routes\n  app.use('/api/*', (err: any, req: any, res: any, next: any) => {\n    console.error('API Error:', err);\n    res.status(500).json({ \n      error: 'Internal server error',\n      message: err.message \n    });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":41277},"server/storage.ts":{"content":"import {\n  users,\n  campaigns,\n  contributions,\n  transactions,\n  aiInteractions,\n  kycApplications,\n  adminUsers,\n  reinstatementRequests,\n  userNotifications,\n  type User,\n  type InsertUser,\n  type Campaign,\n  type InsertCampaign,\n  type Contribution,\n  type InsertContribution,\n  type Transaction,\n  type InsertTransaction,\n  type AiInteraction,\n  type InsertAiInteraction,\n  type KycApplication,\n  type InsertKycApplication,\n  type AdminUser,\n  type InsertAdminUser,\n  type ReinstatementRequest,\n  type InsertReinstatementRequest,\n  type UserNotification,\n  type InsertUserNotification,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, count, sum, sql } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (manual authentication)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  \n  // Session store for authentication\n  sessionStore: any;\n  \n  // Campaign operations\n  getCampaigns(filters?: {\n    category?: string;\n    status?: string;\n    creatorId?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Campaign[]>;\n  getCampaign(id: string): Promise<Campaign | undefined>;\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n  updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign>;\n  deleteCampaign(id: string): Promise<void>;\n  \n  // Contribution operations\n  getContributions(campaignId?: string, backerId?: string): Promise<Contribution[]>;\n  createContribution(contribution: InsertContribution): Promise<Contribution>;\n  \n  // Transaction operations\n  getTransactions(filters?: {\n    campaignId?: string;\n    transactionType?: string;\n    limit?: number;\n  }): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  \n  // AI interaction operations\n  createAiInteraction(interaction: InsertAiInteraction): Promise<AiInteraction>;\n  getAiInteractions(userId: string, campaignId?: string): Promise<AiInteraction[]>;\n  \n  // KYC operations\n  createKycApplication(application: InsertKycApplication): Promise<KycApplication>;\n  getKycApplication(userId: string): Promise<KycApplication | undefined>;\n  getKycApplicationById(id: string): Promise<KycApplication | undefined>;\n  getAllKycApplications(status?: string): Promise<KycApplication[]>;\n  updateKycApplication(id: string, updates: Partial<KycApplication>): Promise<KycApplication>;\n  \n  // Admin operations\n  createAdminUser(admin: InsertAdminUser): Promise<AdminUser>;\n  getAdminByUsername(username: string): Promise<AdminUser | undefined>;\n  getAdminByEmail(email: string): Promise<AdminUser | undefined>;\n  \n  // Statistics\n  getCampaignStats(): Promise<{\n    totalRaised: string;\n    activeCampaigns: number;\n    totalBackers: number;\n    successRate: number;\n  }>;\n  \n  // User management\n  getAllUsers(filters?: { flagged?: boolean; kycStatus?: string; limit?: number; offset?: number }): Promise<User[]>;\n  flagUser(userId: string, reason: string, flaggedBy: string): Promise<User>;\n  unflagUser(userId: string): Promise<User>;\n  deleteUser(userId: string): Promise<void>;\n  suspendUser(userId: string, reason: string, suspendedBy: string): Promise<User>;\n  unsuspendUser(userId: string): Promise<User>;\n  getUserCampaigns(userId: string): Promise<Campaign[]>;\n  getUserContributions(userId: string): Promise<Contribution[]>;\n  resetUserPassword(userId: string, newPassword: string): Promise<User>;\n  \n  // Reinstatement requests\n  createReinstatementRequest(request: InsertReinstatementRequest): Promise<ReinstatementRequest>;\n  getReinstatementRequests(status?: string): Promise<ReinstatementRequest[]>;\n  getReinstatementRequestByUserId(userId: string): Promise<ReinstatementRequest | undefined>;\n  updateReinstatementRequest(id: string, updates: Partial<ReinstatementRequest>): Promise<ReinstatementRequest>;\n  \n  // User notifications\n  createUserNotification(notification: InsertUserNotification): Promise<UserNotification>;\n  getUserNotifications(userId: string, unreadOnly?: boolean): Promise<UserNotification[]>;\n  markNotificationAsRead(id: string): Promise<UserNotification>;\n  markAllNotificationsAsRead(userId: string): Promise<void>;\n  \n  // Campaign management enhancements\n  getUserCampaigns(userId: string): Promise<Campaign[]>;\n  canUserCreateCampaign(userId: string): Promise<{ canCreate: boolean; reason?: string }>;\n  updateCampaignWithEditTracking(id: string, updates: Partial<Campaign>, editorId: string): Promise<Campaign>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  public sessionStore: any;\n\n  constructor() {\n    const MemoryStore = createMemoryStore(session);\n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000, // 24 hours\n    });\n  }\n\n  // User operations (manual authentication)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(userData: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Campaign operations\n  async getCampaigns(filters?: {\n    category?: string;\n    status?: string;\n    creatorId?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Campaign[]> {\n    const conditions = [];\n    if (filters?.category) {\n      conditions.push(eq(campaigns.category, filters.category));\n    }\n    if (filters?.status) {\n      conditions.push(eq(campaigns.status, filters.status));\n    }\n    if (filters?.creatorId) {\n      conditions.push(eq(campaigns.creatorId, filters.creatorId));\n    }\n\n    let query = db.select().from(campaigns);\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n\n    const results = await query.orderBy(desc(campaigns.createdAt));\n    \n    if (filters?.limit && filters?.offset) {\n      return results.slice(filters.offset, filters.offset + filters.limit);\n    } else if (filters?.limit) {\n      return results.slice(0, filters.limit);\n    }\n    \n    return results;\n  }\n\n  async getCampaign(id: string): Promise<Campaign | undefined> {\n    const [campaign] = await db.select().from(campaigns).where(eq(campaigns.id, id));\n    return campaign || undefined;\n  }\n\n  async createCampaign(campaignData: InsertCampaign): Promise<Campaign> {\n    const [campaign] = await db\n      .insert(campaigns)\n      .values({\n        ...campaignData,\n        currentAmount: \"0\",\n        backerCount: 0,\n        credibilityScore: \"0.0\",\n      })\n      .returning();\n    return campaign;\n  }\n\n  async updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign> {\n    const [campaign] = await db\n      .update(campaigns)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(campaigns.id, id))\n      .returning();\n    \n    if (!campaign) {\n      throw new Error(\"Campaign not found\");\n    }\n    \n    return campaign;\n  }\n\n  async deleteCampaign(id: string): Promise<void> {\n    await db.delete(campaigns).where(eq(campaigns.id, id));\n  }\n\n  // Contribution operations\n  async getContributions(campaignId?: string, backerId?: string): Promise<Contribution[]> {\n    const conditions = [];\n    if (campaignId) {\n      conditions.push(eq(contributions.campaignId, campaignId));\n    }\n    if (backerId) {\n      conditions.push(eq(contributions.backerId, backerId));\n    }\n\n    let query = db.select().from(contributions);\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n\n    return await query.orderBy(desc(contributions.createdAt));\n  }\n\n  async createContribution(contributionData: InsertContribution): Promise<Contribution> {\n    const [contribution] = await db\n      .insert(contributions)\n      .values(contributionData)\n      .returning();\n\n    // Update campaign current amount and backer count\n    await db\n      .update(campaigns)\n      .set({\n        currentAmount: sql`${campaigns.currentAmount} + ${contributionData.amount}`,\n        backerCount: sql`${campaigns.backerCount} + 1`,\n        updatedAt: new Date(),\n      })\n      .where(eq(campaigns.id, contributionData.campaignId));\n    \n    return contribution;\n  }\n\n  // Transaction operations\n  async getTransactions(filters?: {\n    campaignId?: string;\n    transactionType?: string;\n    limit?: number;\n  }): Promise<Transaction[]> {\n    const conditions = [];\n    if (filters?.campaignId) {\n      conditions.push(eq(transactions.campaignId, filters.campaignId));\n    }\n    if (filters?.transactionType) {\n      conditions.push(eq(transactions.transactionType, filters.transactionType));\n    }\n\n    let query = db.select().from(transactions);\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n\n    const results = await query.orderBy(desc(transactions.createdAt));\n\n    if (filters?.limit) {\n      return results.slice(0, filters.limit);\n    }\n\n    return results;\n  }\n\n  async createTransaction(transactionData: InsertTransaction): Promise<Transaction> {\n    const [transaction] = await db\n      .insert(transactions)\n      .values(transactionData)\n      .returning();\n    return transaction;\n  }\n\n  // AI interaction operations\n  async createAiInteraction(interactionData: InsertAiInteraction): Promise<AiInteraction> {\n    const [interaction] = await db\n      .insert(aiInteractions)\n      .values(interactionData)\n      .returning();\n    return interaction;\n  }\n\n  async getAiInteractions(userId: string, campaignId?: string): Promise<AiInteraction[]> {\n    let query = db.select().from(aiInteractions);\n    \n    if (campaignId) {\n      query = query.where(and(eq(aiInteractions.userId, userId), eq(aiInteractions.campaignId, campaignId))) as any;\n    } else {\n      query = query.where(eq(aiInteractions.userId, userId)) as any;\n    }\n\n    return await query.orderBy(desc(aiInteractions.createdAt));\n  }\n\n  // Statistics\n  async getCampaignStats(): Promise<{\n    totalRaised: string;\n    activeCampaigns: number;\n    totalBackers: number;\n    successRate: number;\n  }> {\n    const [statsResult] = await db\n      .select({\n        totalRaised: sql<string>`COALESCE(SUM(CAST(${campaigns.currentAmount} AS DECIMAL)), 0)`,\n        totalCampaigns: count(campaigns.id),\n        activeCampaigns: sql<number>`COUNT(CASE WHEN ${campaigns.status} = 'active' THEN 1 END)`,\n        completedCampaigns: sql<number>`COUNT(CASE WHEN ${campaigns.status} = 'completed' THEN 1 END)`,\n      })\n      .from(campaigns);\n\n    const [backersResult] = await db\n      .select({\n        totalBackers: sql<number>`COUNT(DISTINCT ${contributions.backerId})`,\n      })\n      .from(contributions)\n      .where(sql`${contributions.backerId} IS NOT NULL`);\n\n    const totalBackers = backersResult?.totalBackers || 0;\n    const successRate = statsResult.totalCampaigns > 0 \n      ? (statsResult.completedCampaigns / statsResult.totalCampaigns) * 100 \n      : 0;\n\n    return {\n      totalRaised: parseFloat(statsResult.totalRaised).toFixed(1),\n      activeCampaigns: statsResult.activeCampaigns,\n      totalBackers,\n      successRate: parseFloat(successRate.toFixed(1)),\n    };\n  }\n\n  // KYC operations\n  async createKycApplication(applicationData: InsertKycApplication): Promise<KycApplication> {\n    const [application] = await db\n      .insert(kycApplications)\n      .values({\n        ...applicationData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return application;\n  }\n\n  async getKycApplication(userId: string): Promise<KycApplication | undefined> {\n    const [application] = await db\n      .select()\n      .from(kycApplications)\n      .where(eq(kycApplications.userId, userId))\n      .orderBy(desc(kycApplications.createdAt));\n    return application || undefined;\n  }\n\n  async getKycApplicationById(id: string): Promise<KycApplication | undefined> {\n    const [application] = await db\n      .select()\n      .from(kycApplications)\n      .where(eq(kycApplications.id, id));\n    return application || undefined;\n  }\n\n  async getAllKycApplications(status?: string): Promise<KycApplication[]> {\n    let query = db.select().from(kycApplications);\n    \n    if (status) {\n      query = query.where(eq(kycApplications.status, status)) as any;\n    }\n\n    return await query.orderBy(desc(kycApplications.createdAt));\n  }\n\n  async updateKycApplication(id: string, updates: Partial<KycApplication>): Promise<KycApplication> {\n    const [application] = await db\n      .update(kycApplications)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(kycApplications.id, id))\n      .returning();\n    return application;\n  }\n\n  // Admin operations\n  async createAdminUser(adminData: InsertAdminUser): Promise<AdminUser> {\n    const [admin] = await db\n      .insert(adminUsers)\n      .values({\n        ...adminData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return admin;\n  }\n\n  async getAdminByUsername(username: string): Promise<AdminUser | undefined> {\n    const [admin] = await db\n      .select()\n      .from(adminUsers)\n      .where(eq(adminUsers.username, username));\n    return admin || undefined;\n  }\n\n  async getAdminByEmail(email: string): Promise<AdminUser | undefined> {\n    const [admin] = await db\n      .select()\n      .from(adminUsers)\n      .where(eq(adminUsers.email, email));\n    return admin || undefined;\n  }\n\n  // User management methods\n  async getAllUsers(filters?: { flagged?: boolean; kycStatus?: string; limit?: number; offset?: number }): Promise<User[]> {\n    let query = db.select().from(users);\n    const conditions = [];\n\n    if (filters?.flagged !== undefined) {\n      conditions.push(eq(users.isFlagged, filters.flagged));\n    }\n    if (filters?.kycStatus) {\n      conditions.push(eq(users.kycStatus, filters.kycStatus));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n\n    if (filters?.limit) {\n      query = query.limit(filters.limit) as any;\n    }\n    if (filters?.offset) {\n      query = query.offset(filters.offset) as any;\n    }\n\n    return await query.orderBy(desc(users.createdAt));\n  }\n\n  async flagUser(userId: string, reason: string, flaggedBy: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        isFlagged: true,\n        flaggedReason: reason,\n        flaggedBy: flaggedBy,\n        flaggedAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async unflagUser(userId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        isFlagged: false,\n        flaggedReason: null,\n        flaggedBy: null,\n        flaggedAt: null,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async deleteUser(userId: string): Promise<void> {\n    // Delete user's contributions first (cascade)\n    await db.delete(contributions).where(eq(contributions.backerId, userId));\n    // Delete user's campaigns\n    await db.delete(campaigns).where(eq(campaigns.creatorId, userId));\n    // Delete user's KYC applications\n    await db.delete(kycApplications).where(eq(kycApplications.userId, userId));\n    // Delete user's notifications\n    await db.delete(userNotifications).where(eq(userNotifications.userId, userId));\n    // Delete user's reinstatement requests\n    await db.delete(reinstatementRequests).where(eq(reinstatementRequests.userId, userId));\n    // Finally delete the user\n    await db.delete(users).where(eq(users.id, userId));\n  }\n\n  async suspendUser(userId: string, reason: string, suspendedBy: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        isFlagged: true,\n        flaggedReason: `SUSPENDED: ${reason}`,\n        flaggedBy: suspendedBy,\n        flaggedAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async unsuspendUser(userId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        isFlagged: false,\n        flaggedReason: null,\n        flaggedBy: null,\n        flaggedAt: null,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async getUserContributions(userId: string): Promise<Contribution[]> {\n    return db.select().from(contributions).where(eq(contributions.backerId, userId)).orderBy(desc(contributions.createdAt));\n  }\n\n  async resetUserPassword(userId: string, newPassword: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        password: newPassword,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Reinstatement request methods\n  async createReinstatementRequest(requestData: InsertReinstatementRequest): Promise<ReinstatementRequest> {\n    const [request] = await db\n      .insert(reinstatementRequests)\n      .values({\n        ...requestData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return request;\n  }\n\n  async getReinstatementRequests(status?: string): Promise<ReinstatementRequest[]> {\n    let query = db.select().from(reinstatementRequests);\n    \n    if (status) {\n      query = query.where(eq(reinstatementRequests.status, status)) as any;\n    }\n\n    return await query.orderBy(desc(reinstatementRequests.createdAt));\n  }\n\n  async getReinstatementRequestByUserId(userId: string): Promise<ReinstatementRequest | undefined> {\n    const [request] = await db\n      .select()\n      .from(reinstatementRequests)\n      .where(eq(reinstatementRequests.userId, userId))\n      .orderBy(desc(reinstatementRequests.createdAt));\n    return request || undefined;\n  }\n\n  async updateReinstatementRequest(id: string, updates: Partial<ReinstatementRequest>): Promise<ReinstatementRequest> {\n    const [request] = await db\n      .update(reinstatementRequests)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(reinstatementRequests.id, id))\n      .returning();\n    return request;\n  }\n\n  // User notification methods\n  async createUserNotification(notificationData: InsertUserNotification): Promise<UserNotification> {\n    const [notification] = await db\n      .insert(userNotifications)\n      .values({\n        ...notificationData,\n        createdAt: new Date(),\n      })\n      .returning();\n    return notification;\n  }\n\n  async getUserNotifications(userId: string, unreadOnly?: boolean): Promise<UserNotification[]> {\n    let query = db.select().from(userNotifications);\n    \n    if (unreadOnly) {\n      query = query.where(and(eq(userNotifications.userId, userId), eq(userNotifications.isRead, false))) as any;\n    } else {\n      query = query.where(eq(userNotifications.userId, userId)) as any;\n    }\n\n    return await query.orderBy(desc(userNotifications.createdAt));\n  }\n\n  async markNotificationAsRead(id: string): Promise<UserNotification> {\n    const [notification] = await db\n      .update(userNotifications)\n      .set({ isRead: true })\n      .where(eq(userNotifications.id, id))\n      .returning();\n    return notification;\n  }\n\n  async markAllNotificationsAsRead(userId: string): Promise<void> {\n    await db\n      .update(userNotifications)\n      .set({ isRead: true })\n      .where(eq(userNotifications.userId, userId));\n  }\n\n  // Enhanced campaign management methods\n  async getUserCampaigns(userId: string): Promise<Campaign[]> {\n    return await db\n      .select()\n      .from(campaigns)\n      .where(eq(campaigns.creatorId, userId))\n      .orderBy(desc(campaigns.createdAt));\n  }\n\n  async canUserCreateCampaign(userId: string): Promise<{ canCreate: boolean; reason?: string }> {\n    const user = await this.getUser(userId);\n    \n    if (!user) {\n      return { canCreate: false, reason: \"User not found\" };\n    }\n    \n    if (user.isFlagged) {\n      return { canCreate: false, reason: \"Account is flagged and cannot create campaigns\" };\n    }\n    \n    if (user.kycStatus !== \"approved\") {\n      return { canCreate: false, reason: \"KYC verification required\" };\n    }\n\n    const userCampaigns = await this.getUserCampaigns(userId);\n    const activeCampaigns = userCampaigns.filter(c => c.status === \"active\" || c.status === \"pending_approval\");\n    \n    // Check if user has more than 1 active campaign\n    if (activeCampaigns.length >= 1) {\n      // Check if any existing campaign is at least 80% funded or completed\n      const hasQualifyingCampaign = userCampaigns.some(campaign => {\n        const fundingPercentage = (parseFloat(campaign.currentAmount || \"0\") / parseFloat(campaign.goalAmount || \"1\")) * 100;\n        return fundingPercentage >= 80 || campaign.status === \"completed\";\n      });\n      \n      if (!hasQualifyingCampaign && activeCampaigns.length >= 1) {\n        return { canCreate: false, reason: \"You can only create a second campaign if one existing campaign is at least 80% funded or completed\" };\n      }\n    }\n\n    return { canCreate: true };\n  }\n\n  async updateCampaignWithEditTracking(id: string, updates: Partial<Campaign>, editorId: string): Promise<Campaign> {\n    const campaign = await this.getCampaign(id);\n    \n    if (!campaign) {\n      throw new Error(\"Campaign not found\");\n    }\n\n    // If campaign was previously approved and is being edited, mark as needing review\n    let updateData = { ...updates, updatedAt: new Date() };\n    \n    if (campaign.status === \"active\" && campaign.creatorId === editorId) {\n      updateData = {\n        ...updateData,\n        status: \"pending_approval\",\n        isEditedAfterApproval: true,\n        editCount: (campaign.editCount || 0) + 1,\n        lastEditedAt: new Date(),\n      };\n    }\n\n    const [updatedCampaign] = await db\n      .update(campaigns)\n      .set(updateData)\n      .where(eq(campaigns.id, id))\n      .returning();\n    \n    return updatedCampaign;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":23114},"server/storage_fixed.ts":{"content":"import {\n  users,\n  campaigns,\n  contributions,\n  transactions,\n  aiInteractions,\n  type User,\n  type UpsertUser,\n  type Campaign,\n  type InsertCampaign,\n  type Contribution,\n  type InsertContribution,\n  type Transaction,\n  type InsertTransaction,\n  type AiInteraction,\n  type InsertAiInteraction,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, count, sum, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Campaign operations\n  getCampaigns(filters?: {\n    category?: string;\n    status?: string;\n    creatorId?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Campaign[]>;\n  getCampaign(id: string): Promise<Campaign | undefined>;\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n  updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign>;\n  deleteCampaign(id: string): Promise<void>;\n  \n  // Contribution operations\n  getContributions(campaignId?: string, backerId?: string): Promise<Contribution[]>;\n  createContribution(contribution: InsertContribution): Promise<Contribution>;\n  \n  // Transaction operations\n  getTransactions(filters?: {\n    campaignId?: string;\n    transactionType?: string;\n    limit?: number;\n  }): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  \n  // AI interaction operations\n  createAiInteraction(interaction: InsertAiInteraction): Promise<AiInteraction>;\n  getAiInteractions(userId: string, campaignId?: string): Promise<AiInteraction[]>;\n  \n  // Statistics\n  getCampaignStats(): Promise<{\n    totalRaised: string;\n    activeCampaigns: number;\n    totalBackers: number;\n    successRate: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    try {\n      const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n      return result[0] || undefined;\n    } catch (error) {\n      console.error('Error getting user:', error);\n      return undefined;\n    }\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    try {\n      const result = await db\n        .insert(users)\n        .values({\n          ...userData,\n          updatedAt: new Date(),\n        })\n        .onConflictDoUpdate({\n          target: users.id,\n          set: {\n            ...userData,\n            updatedAt: new Date(),\n          },\n        })\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error('Error upserting user:', error);\n      throw error;\n    }\n  }\n\n  // Campaign operations\n  async getCampaigns(filters?: {\n    category?: string;\n    status?: string;\n    creatorId?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Campaign[]> {\n    try {\n      let query = db.select().from(campaigns);\n      \n      // Build where conditions\n      const conditions = [];\n      if (filters?.category) {\n        conditions.push(eq(campaigns.category, filters.category));\n      }\n      if (filters?.status) {\n        conditions.push(eq(campaigns.status, filters.status));\n      }\n      if (filters?.creatorId) {\n        conditions.push(eq(campaigns.creatorId, filters.creatorId));\n      }\n\n      // Apply where conditions\n      if (conditions.length === 1) {\n        query = query.where(conditions[0]);\n      } else if (conditions.length > 1) {\n        query = query.where(and(...conditions));\n      }\n\n      // Apply ordering\n      query = query.orderBy(desc(campaigns.createdAt));\n\n      // Apply pagination\n      if (filters?.limit) {\n        query = query.limit(filters.limit);\n      }\n      if (filters?.offset) {\n        query = query.offset(filters.offset);\n      }\n\n      return await query;\n    } catch (error) {\n      console.error('Error getting campaigns:', error);\n      return [];\n    }\n  }\n\n  async getCampaign(id: string): Promise<Campaign | undefined> {\n    try {\n      const result = await db.select().from(campaigns).where(eq(campaigns.id, id)).limit(1);\n      return result[0] || undefined;\n    } catch (error) {\n      console.error('Error getting campaign:', error);\n      return undefined;\n    }\n  }\n\n  async createCampaign(campaignData: InsertCampaign): Promise<Campaign> {\n    try {\n      const result = await db\n        .insert(campaigns)\n        .values({\n          ...campaignData,\n          currentAmount: \"0\",\n          backerCount: 0,\n          credibilityScore: \"0.0\",\n        })\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error('Error creating campaign:', error);\n      throw error;\n    }\n  }\n\n  async updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign> {\n    try {\n      const result = await db\n        .update(campaigns)\n        .set({ ...updates, updatedAt: new Date() })\n        .where(eq(campaigns.id, id))\n        .returning();\n      \n      if (!result[0]) {\n        throw new Error(\"Campaign not found\");\n      }\n      \n      return result[0];\n    } catch (error) {\n      console.error('Error updating campaign:', error);\n      throw error;\n    }\n  }\n\n  async deleteCampaign(id: string): Promise<void> {\n    try {\n      await db.delete(campaigns).where(eq(campaigns.id, id));\n    } catch (error) {\n      console.error('Error deleting campaign:', error);\n      throw error;\n    }\n  }\n\n  // Contribution operations\n  async getContributions(campaignId?: string, backerId?: string): Promise<Contribution[]> {\n    try {\n      let query = db.select().from(contributions);\n      \n      const conditions = [];\n      if (campaignId) {\n        conditions.push(eq(contributions.campaignId, campaignId));\n      }\n      if (backerId) {\n        conditions.push(eq(contributions.backerId, backerId));\n      }\n\n      if (conditions.length === 1) {\n        query = query.where(conditions[0]);\n      } else if (conditions.length > 1) {\n        query = query.where(and(...conditions));\n      }\n\n      return await query.orderBy(desc(contributions.createdAt));\n    } catch (error) {\n      console.error('Error getting contributions:', error);\n      return [];\n    }\n  }\n\n  async createContribution(contributionData: InsertContribution): Promise<Contribution> {\n    try {\n      const result = await db\n        .insert(contributions)\n        .values(contributionData)\n        .returning();\n\n      // Update campaign current amount and backer count\n      await db\n        .update(campaigns)\n        .set({\n          currentAmount: sql`${campaigns.currentAmount} + ${contributionData.amount}`,\n          backerCount: sql`${campaigns.backerCount} + 1`,\n          updatedAt: new Date(),\n        })\n        .where(eq(campaigns.id, contributionData.campaignId));\n      \n      return result[0];\n    } catch (error) {\n      console.error('Error creating contribution:', error);\n      throw error;\n    }\n  }\n\n  // Transaction operations\n  async getTransactions(filters?: {\n    campaignId?: string;\n    transactionType?: string;\n    limit?: number;\n  }): Promise<Transaction[]> {\n    try {\n      let query = db.select().from(transactions);\n      \n      const conditions = [];\n      if (filters?.campaignId) {\n        conditions.push(eq(transactions.campaignId, filters.campaignId));\n      }\n      if (filters?.transactionType) {\n        conditions.push(eq(transactions.transactionType, filters.transactionType));\n      }\n\n      if (conditions.length === 1) {\n        query = query.where(conditions[0]);\n      } else if (conditions.length > 1) {\n        query = query.where(and(...conditions));\n      }\n\n      query = query.orderBy(desc(transactions.createdAt));\n\n      if (filters?.limit) {\n        query = query.limit(filters.limit);\n      }\n\n      return await query;\n    } catch (error) {\n      console.error('Error getting transactions:', error);\n      return [];\n    }\n  }\n\n  async createTransaction(transactionData: InsertTransaction): Promise<Transaction> {\n    try {\n      const result = await db\n        .insert(transactions)\n        .values(transactionData)\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error('Error creating transaction:', error);\n      throw error;\n    }\n  }\n\n  // AI interaction operations\n  async createAiInteraction(interactionData: InsertAiInteraction): Promise<AiInteraction> {\n    try {\n      const result = await db\n        .insert(aiInteractions)\n        .values(interactionData)\n        .returning();\n      return result[0];\n    } catch (error) {\n      console.error('Error creating AI interaction:', error);\n      throw error;\n    }\n  }\n\n  async getAiInteractions(userId: string, campaignId?: string): Promise<AiInteraction[]> {\n    try {\n      let query = db.select().from(aiInteractions);\n\n      if (campaignId) {\n        query = query.where(\n          and(\n            eq(aiInteractions.userId, userId),\n            eq(aiInteractions.campaignId, campaignId)\n          )\n        );\n      } else {\n        query = query.where(eq(aiInteractions.userId, userId));\n      }\n\n      return await query.orderBy(desc(aiInteractions.createdAt));\n    } catch (error) {\n      console.error('Error getting AI interactions:', error);\n      return [];\n    }\n  }\n\n  // Statistics\n  async getCampaignStats(): Promise<{\n    totalRaised: string;\n    activeCampaigns: number;\n    totalBackers: number;\n    successRate: number;\n  }> {\n    try {\n      // Get total raised amount\n      const totalRaisedResult = await db\n        .select({ total: sum(contributions.amount) })\n        .from(contributions)\n        .where(eq(contributions.status, 'confirmed'));\n\n      // Get active campaigns count\n      const activeCampaignsResult = await db\n        .select({ count: count() })\n        .from(campaigns)\n        .where(eq(campaigns.status, 'active'));\n\n      // Get total backers (unique contributors)\n      const totalBackersResult = await db\n        .selectDistinct({ backerId: contributions.backerId })\n        .from(contributions)\n        .where(eq(contributions.status, 'confirmed'));\n\n      // Get total campaigns for success rate calculation\n      const totalCampaignsResult = await db\n        .select({ count: count() })\n        .from(campaigns);\n\n      const successfulCampaignsResult = await db\n        .select({ count: count() })\n        .from(campaigns)\n        .where(eq(campaigns.status, 'completed'));\n\n      const totalRaised = totalRaisedResult[0]?.total || \"0\";\n      const activeCampaigns = activeCampaignsResult[0]?.count || 0;\n      const totalBackers = totalBackersResult.length || 0;\n      const totalCampaigns = totalCampaignsResult[0]?.count || 0;\n      const successfulCampaigns = successfulCampaignsResult[0]?.count || 0;\n      const successRate = totalCampaigns > 0 ? (successfulCampaigns / totalCampaigns) * 100 : 0;\n\n      return {\n        totalRaised: totalRaised.toString(),\n        activeCampaigns,\n        totalBackers,\n        successRate,\n      };\n    } catch (error) {\n      console.error('Error getting campaign stats:', error);\n      return {\n        totalRaised: \"0.0\",\n        activeCampaigns: 0,\n        totalBackers: 0,\n        successRate: 0,\n      };\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":11289},"server/storage_old.ts":{"content":"import {\n  users,\n  campaigns,\n  contributions,\n  transactions,\n  aiInteractions,\n  type User,\n  type UpsertUser,\n  type Campaign,\n  type InsertCampaign,\n  type Contribution,\n  type InsertContribution,\n  type Transaction,\n  type InsertTransaction,\n  type AiInteraction,\n  type InsertAiInteraction,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, count, sum, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Campaign operations\n  getCampaigns(filters?: {\n    category?: string;\n    status?: string;\n    creatorId?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Campaign[]>;\n  getCampaign(id: string): Promise<Campaign | undefined>;\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n  updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign>;\n  deleteCampaign(id: string): Promise<void>;\n  \n  // Contribution operations\n  getContributions(campaignId?: string, backerId?: string): Promise<Contribution[]>;\n  createContribution(contribution: InsertContribution): Promise<Contribution>;\n  \n  // Transaction operations\n  getTransactions(filters?: {\n    campaignId?: string;\n    transactionType?: string;\n    limit?: number;\n  }): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  \n  // AI interaction operations\n  createAiInteraction(interaction: InsertAiInteraction): Promise<AiInteraction>;\n  getAiInteractions(userId: string, campaignId?: string): Promise<AiInteraction[]>;\n  \n  // Statistics\n  getCampaignStats(): Promise<{\n    totalRaised: string;\n    activeCampaigns: number;\n    totalBackers: number;\n    successRate: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        id: userData.id || sql`gen_random_uuid()`,\n        updatedAt: new Date(),\n      })\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Campaign operations\n  async getCampaigns(filters?: {\n    category?: string;\n    status?: string;\n    creatorId?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Campaign[]> {\n    let query = db.select().from(campaigns);\n    \n    const conditions = [];\n    if (filters?.category) {\n      conditions.push(eq(campaigns.category, filters.category));\n    }\n    if (filters?.status) {\n      conditions.push(eq(campaigns.status, filters.status));\n    }\n    if (filters?.creatorId) {\n      conditions.push(eq(campaigns.creatorId, filters.creatorId));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    query = query.orderBy(desc(campaigns.createdAt));\n\n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n    }\n    if (filters?.offset) {\n      query = query.offset(filters.offset);\n    }\n\n    return await query.execute();\n  }\n\n  async getCampaign(id: string): Promise<Campaign | undefined> {\n    const [campaign] = await db.select().from(campaigns).where(eq(campaigns.id, id));\n    return campaign || undefined;\n  }\n\n  async createCampaign(campaignData: InsertCampaign): Promise<Campaign> {\n    const [campaign] = await db\n      .insert(campaigns)\n      .values({\n        ...campaignData,\n        currentAmount: \"0\",\n        backerCount: 0,\n        credibilityScore: \"0.0\",\n      })\n      .returning();\n    return campaign;\n  }\n\n  async updateCampaign(id: string, updates: Partial<Campaign>): Promise<Campaign> {\n    const [campaign] = await db\n      .update(campaigns)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(campaigns.id, id))\n      .returning();\n    \n    if (!campaign) {\n      throw new Error(\"Campaign not found\");\n    }\n    \n    return campaign;\n  }\n\n  async deleteCampaign(id: string): Promise<void> {\n    await db.delete(campaigns).where(eq(campaigns.id, id));\n  }\n\n  // Contribution operations\n  async getContributions(campaignId?: string, backerId?: string): Promise<Contribution[]> {\n    let query = db.select().from(contributions);\n    \n    const conditions = [];\n    if (campaignId) {\n      conditions.push(eq(contributions.campaignId, campaignId));\n    }\n    if (backerId) {\n      conditions.push(eq(contributions.backerId, backerId));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    return await query.orderBy(desc(contributions.createdAt)).execute();\n  }\n\n  async createContribution(contributionData: InsertContribution): Promise<Contribution> {\n    const [contribution] = await db\n      .insert(contributions)\n      .values(contributionData)\n      .returning();\n\n    // Update campaign current amount and backer count\n    await db\n      .update(campaigns)\n      .set({\n        currentAmount: sql`${campaigns.currentAmount} + ${contributionData.amount}`,\n        backerCount: sql`${campaigns.backerCount} + 1`,\n        updatedAt: new Date(),\n      })\n      .where(eq(campaigns.id, contributionData.campaignId));\n    \n    return contribution;\n  }\n\n  // Transaction operations\n  async getTransactions(filters?: {\n    campaignId?: string;\n    transactionType?: string;\n    limit?: number;\n  }): Promise<Transaction[]> {\n    let query = db.select().from(transactions);\n    \n    const conditions = [];\n    if (filters?.campaignId) {\n      conditions.push(eq(transactions.campaignId, filters.campaignId));\n    }\n    if (filters?.transactionType) {\n      conditions.push(eq(transactions.transactionType, filters.transactionType));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    query = query.orderBy(desc(transactions.createdAt));\n\n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n    }\n\n    return await query.execute();\n  }\n\n  async createTransaction(transactionData: InsertTransaction): Promise<Transaction> {\n    const [transaction] = await db\n      .insert(transactions)\n      .values(transactionData)\n      .returning();\n    return transaction;\n  }\n\n  // AI interaction operations\n  async createAiInteraction(interactionData: InsertAiInteraction): Promise<AiInteraction> {\n    const [interaction] = await db\n      .insert(aiInteractions)\n      .values(interactionData)\n      .returning();\n    return interaction;\n  }\n\n  async getAiInteractions(userId: string, campaignId?: string): Promise<AiInteraction[]> {\n    let query = db.select().from(aiInteractions);\n    \n    if (campaignId) {\n      query = query.where(and(eq(aiInteractions.userId, userId), eq(aiInteractions.campaignId, campaignId)));\n    } else {\n      query = query.where(eq(aiInteractions.userId, userId));\n    }\n\n    return await query.orderBy(desc(aiInteractions.createdAt)).execute();\n  }\n\n  // Statistics\n  async getCampaignStats(): Promise<{\n    totalRaised: string;\n    activeCampaigns: number;\n    totalBackers: number;\n    successRate: number;\n  }> {\n    const [statsResult] = await db\n      .select({\n        totalRaised: sql<string>`COALESCE(SUM(CAST(${campaigns.currentAmount} AS DECIMAL)), 0)`,\n        totalCampaigns: count(campaigns.id),\n        activeCampaigns: sql<number>`COUNT(CASE WHEN ${campaigns.status} = 'active' THEN 1 END)`,\n        completedCampaigns: sql<number>`COUNT(CASE WHEN ${campaigns.status} = 'completed' THEN 1 END)`,\n      })\n      .from(campaigns);\n\n    const [backersResult] = await db\n      .select({\n        totalBackers: sql<number>`COUNT(DISTINCT ${contributions.backerId})`,\n      })\n      .from(contributions)\n      .where(sql`${contributions.backerId} IS NOT NULL`);\n\n    const totalBackers = backersResult?.totalBackers || 0;\n    const successRate = statsResult.totalCampaigns > 0 \n      ? (statsResult.completedCampaigns / statsResult.totalCampaigns) * 100 \n      : 0;\n\n    return {\n      totalRaised: parseFloat(statsResult.totalRaised).toFixed(1),\n      activeCampaigns: statsResult.activeCampaigns,\n      totalBackers,\n      successRate: parseFloat(successRate.toFixed(1)),\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8530},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (manual authentication)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\").notNull(), // hashed password\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  walletAddress: varchar(\"wallet_address\"),\n  kycStatus: varchar(\"kyc_status\").default(\"pending\"), // pending, approved, rejected\n  kycDocuments: jsonb(\"kyc_documents\"),\n  role: varchar(\"role\").default(\"user\"), // user, admin\n  isFlagged: boolean(\"is_flagged\").default(false),\n  flaggedReason: text(\"flagged_reason\"),\n  flaggedBy: varchar(\"flagged_by\"),\n  flaggedAt: timestamp(\"flagged_at\"),\n  profileCompletion: integer(\"profile_completion\").default(0),\n  joinDate: timestamp(\"join_date\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Campaigns table\nexport const campaigns = pgTable(\"campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  creatorId: varchar(\"creator_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\").notNull(),\n  fundingType: varchar(\"funding_type\").notNull(), // donation, reward, equity\n  goalAmount: decimal(\"goal_amount\", { precision: 18, scale: 8 }).notNull(),\n  currentAmount: decimal(\"current_amount\", { precision: 18, scale: 8 }).default(\"0\"),\n  currency: varchar(\"currency\").default(\"ETH\"),\n  deadline: timestamp(\"deadline\").notNull(),\n  imageUrl: varchar(\"image_url\"),\n  status: varchar(\"status\").default(\"pending_approval\"), // pending_approval, active, completed, cancelled, rejected\n  smartContractAddress: varchar(\"smart_contract_address\"),\n  tags: text(\"tags\").array(),\n  rewards: jsonb(\"rewards\"),\n  updates: jsonb(\"updates\"),\n  credibilityScore: decimal(\"credibility_score\", { precision: 3, scale: 1 }).default(\"0.0\"),\n  backerCount: integer(\"backer_count\").default(0),\n  adminComments: text(\"admin_comments\"),\n  reviewedBy: varchar(\"reviewed_by\"),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  isEditedAfterApproval: boolean(\"is_edited_after_approval\").default(false),\n  originalApprovalDate: timestamp(\"original_approval_date\"),\n  editCount: integer(\"edit_count\").default(0),\n  lastEditedAt: timestamp(\"last_edited_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Contributions table\nexport const contributions = pgTable(\"contributions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  campaignId: varchar(\"campaign_id\").references(() => campaigns.id).notNull(),\n  backerId: varchar(\"backer_id\").references(() => users.id),\n  amount: decimal(\"amount\", { precision: 18, scale: 8 }).notNull(),\n  currency: varchar(\"currency\").default(\"ETH\"),\n  transactionHash: varchar(\"transaction_hash\"),\n  paymentMethod: varchar(\"payment_method\").notNull(), // crypto, fiat\n  isAnonymous: boolean(\"is_anonymous\").default(false),\n  message: text(\"message\"),\n  rewardTier: varchar(\"reward_tier\"),\n  status: varchar(\"status\").default(\"confirmed\"), // pending, confirmed, failed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Blockchain transactions table\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  hash: varchar(\"hash\").unique().notNull(),\n  campaignId: varchar(\"campaign_id\").references(() => campaigns.id),\n  fromAddress: varchar(\"from_address\"),\n  toAddress: varchar(\"to_address\"),\n  amount: decimal(\"amount\", { precision: 18, scale: 8 }).notNull(),\n  gasUsed: varchar(\"gas_used\"),\n  gasPrice: varchar(\"gas_price\"),\n  blockNumber: varchar(\"block_number\"),\n  transactionType: varchar(\"transaction_type\").notNull(), // contribution, withdrawal, contract_creation\n  status: varchar(\"status\").default(\"confirmed\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// KYC Applications table\nexport const kycApplications = pgTable(\"kyc_applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  email: varchar(\"email\").notNull(),\n  phone: varchar(\"phone\").notNull(),\n  dateOfBirth: varchar(\"date_of_birth\").notNull(),\n  address: text(\"address\").notNull(),\n  city: varchar(\"city\").notNull(),\n  state: varchar(\"state\").notNull(),\n  zipCode: varchar(\"zip_code\").notNull(),\n  country: varchar(\"country\").notNull(),\n  idType: varchar(\"id_type\").notNull(), // passport, driver_license, national_id\n  idNumber: varchar(\"id_number\").notNull(),\n  occupation: varchar(\"occupation\").notNull(),\n  sourceOfFunds: varchar(\"source_of_funds\").notNull(),\n  monthlyIncome: varchar(\"monthly_income\").notNull(),\n  idFrontImageUrl: varchar(\"id_front_image_url\"),\n  idBackImageUrl: varchar(\"id_back_image_url\"),\n  selfieImageUrl: varchar(\"selfie_image_url\"),\n  status: varchar(\"status\").default(\"pending\"), // pending, approved, rejected, under_review\n  adminComments: text(\"admin_comments\"),\n  reviewedBy: varchar(\"reviewed_by\"),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Admin users table\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  role: varchar(\"role\").default(\"admin\"), // admin, super_admin\n  permissions: text(\"permissions\").array(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// AI Assistant interactions\nexport const aiInteractions = pgTable(\"ai_interactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  campaignId: varchar(\"campaign_id\").references(() => campaigns.id),\n  interactionType: varchar(\"interaction_type\").notNull(), // title_optimization, description_enhancement, credibility_analysis\n  inputData: jsonb(\"input_data\").notNull(),\n  outputData: jsonb(\"output_data\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({\n  id: true,\n  currentAmount: true,\n  backerCount: true,\n  credibilityScore: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  deadline: z.union([z.date(), z.string()]).transform((val) => {\n    return typeof val === 'string' ? new Date(val) : val;\n  }),\n});\n\nexport const insertKycApplicationSchema = createInsertSchema(kycApplications).omit({\n  id: true,\n  status: true,\n  adminComments: true,\n  reviewedBy: true,\n  reviewedAt: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertContributionSchema = createInsertSchema(contributions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAiInteractionSchema = createInsertSchema(aiInteractions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Reinstatement Requests table\nexport const reinstatementRequests = pgTable(\"reinstatement_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  reason: text(\"reason\").notNull(),\n  additionalInfo: text(\"additional_info\"),\n  status: varchar(\"status\").default(\"pending\"), // pending, approved, rejected\n  adminComments: text(\"admin_comments\"),\n  reviewedBy: varchar(\"reviewed_by\"),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User Notifications table\nexport const userNotifications = pgTable(\"user_notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: varchar(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: varchar(\"type\").notNull(), // info, success, warning, error\n  isRead: boolean(\"is_read\").default(false),\n  relatedCampaignId: varchar(\"related_campaign_id\"),\n  relatedKycId: varchar(\"related_kyc_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertReinstatementRequestSchema = createInsertSchema(reinstatementRequests).omit({\n  id: true,\n  status: true,\n  adminComments: true,\n  reviewedBy: true,\n  reviewedAt: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserNotificationSchema = createInsertSchema(userNotifications).omit({\n  id: true,\n  isRead: true,\n  createdAt: true,\n});\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Campaign = typeof campaigns.$inferSelect;\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\nexport type KycApplication = typeof kycApplications.$inferSelect;\nexport type InsertKycApplication = z.infer<typeof insertKycApplicationSchema>;\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\nexport type Contribution = typeof contributions.$inferSelect;\nexport type InsertContribution = z.infer<typeof insertContributionSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type AiInteraction = typeof aiInteractions.$inferSelect;\nexport type InsertAiInteraction = z.infer<typeof insertAiInteractionSchema>;\nexport type ReinstatementRequest = typeof reinstatementRequests.$inferSelect;\nexport type InsertReinstatementRequest = z.infer<typeof insertReinstatementRequestSchema>;\nexport type UserNotification = typeof userNotifications.$inferSelect;\nexport type InsertUserNotification = z.infer<typeof insertUserNotificationSchema>;\n","size_bytes":11099},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Campaigns from \"@/pages/campaigns\";\nimport CampaignDetail from \"@/pages/campaign-detail\";\nimport CreateCampaign from \"@/pages/create-campaign\";\nimport KYCVerification from \"@/pages/KYCVerification\";\nimport FeatureShowcase from \"@/pages/FeatureShowcase\";\nimport AccessGuide from \"@/pages/AccessGuide\";\nimport Dashboard from \"@/pages/dashboard\";\nimport KYC from \"@/pages/kyc\";\nimport Explorer from \"@/pages/explorer\";\nimport AdminPage from \"@/pages/admin\";\nimport AuthPage from \"@/pages/auth-page\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/home\" component={Home} />\n      <Route path=\"/campaigns\" component={Campaigns} />\n      <Route path=\"/campaigns/:id\" component={CampaignDetail} />\n      <Route path=\"/create\" component={CreateCampaign} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route path=\"/kyc\" component={KYC} />\n      <Route path=\"/kyc-verification\" component={KYCVerification} />\n      <Route path=\"/features\" component={FeatureShowcase} />\n      <Route path=\"/access-guide\" component={AccessGuide} />\n      <Route path=\"/explorer\" component={Explorer} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/landing\" component={Landing} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background text-foreground\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2097},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=JetBrains+Mono:wght@400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(196, 100%, 50%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(196, 100%, 50%);\n  --chart-1: hsl(196, 100%, 50%);\n  --chart-2: hsl(159, 78%, 37%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  \n  /* Cyberpunk colors */\n  --cyber-blue: hsl(196, 100%, 50%);\n  --cyber-purple: hsl(262, 73%, 65%);\n  --cyber-green: hsl(160, 78%, 37%);\n  --cyber-pink: hsl(330, 81%, 60%);\n  --cyber-yellow: hsl(42, 93%, 56%);\n  \n  /* Glass morphism */\n  --glass-white: hsla(0, 0%, 100%, 0.1);\n  --glass-dark: hsla(222, 47%, 11%, 0.8);\n  \n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(196, 100%, 50%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(196, 100%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer components {\n  .glass-morphism {\n    background: var(--glass-white);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  .cyber-gradient {\n    background: linear-gradient(135deg, hsl(222.2, 84%, 4.9%) 0%, hsl(217.2, 32.6%, 17.5%) 50%, hsl(215, 20.2%, 20%) 100%);\n  }\n  \n  .glow-text {\n    text-shadow: 0 0 10px var(--cyber-blue);\n  }\n  \n  .progress-glow {\n    box-shadow: 0 0 20px hsla(160, 78%, 37%, 0.6);\n  }\n  \n  .neon-border {\n    border: 1px solid transparent;\n    background: linear-gradient(45deg, var(--cyber-blue), var(--cyber-purple)) border-box;\n    border-radius: var(--radius);\n  }\n}\n\n@layer utilities {\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n  \n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n}\n\n@keyframes glow {\n  from {\n    box-shadow: 0 0 20px -10px var(--cyber-blue);\n  }\n  to {\n    box-shadow: 0 0 20px -5px var(--cyber-blue);\n  }\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-20px);\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--muted);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--cyber-blue);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: var(--cyber-purple);\n}\n\n/* Loading spinner for buttons */\n.btn-loading {\n  position: relative;\n  color: transparent;\n}\n\n.btn-loading::after {\n  content: \"\";\n  position: absolute;\n  width: 16px;\n  height: 16px;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: auto;\n  border: 2px solid transparent;\n  border-top-color: var(--primary-foreground);\n  border-radius: 50%;\n  animation: spin 1s ease infinite;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n/* Form focus states */\n.form-focus {\n  transition: all 0.3s ease;\n}\n\n.form-focus:focus {\n  border-color: var(--cyber-blue);\n  box-shadow: 0 0 0 2px hsla(196, 100%, 50%, 0.2);\n  transform: scale(1.02);\n}\n\n/* Card hover effects */\n.card-hover {\n  transition: all 0.5s ease;\n}\n\n.card-hover:hover {\n  transform: scale(1.05);\n  box-shadow: 0 25px 50px -12px hsla(196, 100%, 50%, 0.25);\n}\n\n/* Gradient text */\n.gradient-text {\n  background: linear-gradient(45deg, var(--cyber-blue), var(--cyber-purple));\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Dot pattern background */\n.dot-pattern {\n  background-image: radial-gradient(circle, var(--cyber-blue) 1px, transparent 1px);\n  background-size: 60px 60px;\n  opacity: 0.1;\n}\n","size_bytes":5227},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useQueryClient, useMutation } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n  \n  const { data: user, isLoading, error } = useQuery<User | null>({\n    queryKey: [\"/api/user\"],\n    retry: false,\n    refetchOnWindowFocus: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      window.location.href = \"/auth\";\n    },\n  });\n\n  const logout = () => {\n    logoutMutation.mutate();\n  };\n\n  const login = () => {\n    window.location.href = \"/auth\";\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    logout,\n    login,\n  };\n}\n","size_bytes":912},"client/src/hooks/useWeb3.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\n// Mock Web3 provider for development\nexport interface Web3Provider {\n  isConnected: boolean;\n  account?: string;\n  chainId?: number;\n  balance?: string;\n}\n\nexport interface TransactionResult {\n  hash: string;\n  status: 'pending' | 'confirmed' | 'failed';\n  blockNumber?: string;\n  gasUsed?: string;\n  gasPrice?: string;\n}\n\nexport function useWeb3() {\n  const [provider, setProvider] = useState<Web3Provider>({\n    isConnected: false,\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  // Simulate MetaMask connection\n  const connectWallet = async (): Promise<boolean> => {\n    setIsLoading(true);\n    \n    try {\n      // Simulate connection delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // Mock successful connection\n      const mockAccount = `0x${Math.random().toString(16).substr(2, 40)}`;\n      const mockBalance = (Math.random() * 10 + 1).toFixed(3);\n      \n      setProvider({\n        isConnected: true,\n        account: mockAccount,\n        chainId: 80001, // Polygon Mumbai Testnet\n        balance: mockBalance,\n      });\n\n      toast({\n        title: \"Wallet Connected\",\n        description: `Connected to ${mockAccount.slice(0, 6)}...${mockAccount.slice(-4)}`,\n      });\n\n      return true;\n    } catch (error) {\n      toast({\n        title: \"Connection Failed\",\n        description: \"Failed to connect wallet. Please try again.\",\n        variant: \"destructive\",\n      });\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const disconnectWallet = async () => {\n    setProvider({ isConnected: false });\n    toast({\n      title: \"Wallet Disconnected\",\n      description: \"Successfully disconnected from wallet\",\n    });\n  };\n\n  const sendTransaction = async (\n    to: string,\n    amount: string,\n    campaignId?: string\n  ): Promise<TransactionResult | null> => {\n    if (!provider.isConnected) {\n      toast({\n        title: \"Wallet Not Connected\",\n        description: \"Please connect your wallet first\",\n        variant: \"destructive\",\n      });\n      return null;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      // Simulate transaction processing\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Generate mock transaction hash\n      const mockTxHash = `0x${Math.random().toString(16).substr(2, 64)}`;\n      const mockBlockNumber = Math.floor(Math.random() * 1000000 + 12000000).toString();\n      \n      const result: TransactionResult = {\n        hash: mockTxHash,\n        status: 'confirmed',\n        blockNumber: mockBlockNumber,\n        gasUsed: '21000',\n        gasPrice: '0.02',\n      };\n\n      toast({\n        title: \"Transaction Successful\",\n        description: `Sent ${amount} ETH to campaign`,\n      });\n\n      return result;\n    } catch (error) {\n      toast({\n        title: \"Transaction Failed\",\n        description: \"Transaction was rejected or failed\",\n        variant: \"destructive\",\n      });\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const switchNetwork = async (chainId: number): Promise<boolean> => {\n    try {\n      // Simulate network switch\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      setProvider(prev => ({ ...prev, chainId }));\n      \n      const networkName = chainId === 80001 ? 'Polygon Mumbai' : 'Ethereum Mainnet';\n      toast({\n        title: \"Network Switched\",\n        description: `Switched to ${networkName}`,\n      });\n      \n      return true;\n    } catch (error) {\n      toast({\n        title: \"Network Switch Failed\",\n        description: \"Failed to switch network\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n  };\n\n  const getNetworkName = (chainId?: number): string => {\n    switch (chainId) {\n      case 1: return 'Ethereum Mainnet';\n      case 137: return 'Polygon Mainnet';\n      case 80001: return 'Polygon Mumbai Testnet';\n      default: return 'Unknown Network';\n    }\n  };\n\n  const formatBalance = (balance?: string): string => {\n    if (!balance) return '0.00';\n    const num = parseFloat(balance);\n    return num.toFixed(4);\n  };\n\n  return {\n    provider,\n    isLoading,\n    connectWallet,\n    disconnectWallet,\n    sendTransaction,\n    switchNetwork,\n    getNetworkName,\n    formatBalance,\n    isConnected: provider.isConnected,\n    account: provider.account,\n    balance: provider.balance,\n    chainId: provider.chainId,\n  };\n}","size_bytes":4515},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/blockchain.ts":{"content":"// Mock blockchain utilities for Web3 crowdfunding platform\n// This simulates Polygon Mumbai testnet interactions\n\nexport interface BlockchainTransaction {\n  hash: string;\n  from: string;\n  to: string;\n  value: string;\n  gasUsed: string;\n  gasPrice: string;\n  blockNumber: number;\n  timestamp: number;\n  status: \"pending\" | \"confirmed\" | \"failed\";\n}\n\nexport interface SmartContract {\n  address: string;\n  abi: any[];\n  network: string;\n}\n\nexport interface CampaignContract {\n  address: string;\n  creator: string;\n  goalAmount: string;\n  currentAmount: string;\n  deadline: number;\n  isActive: boolean;\n  backers: string[];\n}\n\n// Mock contract addresses for different campaign types\nexport const CAMPAIGN_CONTRACTS = {\n  donation: \"0x1234567890abcdef1234567890abcdef12345678\",\n  reward: \"0xabcdef1234567890abcdef1234567890abcdef12\",\n  equity: \"0xfedcba0987654321fedcba0987654321fedcba09\",\n};\n\n// Network configuration\nexport const NETWORK_CONFIG = {\n  chainId: 80001, // Polygon Mumbai Testnet\n  name: \"Polygon Mumbai\",\n  rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n  blockExplorer: \"https://mumbai.polygonscan.com\",\n  nativeCurrency: {\n    name: \"MATIC\",\n    symbol: \"MATIC\",\n    decimals: 18,\n  },\n};\n\n/**\n * Generate a mock transaction hash\n */\nexport function generateTransactionHash(): string {\n  const chars = \"0123456789abcdef\";\n  let hash = \"0x\";\n  for (let i = 0; i < 64; i++) {\n    hash += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return hash;\n}\n\n/**\n * Generate a mock wallet address\n */\nexport function generateWalletAddress(): string {\n  const chars = \"0123456789abcdef\";\n  let address = \"0x\";\n  for (let i = 0; i < 40; i++) {\n    address += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return address;\n}\n\n/**\n * Mock function to deploy a campaign smart contract\n */\nexport async function deployCampaignContract(params: {\n  creator: string;\n  goalAmount: string;\n  deadline: number;\n  fundingType: \"donation\" | \"reward\" | \"equity\";\n}): Promise<SmartContract> {\n  // Simulate deployment delay\n  await new Promise(resolve => setTimeout(resolve, 2000));\n\n  const contractAddress = generateWalletAddress();\n  \n  return {\n    address: contractAddress,\n    abi: [], // Mock ABI\n    network: NETWORK_CONFIG.name,\n  };\n}\n\n/**\n * Mock function to contribute to a campaign\n */\nexport async function contributeToAmpaign(params: {\n  contractAddress: string;\n  amount: string;\n  from: string;\n}): Promise<BlockchainTransaction> {\n  // Simulate transaction processing\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  const transaction: BlockchainTransaction = {\n    hash: generateTransactionHash(),\n    from: params.from,\n    to: params.contractAddress,\n    value: params.amount,\n    gasUsed: \"21000\",\n    gasPrice: \"0.02\",\n    blockNumber: Math.floor(Math.random() * 1000000) + 12345000,\n    timestamp: Date.now(),\n    status: \"confirmed\",\n  };\n\n  return transaction;\n}\n\n/**\n * Mock function to withdraw funds from campaign\n */\nexport async function withdrawFunds(params: {\n  contractAddress: string;\n  amount: string;\n  to: string;\n}): Promise<BlockchainTransaction> {\n  // Simulate withdrawal processing\n  await new Promise(resolve => setTimeout(resolve, 2000));\n\n  const transaction: BlockchainTransaction = {\n    hash: generateTransactionHash(),\n    from: params.contractAddress,\n    to: params.to,\n    value: params.amount,\n    gasUsed: \"35000\",\n    gasPrice: \"0.02\",\n    blockNumber: Math.floor(Math.random() * 1000000) + 12345000,\n    timestamp: Date.now(),\n    status: \"confirmed\",\n  };\n\n  return transaction;\n}\n\n/**\n * Mock function to get campaign contract details\n */\nexport async function getCampaignDetails(contractAddress: string): Promise<CampaignContract> {\n  // Simulate blockchain call\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  return {\n    address: contractAddress,\n    creator: generateWalletAddress(),\n    goalAmount: \"100.0\",\n    currentAmount: (Math.random() * 100).toFixed(2),\n    deadline: Date.now() + 30 * 24 * 60 * 60 * 1000, // 30 days from now\n    isActive: true,\n    backers: [\n      generateWalletAddress(),\n      generateWalletAddress(),\n      generateWalletAddress(),\n    ],\n  };\n}\n\n/**\n * Mock function to get transaction details\n */\nexport async function getTransactionDetails(hash: string): Promise<BlockchainTransaction | null> {\n  // Simulate blockchain query\n  await new Promise(resolve => setTimeout(resolve, 300));\n\n  // Mock transaction not found sometimes\n  if (Math.random() < 0.1) {\n    return null;\n  }\n\n  return {\n    hash,\n    from: generateWalletAddress(),\n    to: generateWalletAddress(),\n    value: (Math.random() * 10).toFixed(4),\n    gasUsed: \"21000\",\n    gasPrice: \"0.02\",\n    blockNumber: Math.floor(Math.random() * 1000000) + 12345000,\n    timestamp: Date.now() - Math.random() * 86400000, // Random time in last 24h\n    status: \"confirmed\",\n  };\n}\n\n/**\n * Mock function to get network statistics\n */\nexport async function getNetworkStats(): Promise<{\n  latestBlock: number;\n  gasPrice: string;\n  totalTransactions: number;\n  activeValidators: number;\n}> {\n  // Simulate network query\n  await new Promise(resolve => setTimeout(resolve, 200));\n\n  return {\n    latestBlock: Math.floor(Math.random() * 1000) + 12345000,\n    gasPrice: (Math.random() * 0.05 + 0.01).toFixed(4),\n    totalTransactions: Math.floor(Math.random() * 1000000) + 5000000,\n    activeValidators: Math.floor(Math.random() * 50) + 100,\n  };\n}\n\n/**\n * Format wei to ETH\n */\nexport function formatEther(wei: string): string {\n  const eth = parseFloat(wei) / Math.pow(10, 18);\n  return eth.toFixed(4);\n}\n\n/**\n * Format ETH to wei\n */\nexport function parseEther(eth: string): string {\n  const wei = parseFloat(eth) * Math.pow(10, 18);\n  return wei.toString();\n}\n\n/**\n * Validate Ethereum address format\n */\nexport function isValidAddress(address: string): boolean {\n  return /^0x[a-fA-F0-9]{40}$/.test(address);\n}\n\n/**\n * Validate transaction hash format\n */\nexport function isValidTransactionHash(hash: string): boolean {\n  return /^0x[a-fA-F0-9]{64}$/.test(hash);\n}\n\n/**\n * Get block explorer URL for transaction\n */\nexport function getTransactionUrl(hash: string): string {\n  return `${NETWORK_CONFIG.blockExplorer}/tx/${hash}`;\n}\n\n/**\n * Get block explorer URL for address\n */\nexport function getAddressUrl(address: string): string {\n  return `${NETWORK_CONFIG.blockExplorer}/address/${address}`;\n}\n\n/**\n * Calculate gas cost in ETH\n */\nexport function calculateGasCost(gasUsed: string, gasPrice: string): string {\n  const cost = parseFloat(gasUsed) * parseFloat(gasPrice) / Math.pow(10, 9);\n  return cost.toFixed(6);\n}\n\n/**\n * Estimate gas for contribution transaction\n */\nexport function estimateContributionGas(amount: string): Promise<string> {\n  // Simple estimation based on amount\n  const baseGas = 21000;\n  const extraGas = parseFloat(amount) > 1 ? 5000 : 0;\n  return Promise.resolve((baseGas + extraGas).toString());\n}\n\n/**\n * Mock function to check if wallet is connected\n */\nexport function isWalletConnected(): boolean {\n  // Check if wallet connection exists in localStorage\n  return localStorage.getItem(\"wallet_connected\") === \"true\";\n}\n\n/**\n * Mock function to connect wallet\n */\nexport async function connectWallet(): Promise<string> {\n  // Simulate wallet connection process\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  const address = generateWalletAddress();\n  localStorage.setItem(\"wallet_connected\", \"true\");\n  localStorage.setItem(\"wallet_address\", address);\n  \n  return address;\n}\n\n/**\n * Mock function to disconnect wallet\n */\nexport function disconnectWallet(): void {\n  localStorage.removeItem(\"wallet_connected\");\n  localStorage.removeItem(\"wallet_address\");\n}\n\n/**\n * Get connected wallet address\n */\nexport function getWalletAddress(): string | null {\n  return localStorage.getItem(\"wallet_address\");\n}\n","size_bytes":7845},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest<T = any>(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<T> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const url = queryKey.join(\"/\") as string;\n    \n    // Ensure we're only making requests to API endpoints\n    if (!url.startsWith('/api/')) {\n      throw new Error(`Invalid API endpoint: ${url}. Query keys must start with '/api/'`);\n    }\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1620},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/web3.ts":{"content":"// Web3 utilities and wallet integration for the crowdfunding platform\nimport { generateWalletAddress, generateTransactionHash, NETWORK_CONFIG } from \"./blockchain\";\n\nexport interface WalletInfo {\n  address: string;\n  balance: string;\n  network: string;\n  connected: boolean;\n}\n\nexport interface PaymentMethod {\n  id: string;\n  name: string;\n  type: \"crypto\" | \"fiat\";\n  currency: string;\n  icon: string;\n  available: boolean;\n}\n\n// Supported payment methods\nexport const PAYMENT_METHODS: PaymentMethod[] = [\n  {\n    id: \"eth\",\n    name: \"Ethereum\",\n    type: \"crypto\",\n    currency: \"ETH\",\n    icon: \"⟠\",\n    available: true,\n  },\n  {\n    id: \"matic\",\n    name: \"Polygon\",\n    type: \"crypto\",\n    currency: \"MATIC\",\n    icon: \"⬢\",\n    available: true,\n  },\n  {\n    id: \"usdc\",\n    name: \"USD Coin\",\n    type: \"crypto\",\n    currency: \"USDC\",\n    icon: \"$\",\n    available: true,\n  },\n  {\n    id: \"card\",\n    name: \"Credit/Debit Card\",\n    type: \"fiat\",\n    currency: \"USD\",\n    icon: \"💳\",\n    available: true,\n  },\n  {\n    id: \"paypal\",\n    name: \"PayPal\",\n    type: \"fiat\",\n    currency: \"USD\",\n    icon: \"📱\",\n    available: false, // Mock disabled for demo\n  },\n];\n\n// Wallet providers\nexport const WALLET_PROVIDERS = [\n  {\n    id: \"metamask\",\n    name: \"MetaMask\",\n    icon: \"🦊\",\n    available: true,\n  },\n  {\n    id: \"walletconnect\",\n    name: \"WalletConnect\",\n    icon: \"🔗\",\n    available: true,\n  },\n  {\n    id: \"coinbase\",\n    name: \"Coinbase Wallet\",\n    icon: \"🟦\",\n    available: true,\n  },\n];\n\n/**\n * Mock MetaMask detection\n */\nexport function detectMetaMask(): boolean {\n  // In real implementation, check for window.ethereum\n  return typeof window !== \"undefined\" && Math.random() > 0.3; // 70% chance for demo\n}\n\n/**\n * Mock wallet connection with provider selection\n */\nexport async function connectWallet(providerId: string = \"metamask\"): Promise<WalletInfo> {\n  // Simulate connection process\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  // Mock connection failure sometimes\n  if (Math.random() < 0.1) {\n    throw new Error(\"User rejected the connection request\");\n  }\n\n  const address = generateWalletAddress();\n  const balance = (Math.random() * 10 + 0.5).toFixed(4); // Random balance between 0.5-10.5 ETH\n\n  const walletInfo: WalletInfo = {\n    address,\n    balance,\n    network: NETWORK_CONFIG.name,\n    connected: true,\n  };\n\n  // Store in localStorage for persistence\n  localStorage.setItem(\"wallet_info\", JSON.stringify(walletInfo));\n  localStorage.setItem(\"wallet_provider\", providerId);\n\n  return walletInfo;\n}\n\n/**\n * Get stored wallet information\n */\nexport function getStoredWallet(): WalletInfo | null {\n  try {\n    const stored = localStorage.getItem(\"wallet_info\");\n    if (stored) {\n      return JSON.parse(stored);\n    }\n  } catch (error) {\n    console.error(\"Failed to parse stored wallet info:\", error);\n  }\n  return null;\n}\n\n/**\n * Disconnect wallet\n */\nexport function disconnectWallet(): void {\n  localStorage.removeItem(\"wallet_info\");\n  localStorage.removeItem(\"wallet_provider\");\n}\n\n/**\n * Mock network switching\n */\nexport async function switchToPolygonMumbai(): Promise<void> {\n  // Simulate network switch\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Mock switch failure sometimes\n  if (Math.random() < 0.2) {\n    throw new Error(\"Failed to switch network. Please switch manually in your wallet.\");\n  }\n}\n\n/**\n * Mock balance refresh\n */\nexport async function refreshBalance(address: string): Promise<string> {\n  // Simulate balance fetch\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  const balance = (Math.random() * 10 + 0.5).toFixed(4);\n  \n  // Update stored wallet info\n  const stored = getStoredWallet();\n  if (stored) {\n    stored.balance = balance;\n    localStorage.setItem(\"wallet_info\", JSON.stringify(stored));\n  }\n\n  return balance;\n}\n\n/**\n * Mock transaction signing and sending\n */\nexport async function sendTransaction(params: {\n  to: string;\n  amount: string;\n  currency: string;\n}): Promise<{\n  hash: string;\n  status: \"pending\" | \"confirmed\" | \"failed\";\n}> {\n  // Simulate transaction signing\n  await new Promise(resolve => setTimeout(resolve, 2000));\n\n  // Mock transaction failure sometimes\n  if (Math.random() < 0.05) {\n    throw new Error(\"Transaction failed: Insufficient funds or gas\");\n  }\n\n  const hash = generateTransactionHash();\n\n  // Simulate mining time\n  setTimeout(() => {\n    // In real implementation, this would be handled by blockchain events\n    console.log(`Transaction ${hash} confirmed`);\n  }, 5000);\n\n  return {\n    hash,\n    status: \"pending\",\n  };\n}\n\n/**\n * Mock fiat payment processing\n */\nexport async function processFiatPayment(params: {\n  amount: string;\n  currency: string;\n  paymentMethodId: string;\n  campaignId: string;\n}): Promise<{\n  transactionId: string;\n  status: \"processing\" | \"completed\" | \"failed\";\n}> {\n  // Simulate payment processing\n  await new Promise(resolve => setTimeout(resolve, 3000));\n\n  // Mock payment failure sometimes\n  if (Math.random() < 0.1) {\n    throw new Error(\"Payment failed: Card declined\");\n  }\n\n  const transactionId = `fiat_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n  return {\n    transactionId,\n    status: \"completed\",\n  };\n}\n\n/**\n * Format wallet address for display\n */\nexport function formatAddress(address: string, startChars: number = 6, endChars: number = 4): string {\n  if (!address || address.length < startChars + endChars) {\n    return address;\n  }\n  return `${address.slice(0, startChars)}...${address.slice(-endChars)}`;\n}\n\n/**\n * Copy address to clipboard\n */\nexport async function copyToClipboard(text: string): Promise<void> {\n  try {\n    await navigator.clipboard.writeText(text);\n  } catch (error) {\n    // Fallback for older browsers\n    const textArea = document.createElement(\"textarea\");\n    textArea.value = text;\n    document.body.appendChild(textArea);\n    textArea.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(textArea);\n  }\n}\n\n/**\n * Validate amount input\n */\nexport function validateAmount(amount: string, balance?: string): {\n  isValid: boolean;\n  error?: string;\n} {\n  const numAmount = parseFloat(amount);\n\n  if (isNaN(numAmount) || numAmount <= 0) {\n    return {\n      isValid: false,\n      error: \"Please enter a valid amount\",\n    };\n  }\n\n  if (numAmount < 0.001) {\n    return {\n      isValid: false,\n      error: \"Minimum contribution is 0.001 ETH\",\n    };\n  }\n\n  if (balance && numAmount > parseFloat(balance)) {\n    return {\n      isValid: false,\n      error: \"Insufficient balance\",\n    };\n  }\n\n  return { isValid: true };\n}\n\n/**\n * Convert between currencies (mock rates)\n */\nexport function convertCurrency(\n  amount: string,\n  fromCurrency: string,\n  toCurrency: string\n): string {\n  const mockRates: Record<string, Record<string, number>> = {\n    ETH: {\n      USD: 2000,\n      MATIC: 1500,\n      USDC: 2000,\n    },\n    MATIC: {\n      USD: 1.33,\n      ETH: 0.0007,\n      USDC: 1.33,\n    },\n    USDC: {\n      USD: 1,\n      ETH: 0.0005,\n      MATIC: 0.75,\n    },\n    USD: {\n      ETH: 0.0005,\n      MATIC: 0.75,\n      USDC: 1,\n    },\n  };\n\n  if (fromCurrency === toCurrency) {\n    return amount;\n  }\n\n  const rate = mockRates[fromCurrency]?.[toCurrency] || 1;\n  const converted = parseFloat(amount) * rate;\n\n  return converted.toFixed(6);\n}\n\n/**\n * Get gas estimate for transaction\n */\nexport async function estimateGas(params: {\n  to: string;\n  amount: string;\n  data?: string;\n}): Promise<{\n  gasLimit: string;\n  gasPrice: string;\n  gasCost: string;\n}> {\n  // Simulate gas estimation\n  await new Promise(resolve => setTimeout(resolve, 300));\n\n  const baseGas = params.data ? 50000 : 21000;\n  const gasLimit = (baseGas + Math.floor(Math.random() * 10000)).toString();\n  const gasPrice = (Math.random() * 20 + 10).toFixed(2); // 10-30 gwei\n  const gasCost = ((parseFloat(gasLimit) * parseFloat(gasPrice)) / 1e9).toFixed(6);\n\n  return {\n    gasLimit,\n    gasPrice,\n    gasCost,\n  };\n}\n\n/**\n * Check if address is valid Ethereum address\n */\nexport function isValidEthereumAddress(address: string): boolean {\n  return /^0x[a-fA-F0-9]{40}$/.test(address);\n}\n\n/**\n * Generate QR code data for campaign sharing\n */\nexport function generateCampaignQR(campaignId: string): string {\n  const baseUrl = window.location.origin;\n  return `${baseUrl}/campaigns/${campaignId}`;\n}\n\n/**\n * Mock wallet event listeners\n */\nexport class WalletEventEmitter {\n  private listeners: Record<string, Function[]> = {};\n\n  on(event: string, callback: Function) {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event].push(callback);\n  }\n\n  off(event: string, callback: Function) {\n    if (this.listeners[event]) {\n      this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\n    }\n  }\n\n  emit(event: string, data?: any) {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach(callback => callback(data));\n    }\n  }\n\n  // Mock events that could be emitted\n  simulateAccountChange(newAddress: string) {\n    this.emit(\"accountsChanged\", [newAddress]);\n  }\n\n  simulateNetworkChange(chainId: number) {\n    this.emit(\"chainChanged\", `0x${chainId.toString(16)}`);\n  }\n\n  simulateDisconnect() {\n    this.emit(\"disconnect\");\n  }\n}\n\n// Global wallet event emitter instance\nexport const walletEvents = new WalletEventEmitter();\n\n// Mock periodic events for demo\nif (typeof window !== \"undefined\") {\n  // Simulate occasional account changes\n  setInterval(() => {\n    if (Math.random() < 0.01 && getStoredWallet()) { // 1% chance every 10 seconds\n      const newAddress = generateWalletAddress();\n      walletEvents.simulateAccountChange(newAddress);\n    }\n  }, 10000);\n}\n","size_bytes":9706},"client/src/pages/AccessGuide.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  LogIn,\n  Shield, \n  Sparkles, \n  Wallet, \n  Zap,\n  BarChart3,\n  CreditCard,\n  Globe,\n  Users,\n  CheckCircle,\n  AlertTriangle,\n  ArrowRight\n} from \"lucide-react\";\n\nexport default function AccessGuide() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\" data-testid=\"access-guide\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-cyan-400 to-purple-600 bg-clip-text text-transparent mb-4\">\n            How to Access Everything\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Complete guide to accessing all features in our Web3 crowdfunding platform\n          </p>\n        </div>\n\n        {/* Authentication Alert */}\n        <Alert className=\"mb-8 border-yellow-200 bg-yellow-50 dark:border-yellow-800 dark:bg-yellow-900/20\">\n          <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n          <AlertDescription className=\"text-yellow-800 dark:text-yellow-200\">\n            <strong>Note:</strong> You need to be logged in to access most features. The authentication system is currently experiencing issues. \n            You can still explore the feature overview and landing page without authentication.\n          </AlertDescription>\n        </Alert>\n\n        {/* Step-by-Step Guide */}\n        <div className=\"space-y-8\">\n          \n          {/* Step 1: Login */}\n          <Card className=\"border-2 border-blue-200 dark:border-blue-800\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <div className=\"w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold\">\n                  1\n                </div>\n                <LogIn className=\"w-5 h-5 text-blue-500\" />\n                Login/Authentication (Currently Having Issues)\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                The platform uses Replit's OpenID Connect for authentication. Currently experiencing connection errors.\n              </p>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <h4 className=\"font-semibold mb-2\">How to Login (when working):</h4>\n                  <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                    <li>• Click \"Login\" button on landing page</li>\n                    <li>• Use Replit account credentials</li>\n                    <li>• Complete OAuth flow</li>\n                    <li>• Get redirected to dashboard</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-2\">Current Status:</h4>\n                  <Badge variant=\"destructive\" className=\"mb-2\">\n                    Authentication Error\n                  </Badge>\n                  <p className=\"text-sm text-muted-foreground\">\n                    OpenID Connect authorization response error. Working on fix.\n                  </p>\n                </div>\n              </div>\n\n              <Button disabled className=\"w-full\">\n                <LogIn className=\"w-4 h-4 mr-2\" />\n                Login (Temporarily Disabled)\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Available Without Login */}\n          <Card className=\"border-2 border-green-200 dark:border-green-800\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                Available Without Login\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-3\">\n                  <Button asChild className=\"w-full justify-start\">\n                    <a href=\"/\" data-testid=\"button-landing-page\">\n                      <Globe className=\"w-4 h-4 mr-2\" />\n                      Landing Page\n                    </a>\n                  </Button>\n                  \n                  <Button asChild className=\"w-full justify-start\">\n                    <a href=\"/features\" data-testid=\"button-features-page\">\n                      <Sparkles className=\"w-4 h-4 mr-2\" />\n                      Feature Showcase\n                    </a>\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <h4 className=\"font-semibold\">What you can see:</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    <li>• Platform overview and features</li>\n                    <li>• Database statistics (empty for now)</li>\n                    <li>• UI components and design</li>\n                    <li>• Feature documentation</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Features Requiring Login */}\n          <Card className=\"border-2 border-purple-200 dark:border-purple-800\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"w-5 h-5 text-purple-500\" />\n                Features Requiring Login\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Shield className=\"w-4 h-4 text-green-500\" />\n                      <span className=\"font-medium\">KYC Verification</span>\n                      <Badge variant=\"default\">Ready</Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Complete identity verification with document upload\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\" disabled>\n                      Access: /kyc-verification\n                    </Button>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Sparkles className=\"w-4 h-4 text-purple-500\" />\n                      <span className=\"font-medium\">AI Campaign Creation</span>\n                      <Badge variant=\"default\">Ready</Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Create campaigns with AI optimization\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\" disabled>\n                      Access: /create\n                    </Button>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Wallet className=\"w-4 h-4 text-blue-500\" />\n                      <span className=\"font-medium\">Web3 Wallet</span>\n                      <Badge variant=\"default\">Ready</Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Connect MetaMask and make crypto payments\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\" disabled>\n                      Access: /campaigns (after login)\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4 text-red-500\" />\n                      <span className=\"font-medium\">Analytics Dashboard</span>\n                      <Badge variant=\"default\">Ready</Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      View campaign statistics and performance\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\" disabled>\n                      Access: /dashboard\n                    </Button>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4 text-yellow-500\" />\n                      <span className=\"font-medium\">Crypto Payments</span>\n                      <Badge variant=\"default\">Ready</Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Process ETH, MATIC, USDC payments\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\" disabled>\n                      Access: Payment modals in campaigns\n                    </Button>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <Users className=\"w-4 h-4 text-indigo-500\" />\n                      <span className=\"font-medium\">Campaign Management</span>\n                      <Badge variant=\"default\">Ready</Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Manage your campaigns and contributions\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\" disabled>\n                      Access: /campaigns/:id\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Coming Soon Features */}\n          <Card className=\"border-2 border-gray-200 dark:border-gray-800\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Globe className=\"w-5 h-5 text-gray-500\" />\n                Coming Soon Features\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center space-y-2\">\n                  <CreditCard className=\"w-8 h-8 text-gray-500 mx-auto\" />\n                  <h4 className=\"font-medium\">Fiat Payments</h4>\n                  <Badge variant=\"secondary\">In Development</Badge>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Stripe & Razorpay integration\n                  </p>\n                </div>\n\n                <div className=\"text-center space-y-2\">\n                  <Globe className=\"w-8 h-8 text-gray-500 mx-auto\" />\n                  <h4 className=\"font-medium\">3D Effects</h4>\n                  <Badge variant=\"secondary\">Planned</Badge>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Three.js cyberpunk visuals\n                  </p>\n                </div>\n\n                <div className=\"text-center space-y-2\">\n                  <Users className=\"w-8 h-8 text-gray-500 mx-auto\" />\n                  <h4 className=\"font-medium\">Social Features</h4>\n                  <Badge variant=\"secondary\">Planned</Badge>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Profiles & community\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Direct Access Links */}\n          <Card className=\"border-2 border-cyan-200 dark:border-cyan-800\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <ArrowRight className=\"w-5 h-5 text-cyan-500\" />\n                Direct Access Links\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-semibold text-green-600\">✅ Available Now:</h4>\n                    <div className=\"space-y-1\">\n                      <Button variant=\"outline\" size=\"sm\" asChild className=\"w-full justify-start\">\n                        <a href=\"/\">🏠 Landing Page</a>\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" asChild className=\"w-full justify-start\">\n                        <a href=\"/features\">✨ Feature Showcase</a>\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-semibold text-yellow-600\">🔒 Requires Login:</h4>\n                    <div className=\"space-y-1 opacity-50\">\n                      <Button variant=\"outline\" size=\"sm\" disabled className=\"w-full justify-start\">\n                        🛡️ /kyc-verification\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" disabled className=\"w-full justify-start\">\n                        🚀 /create\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" disabled className=\"w-full justify-start\">\n                        📊 /dashboard\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" disabled className=\"w-full justify-start\">\n                        💰 /campaigns\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" disabled className=\"w-full justify-start\">\n                        🔍 /explorer\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                <Alert>\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>Tip:</strong> The database is working perfectly with PostgreSQL, all APIs are functional, \n                    and the UI components are fully built. Only the authentication system needs fixing to unlock full access.\n                  </AlertDescription>\n                </Alert>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14570},"client/src/pages/CreateCampaign.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertCircle, Sparkles, TrendingUp, Target, Plus, X } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst campaignSchema = z.object({\n  title: z.string().min(5, \"Title must be at least 5 characters\"),\n  description: z.string().min(50, \"Description must be at least 50 characters\"),\n  category: z.string().min(1, \"Please select a category\"),\n  fundingType: z.enum([\"donation\", \"reward\", \"equity\"], {\n    errorMap: () => ({ message: \"Please select a funding type\" }),\n  }),\n  goalAmount: z.string().min(1, \"Goal amount is required\"),\n  currency: z.string().default(\"ETH\"),\n  deadline: z.string().min(1, \"Deadline is required\"),\n  imageUrl: z.string().url().optional().or(z.literal(\"\")),\n  tags: z.array(z.string()).max(10, \"Maximum 10 tags allowed\"),\n});\n\ntype CampaignFormData = z.infer<typeof campaignSchema>;\n\ninterface RewardTier {\n  tier: string;\n  amount: string;\n  description: string;\n  estimatedDelivery?: string;\n  limit?: number;\n}\n\nexport default function CreateCampaign() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [currentTag, setCurrentTag] = useState(\"\");\n  const [tags, setTags] = useState<string[]>([]);\n  const [rewardTiers, setRewardTiers] = useState<RewardTier[]>([]);\n  const [aiSuggestions, setAiSuggestions] = useState<{\n    title?: string[];\n    description?: string;\n    credibilityScore?: number;\n    fundingPrediction?: any;\n  }>({});\n  \n  const form = useForm<CampaignFormData>({\n    resolver: zodResolver(campaignSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      category: \"\",\n      fundingType: \"reward\",\n      goalAmount: \"\",\n      currency: \"ETH\",\n      deadline: \"\",\n      imageUrl: \"\",\n      tags: [],\n    },\n  });\n\n  // AI Title Optimization\n  const titleOptimization = useMutation({\n    mutationFn: async (title: string) => {\n      return apiRequest(\"POST\", \"/api/ai/optimize-title\", { title });\n    },\n    onSuccess: (data) => {\n      setAiSuggestions(prev => ({ ...prev, title: data.suggestions }));\n    },\n  });\n\n  // AI Description Enhancement\n  const descriptionEnhancement = useMutation({\n    mutationFn: async (description: string, category: string) => {\n      return apiRequest(\"POST\", \"/api/ai/enhance-description\", { description, category });\n    },\n    onSuccess: (data) => {\n      setAiSuggestions(prev => ({ ...prev, description: data.enhanced }));\n    },\n  });\n\n  // AI Credibility Analysis\n  const credibilityAnalysis = useMutation({\n    mutationFn: async (campaignData: any) => {\n      return apiRequest(\"POST\", \"/api/ai/analyze-credibility\", { campaignData });\n    },\n    onSuccess: (data) => {\n      setAiSuggestions(prev => ({ ...prev, credibilityScore: data.score }));\n    },\n  });\n\n  // AI Funding Prediction\n  const fundingPrediction = useMutation({\n    mutationFn: async (campaignData: any) => {\n      return apiRequest(\"POST\", \"/api/ai/predict-funding\", { campaignData });\n    },\n    onSuccess: (data) => {\n      setAiSuggestions(prev => ({ ...prev, fundingPrediction: data }));\n    },\n  });\n\n  const createCampaignMutation = useMutation({\n    mutationFn: async (data: CampaignFormData & { rewards?: RewardTier[] }) => {\n      return apiRequest(\"POST\", \"/api/campaigns\", {\n        ...data,\n        tags: tags,\n        rewards: rewardTiers.length > 0 ? rewardTiers : undefined,\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Campaign Created Successfully!\",\n        description: \"Your campaign is now live and accepting contributions.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      setLocation(`/campaigns/${data.id}`);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to Create Campaign\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addTag = () => {\n    if (currentTag && !tags.includes(currentTag) && tags.length < 10) {\n      setTags([...tags, currentTag]);\n      setCurrentTag(\"\");\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setTags(tags.filter(tag => tag !== tagToRemove));\n  };\n\n  const addRewardTier = () => {\n    setRewardTiers([...rewardTiers, {\n      tier: `Tier ${rewardTiers.length + 1}`,\n      amount: \"\",\n      description: \"\",\n    }]);\n  };\n\n  const removeRewardTier = (index: number) => {\n    setRewardTiers(rewardTiers.filter((_, i) => i !== index));\n  };\n\n  const updateRewardTier = (index: number, field: keyof RewardTier, value: string | number) => {\n    setRewardTiers(prev => prev.map((tier, i) => \n      i === index ? { ...tier, [field]: value } : tier\n    ));\n  };\n\n  // Check if user is approved for KYC\n  if (!user) {\n    return <div className=\"container mx-auto px-4 py-8\">Loading...</div>;\n  }\n\n  if (user.kycStatus !== \"approved\") {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Alert className=\"max-w-2xl mx-auto\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            You need to complete KYC verification before creating campaigns.{\" \"}\n            <a href=\"/kyc\" className=\"text-blue-600 hover:underline\">\n              Complete verification here\n            </a>\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\" data-testid=\"create-campaign-page\">\n      <div className=\"max-w-4xl mx-auto\">\n        <Card className=\"glass-morphism border-cyan-200 dark:border-cyan-800\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-3xl bg-gradient-to-r from-cyan-400 to-purple-600 bg-clip-text text-transparent\">\n              Create New Campaign\n            </CardTitle>\n            <CardDescription>\n              Launch your project with blockchain transparency and AI-powered optimization\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent>\n            <form onSubmit={form.handleSubmit((data) => createCampaignMutation.mutate({ ...data, rewards: rewardTiers }))} className=\"space-y-8\">\n              {/* Campaign Title with AI Optimization */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"title\">Campaign Title *</Label>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => titleOptimization.mutate(form.watch(\"title\"))}\n                    disabled={!form.watch(\"title\") || titleOptimization.isPending}\n                    data-testid=\"button-optimize-title\"\n                  >\n                    <Sparkles className=\"w-4 h-4 mr-2\" />\n                    {titleOptimization.isPending ? \"Optimizing...\" : \"AI Optimize\"}\n                  </Button>\n                </div>\n                \n                <Input\n                  id=\"title\"\n                  {...form.register(\"title\")}\n                  placeholder=\"Enter your campaign title\"\n                  className=\"text-lg\"\n                  data-testid=\"input-campaign-title\"\n                />\n                \n                {form.formState.errors.title && (\n                  <p className=\"text-red-500 text-sm\">{form.formState.errors.title.message}</p>\n                )}\n\n                {/* AI Title Suggestions */}\n                {aiSuggestions.title && aiSuggestions.title.length > 0 && (\n                  <div className=\"mt-4 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                    <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">\n                      ✨ AI-Optimized Title Suggestions:\n                    </h4>\n                    <div className=\"space-y-2\">\n                      {aiSuggestions.title.map((suggestion, index) => (\n                        <button\n                          key={index}\n                          type=\"button\"\n                          onClick={() => form.setValue(\"title\", suggestion)}\n                          className=\"block w-full text-left p-2 hover:bg-blue-100 dark:hover:bg-blue-800 rounded text-sm\"\n                          data-testid={`button-title-suggestion-${index}`}\n                        >\n                          {suggestion}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Campaign Description with AI Enhancement */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"description\">Campaign Description *</Label>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => descriptionEnhancement.mutate(form.watch(\"description\"), form.watch(\"category\"))}\n                    disabled={!form.watch(\"description\") || !form.watch(\"category\") || descriptionEnhancement.isPending}\n                    data-testid=\"button-enhance-description\"\n                  >\n                    <TrendingUp className=\"w-4 h-4 mr-2\" />\n                    {descriptionEnhancement.isPending ? \"Enhancing...\" : \"AI Enhance\"}\n                  </Button>\n                </div>\n\n                <Textarea\n                  id=\"description\"\n                  {...form.register(\"description\")}\n                  placeholder=\"Describe your project, goals, and why people should support it...\"\n                  rows={6}\n                  data-testid=\"textarea-campaign-description\"\n                />\n\n                {form.formState.errors.description && (\n                  <p className=\"text-red-500 text-sm\">{form.formState.errors.description.message}</p>\n                )}\n\n                {/* AI Enhanced Description */}\n                {aiSuggestions.description && (\n                  <div className=\"mt-4 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                    <h4 className=\"font-medium text-green-900 dark:text-green-100 mb-2\">\n                      ✨ AI-Enhanced Description:\n                    </h4>\n                    <div className=\"prose dark:prose-invert text-sm max-w-none\">\n                      <p className=\"whitespace-pre-wrap\">{aiSuggestions.description}</p>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => form.setValue(\"description\", aiSuggestions.description!)}\n                      className=\"mt-3\"\n                      data-testid=\"button-use-enhanced-description\"\n                    >\n                      Use Enhanced Version\n                    </Button>\n                  </div>\n                )}\n              </div>\n\n              {/* Category and Funding Type */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"category\">Category *</Label>\n                  <Select \n                    value={form.watch(\"category\")} \n                    onValueChange={(value) => form.setValue(\"category\", value)}\n                  >\n                    <SelectTrigger data-testid=\"select-campaign-category\">\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Technology\">Technology</SelectItem>\n                      <SelectItem value=\"Gaming\">Gaming</SelectItem>\n                      <SelectItem value=\"Art\">Art & Design</SelectItem>\n                      <SelectItem value=\"Film\">Film & Video</SelectItem>\n                      <SelectItem value=\"Music\">Music</SelectItem>\n                      <SelectItem value=\"Publishing\">Publishing</SelectItem>\n                      <SelectItem value=\"Food\">Food</SelectItem>\n                      <SelectItem value=\"Fashion\">Fashion</SelectItem>\n                      <SelectItem value=\"Health\">Health</SelectItem>\n                      <SelectItem value=\"Education\">Education</SelectItem>\n                      <SelectItem value=\"Environment\">Environment</SelectItem>\n                      <SelectItem value=\"Community\">Community</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.category && (\n                    <p className=\"text-red-500 text-sm\">{form.formState.errors.category.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"funding-type\">Funding Type *</Label>\n                  <Select \n                    value={form.watch(\"fundingType\")} \n                    onValueChange={(value) => form.setValue(\"fundingType\", value as \"donation\" | \"reward\" | \"equity\")}\n                  >\n                    <SelectTrigger data-testid=\"select-funding-type\">\n                      <SelectValue placeholder=\"Select funding type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"donation\">Donation-based</SelectItem>\n                      <SelectItem value=\"reward\">Reward-based</SelectItem>\n                      <SelectItem value=\"equity\">Equity-based</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.fundingType && (\n                    <p className=\"text-red-500 text-sm\">{form.formState.errors.fundingType.message}</p>\n                  )}\n                </div>\n              </div>\n\n              {/* Funding Goal and Deadline */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"goal-amount\">Funding Goal *</Label>\n                  <Input\n                    id=\"goal-amount\"\n                    type=\"number\"\n                    step=\"0.001\"\n                    {...form.register(\"goalAmount\")}\n                    placeholder=\"100\"\n                    data-testid=\"input-goal-amount\"\n                  />\n                  {form.formState.errors.goalAmount && (\n                    <p className=\"text-red-500 text-sm\">{form.formState.errors.goalAmount.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"currency\">Currency</Label>\n                  <Select \n                    value={form.watch(\"currency\")} \n                    onValueChange={(value) => form.setValue(\"currency\", value)}\n                  >\n                    <SelectTrigger data-testid=\"select-currency\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"ETH\">ETH (Ethereum)</SelectItem>\n                      <SelectItem value=\"MATIC\">MATIC (Polygon)</SelectItem>\n                      <SelectItem value=\"USDC\">USDC (Stable)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"deadline\">Campaign Deadline *</Label>\n                  <Input\n                    id=\"deadline\"\n                    type=\"date\"\n                    {...form.register(\"deadline\")}\n                    min={new Date().toISOString().split('T')[0]}\n                    data-testid=\"input-campaign-deadline\"\n                  />\n                  {form.formState.errors.deadline && (\n                    <p className=\"text-red-500 text-sm\">{form.formState.errors.deadline.message}</p>\n                  )}\n                </div>\n              </div>\n\n              {/* Campaign Image */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"image-url\">Campaign Image URL (Optional)</Label>\n                <Input\n                  id=\"image-url\"\n                  type=\"url\"\n                  {...form.register(\"imageUrl\")}\n                  placeholder=\"https://example.com/your-image.jpg\"\n                  data-testid=\"input-image-url\"\n                />\n                {form.formState.errors.imageUrl && (\n                  <p className=\"text-red-500 text-sm\">{form.formState.errors.imageUrl.message}</p>\n                )}\n              </div>\n\n              {/* Tags */}\n              <div className=\"space-y-4\">\n                <Label>Tags (Optional, max 10)</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    value={currentTag}\n                    onChange={(e) => setCurrentTag(e.target.value)}\n                    placeholder=\"Add a tag...\"\n                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}\n                    data-testid=\"input-campaign-tag\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={addTag}\n                    disabled={!currentTag || tags.length >= 10}\n                    data-testid=\"button-add-tag\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                \n                {/* Display Tags */}\n                {tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2\">\n                    {tags.map((tag, index) => (\n                      <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                        {tag}\n                        <X \n                          className=\"w-3 h-3 cursor-pointer\" \n                          onClick={() => removeTag(tag)}\n                          data-testid={`button-remove-tag-${index}`}\n                        />\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Reward Tiers (for reward-based campaigns) */}\n              {form.watch(\"fundingType\") === \"reward\" && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Reward Tiers</Label>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={addRewardTier}\n                      data-testid=\"button-add-reward-tier\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Reward Tier\n                    </Button>\n                  </div>\n\n                  {rewardTiers.map((tier, index) => (\n                    <Card key={index} className=\"p-4\">\n                      <div className=\"flex justify-between items-center mb-4\">\n                        <h4 className=\"font-medium\">Reward Tier {index + 1}</h4>\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeRewardTier(index)}\n                          data-testid={`button-remove-reward-tier-${index}`}\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <Input\n                          placeholder=\"Tier name\"\n                          value={tier.tier}\n                          onChange={(e) => updateRewardTier(index, \"tier\", e.target.value)}\n                          data-testid={`input-tier-name-${index}`}\n                        />\n                        <Input\n                          placeholder=\"Minimum amount\"\n                          value={tier.amount}\n                          onChange={(e) => updateRewardTier(index, \"amount\", e.target.value)}\n                          data-testid={`input-tier-amount-${index}`}\n                        />\n                      </div>\n\n                      <Textarea\n                        placeholder=\"Reward description\"\n                        value={tier.description}\n                        onChange={(e) => updateRewardTier(index, \"description\", e.target.value)}\n                        className=\"mt-4\"\n                        data-testid={`textarea-tier-description-${index}`}\n                      />\n                    </Card>\n                  ))}\n                </div>\n              )}\n\n              {/* AI Analysis Section */}\n              <div className=\"space-y-4\">\n                <Separator />\n                <div className=\"flex items-center gap-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => credibilityAnalysis.mutate({\n                      title: form.watch(\"title\"),\n                      description: form.watch(\"description\"),\n                      category: form.watch(\"category\"),\n                      goalAmount: form.watch(\"goalAmount\"),\n                    })}\n                    disabled={credibilityAnalysis.isPending}\n                    data-testid=\"button-analyze-credibility\"\n                  >\n                    <Target className=\"w-4 h-4 mr-2\" />\n                    {credibilityAnalysis.isPending ? \"Analyzing...\" : \"Analyze Credibility\"}\n                  </Button>\n\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => fundingPrediction.mutate({\n                      title: form.watch(\"title\"),\n                      description: form.watch(\"description\"),\n                      category: form.watch(\"category\"),\n                      goalAmount: form.watch(\"goalAmount\"),\n                      tags: tags,\n                    })}\n                    disabled={fundingPrediction.isPending}\n                    data-testid=\"button-predict-funding\"\n                  >\n                    <TrendingUp className=\"w-4 h-4 mr-2\" />\n                    {fundingPrediction.isPending ? \"Predicting...\" : \"Predict Success\"}\n                  </Button>\n                </div>\n\n                {/* AI Analysis Results */}\n                {(aiSuggestions.credibilityScore || aiSuggestions.fundingPrediction) && (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {aiSuggestions.credibilityScore && (\n                      <Card className=\"p-4 bg-yellow-50 dark:bg-yellow-900/20\">\n                        <h4 className=\"font-medium text-yellow-800 dark:text-yellow-200\">\n                          Credibility Score: {aiSuggestions.credibilityScore}/10\n                        </h4>\n                        <p className=\"text-sm text-yellow-700 dark:text-yellow-300 mt-1\">\n                          Based on campaign details and creator profile\n                        </p>\n                      </Card>\n                    )}\n\n                    {aiSuggestions.fundingPrediction && (\n                      <Card className=\"p-4 bg-purple-50 dark:bg-purple-900/20\">\n                        <h4 className=\"font-medium text-purple-800 dark:text-purple-200\">\n                          Success Probability: {Math.round(aiSuggestions.fundingPrediction.probability * 100)}%\n                        </h4>\n                        <p className=\"text-sm text-purple-700 dark:text-purple-300 mt-1\">\n                          {aiSuggestions.fundingPrediction.recommendation}\n                        </p>\n                      </Card>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* Submit Button */}\n              <Button \n                type=\"submit\" \n                className=\"w-full h-12 text-lg\"\n                disabled={createCampaignMutation.isPending}\n                data-testid=\"button-create-campaign\"\n              >\n                {createCampaignMutation.isPending ? \"Creating Campaign...\" : \"Create Campaign\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":25219},"client/src/pages/FeatureShowcase.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { \n  Shield, \n  Sparkles, \n  Wallet, \n  Database, \n  Zap,\n  BarChart3,\n  CreditCard,\n  Globe,\n  Users,\n  CheckCircle,\n  ArrowRight\n} from \"lucide-react\";\n\nexport default function FeatureShowcase() {\n  const features = [\n    {\n      title: \"KYC Verification System\",\n      description: \"Complete identity verification with document upload and AI-powered validation\",\n      icon: Shield,\n      status: \"✅ Complete\",\n      path: \"/kyc-verification\",\n      color: \"from-green-400 to-green-600\",\n      details: [\n        \"Document upload (ID, Passport, Driver's License)\",\n        \"Personal information validation\",\n        \"Address verification\",\n        \"Source of funds documentation\",\n        \"Real-time status tracking\"\n      ]\n    },\n    {\n      title: \"AI-Powered Campaign Creation\",\n      description: \"Smart campaign optimization with title suggestions and credibility analysis\",\n      icon: Sparkles,\n      status: \"✅ Complete\",\n      path: \"/create\",\n      color: \"from-purple-400 to-purple-600\",\n      details: [\n        \"AI title optimization\",\n        \"Description enhancement\",\n        \"Credibility scoring (0-10)\",\n        \"Success probability prediction\",\n        \"Market analysis insights\"\n      ]\n    },\n    {\n      title: \"Web3 Wallet Integration\",\n      description: \"Connect MetaMask and other Web3 wallets for crypto contributions\",\n      icon: Wallet,\n      status: \"✅ Complete\",\n      path: \"/campaigns\",\n      color: \"from-blue-400 to-blue-600\",\n      details: [\n        \"MetaMask connection\",\n        \"Multi-network support (Ethereum, Polygon)\",\n        \"Balance checking\",\n        \"Transaction simulation\",\n        \"Network switching\"\n      ]\n    },\n    {\n      title: \"PostgreSQL Database\",\n      description: \"Production-ready database with Drizzle ORM and real-time updates\",\n      icon: Database,\n      status: \"✅ Complete\",\n      path: \"/dashboard\",\n      color: \"from-indigo-400 to-indigo-600\",\n      details: [\n        \"User management\",\n        \"Campaign storage\",\n        \"Transaction logging\",\n        \"AI interaction tracking\",\n        \"Real-time statistics\"\n      ]\n    },\n    {\n      title: \"Crypto Payment Processing\",\n      description: \"Accept ETH, MATIC, and USDC with blockchain transaction recording\",\n      icon: Zap,\n      status: \"✅ Complete\",\n      path: \"/campaigns\",\n      color: \"from-yellow-400 to-yellow-600\",\n      details: [\n        \"Multi-currency support\",\n        \"Gas fee estimation\",\n        \"Transaction confirmation\",\n        \"On-chain recording\",\n        \"Payment status tracking\"\n      ]\n    },\n    {\n      title: \"Analytics Dashboard\",\n      description: \"Comprehensive platform statistics and campaign performance metrics\",\n      icon: BarChart3,\n      status: \"✅ Complete\",\n      path: \"/dashboard\",\n      color: \"from-red-400 to-red-600\",\n      details: [\n        \"Total funds raised tracking\",\n        \"Active campaigns monitoring\",\n        \"Success rate analytics\",\n        \"Transaction history\",\n        \"Real-time updates\"\n      ]\n    },\n    {\n      title: \"Fiat Payment Integration\",\n      description: \"Stripe and Razorpay integration for credit card payments\",\n      icon: CreditCard,\n      status: \"🚧 Coming Soon\",\n      path: \"#\",\n      color: \"from-gray-400 to-gray-600\",\n      details: [\n        \"Credit/Debit card processing\",\n        \"Bank transfer support\",\n        \"Multi-currency fiat support\",\n        \"Payment method selection\",\n        \"Instant conversion to crypto\"\n      ]\n    },\n    {\n      title: \"Three.js 3D Effects\",\n      description: \"Immersive 3D visualizations and cyberpunk UI enhancements\",\n      icon: Globe,\n      status: \"🚧 Coming Soon\",\n      path: \"#\",\n      color: \"from-gray-400 to-gray-600\",\n      details: [\n        \"3D campaign visualization\",\n        \"Interactive funding meters\",\n        \"Particle effects\",\n        \"Holographic elements\",\n        \"Immersive user experience\"\n      ]\n    },\n    {\n      title: \"Social Features\",\n      description: \"User profiles, comments, and community interaction features\",\n      icon: Users,\n      status: \"🚧 Coming Soon\",\n      path: \"#\",\n      color: \"from-gray-400 to-gray-600\",\n      details: [\n        \"User profiles\",\n        \"Campaign comments\",\n        \"Social sharing\",\n        \"Follow creators\",\n        \"Community forums\"\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\" data-testid=\"feature-showcase\">\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold bg-gradient-to-r from-cyan-400 to-purple-600 bg-clip-text text-transparent mb-4\">\n          Platform Features\n        </h1>\n        <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n          Explore all the cutting-edge features of our Web3 crowdfunding platform. \n          Click on any feature to access it directly or learn more about its capabilities.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {features.map((feature, index) => (\n          <Card \n            key={index} \n            className=\"group hover:shadow-lg transition-all duration-300 border-2 hover:border-cyan-200 dark:hover:border-cyan-800\"\n            data-testid={`feature-card-${feature.title.toLowerCase().replace(/\\s+/g, '-')}`}\n          >\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className={`w-12 h-12 rounded-lg bg-gradient-to-r ${feature.color} flex items-center justify-center`}>\n                  <feature.icon className=\"w-6 h-6 text-white\" />\n                </div>\n                <Badge variant={feature.status.includes('Complete') ? 'default' : 'secondary'}>\n                  {feature.status}\n                </Badge>\n              </div>\n              <CardTitle className=\"text-xl\">{feature.title}</CardTitle>\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                {feature.description}\n              </p>\n\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-sm\">Key Features:</h4>\n                <ul className=\"space-y-1\">\n                  {feature.details.slice(0, 3).map((detail, i) => (\n                    <li key={i} className=\"flex items-center text-xs text-muted-foreground\">\n                      <CheckCircle className=\"w-3 h-3 mr-2 text-green-500 flex-shrink-0\" />\n                      {detail}\n                    </li>\n                  ))}\n                  {feature.details.length > 3 && (\n                    <li className=\"text-xs text-muted-foreground\">\n                      +{feature.details.length - 3} more features...\n                    </li>\n                  )}\n                </ul>\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                {feature.status.includes('Complete') ? (\n                  <Button asChild className=\"w-full group-hover:bg-gradient-to-r group-hover:from-cyan-500 group-hover:to-purple-600\">\n                    <Link href={feature.path} data-testid={`button-access-${feature.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      Access Feature\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Link>\n                  </Button>\n                ) : (\n                  <Button variant=\"outline\" className=\"w-full\" disabled>\n                    Coming Soon\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"mt-16 text-center\">\n        <Card className=\"max-w-2xl mx-auto\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-center gap-2\">\n              <Sparkles className=\"w-5 h-5 text-yellow-500\" />\n              Quick Start Guide\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n              <div className=\"space-y-2\">\n                <div className=\"w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold mx-auto\">\n                  1\n                </div>\n                <h4 className=\"font-semibold\">Complete KYC</h4>\n                <p className=\"text-muted-foreground\">\n                  Verify your identity to create campaigns\n                </p>\n                <Button size=\"sm\" asChild variant=\"outline\">\n                  <Link href=\"/kyc-verification\">Start KYC</Link>\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center font-bold mx-auto\">\n                  2\n                </div>\n                <h4 className=\"font-semibold\">Create Campaign</h4>\n                <p className=\"text-muted-foreground\">\n                  Launch your project with AI assistance\n                </p>\n                <Button size=\"sm\" asChild variant=\"outline\">\n                  <Link href=\"/create\">Create Now</Link>\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"w-8 h-8 bg-purple-500 text-white rounded-full flex items-center justify-center font-bold mx-auto\">\n                  3\n                </div>\n                <h4 className=\"font-semibold\">Accept Payments</h4>\n                <p className=\"text-muted-foreground\">\n                  Receive crypto contributions\n                </p>\n                <Button size=\"sm\" asChild variant=\"outline\">\n                  <Link href=\"/campaigns\">Explore</Link>\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"pt-4 border-t\">\n              <Button asChild size=\"lg\" className=\"bg-gradient-to-r from-cyan-500 to-purple-600\">\n                <Link href=\"/dashboard\" data-testid=\"button-view-dashboard\">\n                  View Dashboard\n                  <BarChart3 className=\"w-4 h-4 ml-2\" />\n                </Link>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10486},"client/src/pages/KYCVerification.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Upload, CheckCircle, AlertCircle, FileText } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst kycSchema = z.object({\n  documentType: z.string().min(1, \"Document type is required\"),\n  fullName: z.string().min(2, \"Full name must be at least 2 characters\"),\n  dateOfBirth: z.string().min(1, \"Date of birth is required\"),\n  nationality: z.string().min(1, \"Nationality is required\"),\n  address: z.string().min(10, \"Please provide a complete address\"),\n  phoneNumber: z.string().min(10, \"Please provide a valid phone number\"),\n  occupation: z.string().min(2, \"Occupation is required\"),\n  sourceOfFunds: z.string().min(10, \"Please explain your source of funds\"),\n});\n\ntype KycFormData = z.infer<typeof kycSchema>;\n\nexport default function KYCVerification() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  \n  const form = useForm<KycFormData>({\n    resolver: zodResolver(kycSchema),\n    defaultValues: {\n      documentType: \"\",\n      fullName: \"\",\n      dateOfBirth: \"\",\n      nationality: \"\",\n      address: \"\",\n      phoneNumber: \"\",\n      occupation: \"\",\n      sourceOfFunds: \"\",\n    },\n  });\n\n  const kycMutation = useMutation({\n    mutationFn: async (data: KycFormData) => {\n      // Convert files to base64 for storage\n      const filePromises = uploadedFiles.map(file => {\n        return new Promise<{ name: string; type: string; data: string }>((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onload = () => resolve({\n            name: file.name,\n            type: file.type,\n            data: reader.result as string,\n          });\n          reader.onerror = reject;\n          reader.readAsDataURL(file);\n        });\n      });\n\n      const files = await Promise.all(filePromises);\n      \n      return apiRequest(\"PUT\", \"/api/user/kyc\", {\n        documents: {\n          ...data,\n          uploadedFiles: files,\n          submissionDate: new Date().toISOString(),\n        },\n        status: \"pending\"\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"KYC Submitted Successfully\",\n        description: \"Your documents are being reviewed. You'll receive an update within 2-3 business days.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Submission Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    const validFiles = files.filter(file => {\n      const isValidType = ['image/jpeg', 'image/png', 'application/pdf'].includes(file.type);\n      const isValidSize = file.size <= 10 * 1024 * 1024; // 10MB limit\n      return isValidType && isValidSize;\n    });\n\n    if (validFiles.length !== files.length) {\n      toast({\n        title: \"Invalid Files\",\n        description: \"Please upload only JPG, PNG, or PDF files under 10MB each.\",\n        variant: \"destructive\",\n      });\n    }\n\n    setUploadedFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const removeFile = (index: number) => {\n    setUploadedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const getKycStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\": return \"text-green-600 bg-green-50\";\n      case \"rejected\": return \"text-red-600 bg-red-50\";\n      default: return \"text-yellow-600 bg-yellow-50\";\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\" data-testid=\"kyc-loading\">\n        <div className=\"text-center\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\" data-testid=\"kyc-verification-page\">\n      <div className=\"max-w-2xl mx-auto\">\n        <Card className=\"glass-morphism border-cyan-200 dark:border-cyan-800\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-3xl bg-gradient-to-r from-cyan-400 to-purple-600 bg-clip-text text-transparent\">\n              KYC Verification\n            </CardTitle>\n            <CardDescription>\n              Complete your identity verification to create and manage campaigns\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent>\n            {/* Current Status */}\n            <Alert className={`mb-6 ${getKycStatusColor(user.kycStatus || \"pending\")}`}>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Current Status: </strong>\n                {user.kycStatus === \"approved\" && \"✅ Verified - You can create campaigns\"}\n                {user.kycStatus === \"rejected\" && \"❌ Rejected - Please resubmit with correct documents\"}\n                {user.kycStatus === \"pending\" && \"⏳ Pending Review - Documents submitted and under review\"}\n                {!user.kycStatus && \"📋 Not Started - Please complete verification below\"}\n              </AlertDescription>\n            </Alert>\n\n            {(user.kycStatus !== \"approved\") && (\n              <form onSubmit={form.handleSubmit((data) => kycMutation.mutate(data))} className=\"space-y-6\">\n                {/* Document Type */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"document-type\">Document Type *</Label>\n                  <Select \n                    value={form.watch(\"documentType\")} \n                    onValueChange={(value) => form.setValue(\"documentType\", value)}\n                  >\n                    <SelectTrigger data-testid=\"select-document-type\">\n                      <SelectValue placeholder=\"Select document type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"passport\">Passport</SelectItem>\n                      <SelectItem value=\"driver_license\">Driver's License</SelectItem>\n                      <SelectItem value=\"national_id\">National ID Card</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.documentType && (\n                    <p className=\"text-red-500 text-sm\">{form.formState.errors.documentType.message}</p>\n                  )}\n                </div>\n\n                {/* Personal Information */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"full-name\">Full Name *</Label>\n                    <Input \n                      id=\"full-name\"\n                      {...form.register(\"fullName\")}\n                      placeholder=\"As shown on your ID\"\n                      data-testid=\"input-full-name\"\n                    />\n                    {form.formState.errors.fullName && (\n                      <p className=\"text-red-500 text-sm\">{form.formState.errors.fullName.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"date-of-birth\">Date of Birth *</Label>\n                    <Input \n                      id=\"date-of-birth\"\n                      type=\"date\"\n                      {...form.register(\"dateOfBirth\")}\n                      data-testid=\"input-date-of-birth\"\n                    />\n                    {form.formState.errors.dateOfBirth && (\n                      <p className=\"text-red-500 text-sm\">{form.formState.errors.dateOfBirth.message}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"nationality\">Nationality *</Label>\n                    <Input \n                      id=\"nationality\"\n                      {...form.register(\"nationality\")}\n                      placeholder=\"e.g., United States\"\n                      data-testid=\"input-nationality\"\n                    />\n                    {form.formState.errors.nationality && (\n                      <p className=\"text-red-500 text-sm\">{form.formState.errors.nationality.message}</p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone Number *</Label>\n                    <Input \n                      id=\"phone\"\n                      {...form.register(\"phoneNumber\")}\n                      placeholder=\"+1 (555) 123-4567\"\n                      data-testid=\"input-phone-number\"\n                    />\n                    {form.formState.errors.phoneNumber && (\n                      <p className=\"text-red-500 text-sm\">{form.formState.errors.phoneNumber.message}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Complete Address *</Label>\n                  <Textarea \n                    id=\"address\"\n                    {...form.register(\"address\")}\n                    placeholder=\"Street address, city, state/province, postal code, country\"\n                    data-testid=\"textarea-address\"\n                  />\n                  {form.formState.errors.address && (\n                    <p className=\"text-red-500 text-sm\">{form.formState.errors.address.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"occupation\">Occupation *</Label>\n                  <Input \n                    id=\"occupation\"\n                    {...form.register(\"occupation\")}\n                    placeholder=\"Your current job title or profession\"\n                    data-testid=\"input-occupation\"\n                  />\n                  {form.formState.errors.occupation && (\n                    <p className=\"text-red-500 text-sm\">{form.formState.errors.occupation.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"source-of-funds\">Source of Funds *</Label>\n                  <Textarea \n                    id=\"source-of-funds\"\n                    {...form.register(\"sourceOfFunds\")}\n                    placeholder=\"Explain where your funds come from (e.g., salary, savings, investments)\"\n                    data-testid=\"textarea-source-of-funds\"\n                  />\n                  {form.formState.errors.sourceOfFunds && (\n                    <p className=\"text-red-500 text-sm\">{form.formState.errors.sourceOfFunds.message}</p>\n                  )}\n                </div>\n\n                {/* File Upload */}\n                <div className=\"space-y-4\">\n                  <Label>Upload Documents *</Label>\n                  <div className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6\">\n                    <div className=\"text-center\">\n                      <Upload className=\"mx-auto h-12 w-12 text-gray-400\" />\n                      <div className=\"mt-4\">\n                        <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                          <span className=\"mt-2 block text-sm font-medium text-gray-900 dark:text-gray-100\">\n                            Upload ID Documents\n                          </span>\n                          <input\n                            id=\"file-upload\"\n                            type=\"file\"\n                            multiple\n                            accept=\".jpg,.jpeg,.png,.pdf\"\n                            onChange={handleFileUpload}\n                            className=\"hidden\"\n                            data-testid=\"input-file-upload\"\n                          />\n                        </label>\n                        <p className=\"mt-1 text-xs text-gray-500\">\n                          JPG, PNG or PDF up to 10MB each\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Uploaded Files */}\n                  {uploadedFiles.length > 0 && (\n                    <div className=\"space-y-2\">\n                      {uploadedFiles.map((file, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <FileText className=\"h-5 w-5 text-blue-500\" />\n                            <span className=\"text-sm\">{file.name}</span>\n                            <span className=\"text-xs text-gray-500\">\n                              ({(file.size / 1024 / 1024).toFixed(1)} MB)\n                            </span>\n                          </div>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeFile(index)}\n                            data-testid={`button-remove-file-${index}`}\n                          >\n                            Remove\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {/* Submit Button */}\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={kycMutation.isPending || uploadedFiles.length === 0}\n                  data-testid=\"button-submit-kyc\"\n                >\n                  {kycMutation.isPending ? \"Submitting...\" : \"Submit for Verification\"}\n                </Button>\n              </form>\n            )}\n\n            {user.kycStatus === \"approved\" && (\n              <div className=\"text-center py-8\">\n                <CheckCircle className=\"mx-auto h-16 w-16 text-green-500 mb-4\" />\n                <h3 className=\"text-xl font-semibold text-green-700 dark:text-green-400\">\n                  Verification Complete!\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n                  You can now create and manage campaigns on the platform.\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":15189},"client/src/pages/admin.tsx":{"content":"import { AdminDashboard } from \"@/components/admin/AdminDashboard\";\nimport { MainNavigation } from \"@/components/navigation/MainNavigation\";\nimport { ThreeBackground } from \"@/components/three/ThreeBackground\";\n\nexport default function AdminPage() {\n  return (\n    <div className=\"min-h-screen bg-background relative\">\n      <ThreeBackground />\n      <MainNavigation />\n      <div className=\"relative z-10\">\n        <AdminDashboard />\n      </div>\n    </div>\n  );\n}","size_bytes":465},"client/src/pages/campaign-detail.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport CampaignStats from \"@/components/campaign/campaign-stats\";\nimport { \n  Calendar, \n  Users, \n  Target, \n  ExternalLink, \n  Heart, \n  Share2, \n  Flag,\n  Wallet,\n  TrendingUp,\n  MessageCircle,\n  Clock,\n  CheckCircle,\n  AlertCircle\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function CampaignDetail() {\n  const { id } = useParams();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [contributionAmount, setContributionAmount] = useState(\"\");\n  const [contributionMessage, setContributionMessage] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"story\");\n\n  const { data: campaign, isLoading } = useQuery({\n    queryKey: [\"/api/campaigns\", id],\n    retry: false,\n  });\n\n  const { data: contributions = [] } = useQuery({\n    queryKey: [\"/api/contributions\", id],\n    retry: false,\n  });\n\n  const { data: transactions = [] } = useQuery({\n    queryKey: [\"/api/transactions\", id],\n    retry: false,\n  });\n\n  const contributeMutation = useMutation({\n    mutationFn: async (data: {\n      campaignId: string;\n      amount: string;\n      message?: string;\n      paymentMethod: string;\n    }) => {\n      return await apiRequest(\"POST\", \"/api/contributions\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Contribution Successful!\",\n        description: \"Thank you for supporting this campaign.\",\n      });\n      setContributionAmount(\"\");\n      setContributionMessage(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\", id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/contributions\", id] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You need to log in to contribute to campaigns.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 2000);\n        return;\n      }\n      toast({\n        title: \"Contribution Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar />\n        <div className=\"pt-16 flex justify-center items-center min-h-screen\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 animate-spin border-2 border-cyber-blue border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading campaign...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!campaign) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar />\n        <div className=\"pt-16 flex justify-center items-center min-h-screen\">\n          <Card className=\"glass-morphism max-w-md\">\n            <CardContent className=\"p-8 text-center\">\n              <AlertCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Campaign not found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                The campaign you're looking for doesn't exist or has been removed.\n              </p>\n              <Link href=\"/campaigns\">\n                <Button>Browse Campaigns</Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const progress = (parseFloat(campaign.currentAmount) / parseFloat(campaign.goalAmount)) * 100;\n  const daysLeft = Math.max(0, Math.ceil((new Date(campaign.deadline).getTime() - Date.now()) / (1000 * 60 * 60 * 24)));\n  const isCompleted = campaign.status === \"completed\";\n  const isOwner = user?.id === campaign.creatorId;\n\n  const handleContribute = () => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to contribute to this campaign.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!contributionAmount || parseFloat(contributionAmount) <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid contribution amount.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    contributeMutation.mutate({\n      campaignId: campaign.id,\n      amount: contributionAmount,\n      message: contributionMessage,\n      paymentMethod: \"crypto\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      <div className=\"pt-16\">\n        {/* Hero Section */}\n        <section className=\"relative py-12 bg-gradient-to-b from-background to-muted/20\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* Main Content */}\n              <div className=\"lg:col-span-2\">\n                <motion.div\n                  initial={{ opacity: 0, y: 30 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.8 }}\n                >\n                  {/* Campaign Image */}\n                  <div className=\"relative rounded-2xl overflow-hidden mb-6 h-80\">\n                    <img \n                      src={campaign.imageUrl || \"https://images.unsplash.com/photo-1622979135225-d2ba269cf1ac?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=600\"} \n                      alt={campaign.title}\n                      className=\"w-full h-full object-cover\"\n                    />\n                    <div className=\"absolute top-4 left-4\">\n                      <Badge className={`bg-cyber-green/90 px-3 py-1 text-sm font-medium`}>\n                        {campaign.category}\n                      </Badge>\n                    </div>\n                    <div className=\"absolute top-4 right-4 flex gap-2\">\n                      <Button variant=\"outline\" size=\"icon\" className=\"glass-morphism\">\n                        <Heart className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"outline\" size=\"icon\" className=\"glass-morphism\">\n                        <Share2 className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"outline\" size=\"icon\" className=\"glass-morphism\">\n                        <Flag className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Campaign Title and Meta */}\n                  <div className=\"mb-6\">\n                    <h1 className=\"text-3xl md:text-4xl font-black mb-4 gradient-text\">\n                      {campaign.title}\n                    </h1>\n                    <p className=\"text-lg text-muted-foreground\">\n                      {campaign.description}\n                    </p>\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* Sidebar */}\n              <div className=\"lg:col-span-1\">\n                <motion.div\n                  initial={{ opacity: 0, x: 30 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.8, delay: 0.2 }}\n                  className=\"sticky top-24\"\n                >\n                  <Card className=\"glass-morphism\">\n                    <CardContent className=\"p-6\">\n                      {/* Progress */}\n                      <div className=\"mb-6\">\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <span className=\"text-2xl font-bold\">\n                            {campaign.currentAmount} {campaign.currency}\n                          </span>\n                          <Badge variant=\"secondary\" className=\"font-mono\">\n                            {Math.round(progress)}%\n                          </Badge>\n                        </div>\n                        <Progress value={progress} className=\"h-3 mb-2 progress-glow\" />\n                        <div className=\"text-sm text-muted-foreground\">\n                          raised of {campaign.goalAmount} {campaign.currency} goal\n                        </div>\n                      </div>\n\n                      {/* Stats */}\n                      <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-cyber-blue\">\n                            {campaign.backerCount}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">Backers</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-2xl font-bold text-cyber-green\">\n                            {daysLeft}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {isCompleted ? \"Completed\" : \"Days left\"}\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Contribution Form */}\n                      {!isCompleted && !isOwner && (\n                        <div className=\"space-y-4\">\n                          <div>\n                            <label className=\"block text-sm font-medium mb-2\">\n                              Contribution Amount (ETH)\n                            </label>\n                            <Input\n                              type=\"number\"\n                              step=\"0.01\"\n                              min=\"0\"\n                              placeholder=\"0.1\"\n                              value={contributionAmount}\n                              onChange={(e) => setContributionAmount(e.target.value)}\n                              className=\"form-focus\"\n                            />\n                          </div>\n                          \n                          <div>\n                            <label className=\"block text-sm font-medium mb-2\">\n                              Message (Optional)\n                            </label>\n                            <Textarea\n                              placeholder=\"Leave a message of support...\"\n                              value={contributionMessage}\n                              onChange={(e) => setContributionMessage(e.target.value)}\n                              className=\"form-focus\"\n                              rows={3}\n                            />\n                          </div>\n\n                          <Button\n                            className=\"w-full bg-gradient-to-r from-cyber-blue to-cyber-green hover:scale-105 transition-all duration-300\"\n                            onClick={handleContribute}\n                            disabled={contributeMutation.isPending}\n                          >\n                            {contributeMutation.isPending ? (\n                              <>\n                                <div className=\"w-4 h-4 animate-spin border-2 border-white border-t-transparent rounded-full mr-2\"></div>\n                                Contributing...\n                              </>\n                            ) : (\n                              <>\n                                <Wallet className=\"w-4 h-4 mr-2\" />\n                                Back This Project\n                              </>\n                            )}\n                          </Button>\n                        </div>\n                      )}\n\n                      {/* Owner Actions */}\n                      {isOwner && (\n                        <div className=\"space-y-2\">\n                          <Button className=\"w-full\" variant=\"outline\">\n                            <TrendingUp className=\"w-4 h-4 mr-2\" />\n                            View Analytics\n                          </Button>\n                          <Button className=\"w-full\" variant=\"outline\">\n                            <MessageCircle className=\"w-4 h-4 mr-2\" />\n                            Post Update\n                          </Button>\n                        </div>\n                      )}\n\n                      {/* Credibility Score */}\n                      {parseFloat(campaign.credibilityScore) > 0 && (\n                        <div className=\"mt-6 pt-4 border-t border-muted\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-sm text-muted-foreground\">Credibility Score</span>\n                            <Badge className=\"bg-cyber-green/20 text-cyber-green\">\n                              {campaign.credibilityScore}/10\n                            </Badge>\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Campaign Details Tabs */}\n        <section className=\"py-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"glass-morphism w-full justify-start mb-8\">\n                <TabsTrigger value=\"story\">Story</TabsTrigger>\n                <TabsTrigger value=\"updates\">Updates</TabsTrigger>\n                <TabsTrigger value=\"backers\">Backers</TabsTrigger>\n                <TabsTrigger value=\"comments\">Comments</TabsTrigger>\n                <TabsTrigger value=\"blockchain\">On-Chain</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"story\">\n                <Card className=\"glass-morphism\">\n                  <CardContent className=\"p-8\">\n                    <h3 className=\"text-2xl font-bold mb-6\">About This Project</h3>\n                    <div className=\"prose prose-invert max-w-none\">\n                      <p className=\"text-muted-foreground leading-relaxed\">\n                        {campaign.description}\n                      </p>\n                      \n                      {/* Sample story content */}\n                      <div className=\"mt-8 space-y-6\">\n                        <div>\n                          <h4 className=\"text-xl font-semibold mb-3\">The Problem</h4>\n                          <p className=\"text-muted-foreground\">\n                            Traditional solutions lack the innovation and blockchain integration needed for modern users.\n                          </p>\n                        </div>\n                        \n                        <div>\n                          <h4 className=\"text-xl font-semibold mb-3\">Our Solution</h4>\n                          <p className=\"text-muted-foreground\">\n                            This project represents the next evolution in {campaign.category.toLowerCase()} technology, \n                            combining cutting-edge features with user-friendly design.\n                          </p>\n                        </div>\n\n                        <div>\n                          <h4 className=\"text-xl font-semibold mb-3\">Why Support Us?</h4>\n                          <ul className=\"text-muted-foreground space-y-2\">\n                            <li>• Experienced team with proven track record</li>\n                            <li>• Transparent development process</li>\n                            <li>• Community-driven approach</li>\n                            <li>• Sustainable and scalable solution</li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"updates\">\n                <Card className=\"glass-morphism\">\n                  <CardContent className=\"p-8\">\n                    <h3 className=\"text-2xl font-bold mb-6\">Project Updates</h3>\n                    {campaign.updates && campaign.updates.length > 0 ? (\n                      <div className=\"space-y-6\">\n                        {campaign.updates.map((update, index) => (\n                          <div key={index} className=\"border-l-2 border-cyber-blue pl-4\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <Clock className=\"w-4 h-4 text-cyber-blue\" />\n                              <span className=\"text-sm text-muted-foreground\">\n                                {formatDistanceToNow(new Date(update.createdAt || Date.now()), { addSuffix: true })}\n                              </span>\n                            </div>\n                            <h4 className=\"font-semibold mb-2\">{update.title}</h4>\n                            <p className=\"text-muted-foreground\">{update.content}</p>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No updates yet</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"backers\">\n                <Card className=\"glass-morphism\">\n                  <CardContent className=\"p-8\">\n                    <h3 className=\"text-2xl font-bold mb-6\">Backers ({contributions.length})</h3>\n                    {contributions.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {contributions.map((contribution) => (\n                          <div key={contribution.id} className=\"flex items-center justify-between p-4 bg-muted/30 rounded-lg\">\n                            <div className=\"flex items-center gap-3\">\n                              <Avatar>\n                                <AvatarFallback>\n                                  {contribution.isAnonymous ? \"?\" : \"U\"}\n                                </AvatarFallback>\n                              </Avatar>\n                              <div>\n                                <div className=\"font-medium\">\n                                  {contribution.isAnonymous ? \"Anonymous\" : \"Backer\"}\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {formatDistanceToNow(new Date(contribution.createdAt), { addSuffix: true })}\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-mono font-bold\">\n                                {contribution.amount} {contribution.currency}\n                              </div>\n                              {contribution.message && (\n                                <div className=\"text-sm text-muted-foreground italic\">\n                                  \"{contribution.message}\"\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-muted-foreground\">No backers yet</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"comments\">\n                <Card className=\"glass-morphism\">\n                  <CardContent className=\"p-8\">\n                    <h3 className=\"text-2xl font-bold mb-6\">Comments</h3>\n                    <div className=\"text-center py-8\">\n                      <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\">Comments feature coming soon</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"blockchain\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                  <Card className=\"glass-morphism\">\n                    <CardHeader>\n                      <CardTitle>Smart Contract</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <label className=\"text-sm text-muted-foreground\">Contract Address</label>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <code className=\"bg-muted px-2 py-1 rounded text-sm font-mono\">\n                              {campaign.smartContractAddress || \"Not deployed\"}\n                            </code>\n                            {campaign.smartContractAddress && (\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <ExternalLink className=\"w-4 h-4\" />\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <Separator />\n                        \n                        <div>\n                          <label className=\"text-sm text-muted-foreground\">Network</label>\n                          <div className=\"mt-1\">\n                            <Badge className=\"bg-purple-500/20 text-purple-400\">\n                              Polygon Mumbai Testnet\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"glass-morphism\">\n                    <CardHeader>\n                      <CardTitle>Recent Transactions</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {transactions.length > 0 ? (\n                        <div className=\"space-y-3\">\n                          {transactions.slice(0, 5).map((tx) => (\n                            <div key={tx.id} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                              <div>\n                                <div className=\"text-sm font-medium\">\n                                  {tx.transactionType === \"contribution\" ? \"+\" : \"-\"}{tx.amount} ETH\n                                </div>\n                                <div className=\"text-xs text-muted-foreground font-mono\">\n                                  {tx.hash.slice(0, 10)}...{tx.hash.slice(-6)}\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <Badge className={\n                                  tx.transactionType === \"contribution\" \n                                    ? \"bg-cyber-green/20 text-cyber-green\" \n                                    : \"bg-cyber-purple/20 text-cyber-purple\"\n                                }>\n                                  {tx.transactionType}\n                                </Badge>\n                                <div className=\"text-xs text-muted-foreground mt-1\">\n                                  {formatDistanceToNow(new Date(tx.createdAt), { addSuffix: true })}\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-4\">\n                          <p className=\"text-muted-foreground\">No transactions yet</p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":25284},"client/src/pages/campaigns.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { PageLayout } from \"@/components/layout/PageLayout\";\nimport CampaignCard from \"@/components/campaign/campaign-card\";\nimport { Search, Filter, Loader2 } from \"lucide-react\";\nimport type { Campaign } from \"@shared/schema\";\n\nexport default function Campaigns() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  \n  const { data: campaigns = [], isLoading } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\", selectedCategory !== \"all\" ? selectedCategory : undefined],\n    retry: false,\n  });\n\n  const categories = [\n    { id: \"all\", label: \"All Categories\" },\n    { id: \"Technology\", label: \"Technology\" },\n    { id: \"Gaming\", label: \"Gaming\" },\n    { id: \"DeFi\", label: \"DeFi\" },\n    { id: \"Creative\", label: \"Creative\" },\n    { id: \"GreenTech\", label: \"GreenTech\" },\n    { id: \"Research\", label: \"Research\" },\n  ];\n\n  const filteredCampaigns = campaigns.filter(campaign =>\n    campaign.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    campaign.description.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <PageLayout backTo=\"/\" backLabel=\"Back to Home\">\n      {/* Header */}\n      <section className=\"py-12 bg-gradient-to-b from-background to-muted/20\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              className=\"text-center mb-8\"\n            >\n              <h1 className=\"text-4xl md:text-6xl font-black mb-4 gradient-text\">\n                Discover Campaigns\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n                Explore groundbreaking projects and help bring innovative ideas to life\n              </p>\n            </motion.div>\n\n            {/* Search and Filters */}\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              className=\"max-w-4xl mx-auto\"\n            >\n              {/* Search Bar */}\n              <div className=\"relative mb-6\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n                <Input\n                  placeholder=\"Search campaigns...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 glass-morphism border-white/20 focus:border-cyber-blue form-focus\"\n                />\n              </div>\n\n              {/* Category Filters */}\n              <div className=\"flex flex-wrap justify-center gap-4\">\n                {categories.map((category) => (\n                  <Button\n                    key={category.id}\n                    variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n                    onClick={() => setSelectedCategory(category.id)}\n                    className={\n                      selectedCategory === category.id\n                        ? \"bg-gradient-to-r from-cyber-blue to-cyber-purple\"\n                        : \"glass-morphism hover:bg-cyber-blue/20 border-cyber-blue/50\"\n                    }\n                  >\n                    {category.label}\n                  </Button>\n                ))}\n              </div>\n            </motion.div>\n          </div>\n        </section>\n\n        {/* Campaigns Grid */}\n        <section className=\"py-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            {isLoading ? (\n              <div className=\"flex justify-center items-center py-20\">\n                <Loader2 className=\"w-8 h-8 animate-spin text-cyber-blue\" />\n                <span className=\"ml-2 text-muted-foreground\">Loading campaigns...</span>\n              </div>\n            ) : filteredCampaigns.length === 0 ? (\n              <Card className=\"glass-morphism max-w-md mx-auto\">\n                <CardContent className=\"p-8 text-center\">\n                  <Filter className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No campaigns found</h3>\n                  <p className=\"text-muted-foreground\">\n                    Try adjusting your search or filter criteria\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ duration: 0.8 }}\n                className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\"\n              >\n                {filteredCampaigns.map((campaign, index) => (\n                  <motion.div\n                    key={campaign.id}\n                    initial={{ opacity: 0, y: 30 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.5, delay: index * 0.1 }}\n                  >\n                    <CampaignCard campaign={campaign} />\n                  </motion.div>\n                ))}\n              </motion.div>\n            )}\n\n            {/* Load More Button */}\n            {filteredCampaigns.length > 0 && (\n              <div className=\"text-center mt-12\">\n                <Button\n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"glass-morphism hover:bg-white/20\"\n                >\n                  Load More Campaigns\n                </Button>\n              </div>\n            )}\n        </div>\n      </section>\n    </PageLayout>\n  );\n}\n","size_bytes":5979},"client/src/pages/create-campaign.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MainNavigation } from \"@/components/navigation/MainNavigation\";\nimport { ThreeBackground } from \"@/components/three/ThreeBackground\";\nimport Footer from \"@/components/layout/footer\";\nimport CampaignAssistant from \"@/components/ai/campaign-assistant\";\nimport KYCStatus from \"@/components/kyc/kyc-status\";\nimport { insertCampaignSchema } from \"@shared/schema\";\nimport { \n  Lightbulb, \n  Target, \n  Calendar, \n  Image as ImageIcon, \n  Tag,\n  Rocket,\n  AlertTriangle,\n  CheckCircle,\n  Clock\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nconst createCampaignFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  category: z.string().min(1, \"Category is required\"),\n  fundingType: z.string().min(1, \"Funding type is required\"),\n  goalAmount: z.string().min(1, \"Goal amount is required\"),\n  currency: z.string().default(\"ETH\"),\n  imageUrl: z.string().optional(),\n  tags: z.string().optional(),\n});\n\ntype CreateCampaignForm = z.infer<typeof createCampaignFormSchema>;\n\nexport default function CreateCampaign() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [currentStep, setCurrentStep] = useState(1);\n  const totalSteps = 4;\n  const [canCreateCampaign, setCanCreateCampaign] = useState<{ canCreate: boolean; reason?: string } | null>(null);\n\n  const form = useForm<CreateCampaignForm>({\n    resolver: zodResolver(createCampaignFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      category: \"\",\n      fundingType: \"reward\",\n      goalAmount: \"\",\n      currency: \"ETH\",\n      imageUrl: \"\",\n      tags: \"\",\n    },\n  });\n\n  const { data: userProfile } = useQuery({\n    queryKey: [\"/api/user\"],\n    enabled: isAuthenticated,\n    refetchOnWindowFocus: true, // Ensure fresh data when coming back to the page\n  });\n\n  // Get fresh KYC status\n  const { data: kycStatus } = useQuery({\n    queryKey: [\"/api/kyc/status\"],\n    enabled: isAuthenticated,\n    refetchOnWindowFocus: true,\n  });\n\n  // Use the most up-to-date KYC status\n  const currentKycStatus = kycStatus?.status || userProfile?.kycStatus || user?.kycStatus;\n\n  // Check if user can create campaigns\n  const { data: campaignEligibility } = useQuery<{canCreate: boolean, reason?: string}>({\n    queryKey: [\"/api/user/can-create-campaign\"],\n    enabled: isAuthenticated && currentKycStatus === \"approved\",\n  });\n\n  useEffect(() => {\n    if (campaignEligibility) {\n      setCanCreateCampaign(campaignEligibility);\n    }\n  }, [campaignEligibility]);\n\n  const createCampaignMutation = useMutation({\n    mutationFn: async (data: CreateCampaignForm) => {\n      const { tags, ...campaignData } = data;\n      const tagsArray = tags ? tags.split(\",\").map(tag => tag.trim()).filter(Boolean) : [];\n      \n      return await apiRequest(\"POST\", \"/api/campaigns\", {\n        ...campaignData,\n        tags: tagsArray,\n        deadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Campaign Created Successfully!\",\n        description: \"Your campaign is now live and ready for backers.\",\n      });\n      setLocation(`/campaigns/${data.id}`);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You need to complete KYC verification to create campaigns.\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/auth\";\n        }, 2000);\n        return;\n      }\n      toast({\n        title: \"Campaign Creation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateCampaignForm) => {\n    console.log(\"Form submission triggered:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    \n    if (!canCreateCampaign?.canCreate) {\n      toast({\n        title: \"Cannot Create Campaign\",\n        description: canCreateCampaign?.reason || \"You are not eligible to create campaigns at this time.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createCampaignMutation.mutate(data);\n  };\n\n  const nextStep = () => {\n    if (currentStep < totalSteps) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const validateCurrentStep = () => {\n    const values = form.getValues();\n    switch (currentStep) {\n      case 1:\n        return values.title && values.description;\n      case 2:\n        return values.category && values.fundingType;\n      case 3:\n        return values.goalAmount && values.currency;\n      case 4:\n        return true; // Optional fields in step 4\n      default:\n        return false;\n    }\n  };\n\n  const categories = [\n    { value: \"Technology\", label: \"Technology\", color: \"bg-cyber-green\" },\n    { value: \"Gaming\", label: \"Gaming\", color: \"bg-cyber-purple\" },\n    { value: \"DeFi\", label: \"DeFi\", color: \"bg-cyber-yellow\" },\n    { value: \"Creative\", label: \"Creative\", color: \"bg-cyber-pink\" },\n    { value: \"GreenTech\", label: \"Green Technology\", color: \"bg-cyber-green\" },\n    { value: \"Research\", label: \"Research\", color: \"bg-cyan-400\" },\n  ];\n\n  const fundingTypes = [\n    { value: \"donation\", label: \"Donation\", description: \"Keep-it-all funding model\" },\n    { value: \"reward\", label: \"Reward\", description: \"Offer rewards to backers\" },\n    { value: \"equity\", label: \"Equity Simulation\", description: \"Share future value with backers\" },\n  ];\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background relative\">\n        <ThreeBackground />\n        <MainNavigation />\n        <div className=\"relative z-10 pt-16 flex justify-center items-center min-h-screen\">\n          <Card className=\"glass-morphism max-w-md\">\n            <CardContent className=\"p-8 text-center\">\n              <AlertTriangle className=\"w-12 h-12 text-cyber-yellow mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Authentication Required</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                You need to be logged in to create campaigns.\n              </p>\n              <Button \n                onClick={() => window.location.href = '/auth'}\n                className=\"bg-gradient-to-r from-cyber-blue to-cyber-purple\"\n              >\n                Log In\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const progress = (currentStep / totalSteps) * 100;\n\n  return (\n    <div className=\"min-h-screen bg-background relative\">\n      <ThreeBackground />\n      <MainNavigation />\n      \n      <div className=\"relative z-10 pt-16\">\n        {/* Header */}\n        <section className=\"py-12 bg-gradient-to-b from-background to-muted/20\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              className=\"text-center mb-8\"\n            >\n              <h1 className=\"text-4xl md:text-6xl font-black mb-4 gradient-text\">\n                Launch Your Vision\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n                Turn your innovative ideas into reality with our AI-powered campaign creation tools\n              </p>\n            </motion.div>\n\n            {/* Progress Bar */}\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"mb-8\"\n            >\n              <div className=\"flex justify-between items-center mb-6\">\n                <span className=\"text-sm text-muted-foreground\">Step {currentStep} of {totalSteps}</span>\n                <span className=\"text-sm text-muted-foreground\">{Math.round(progress)}% Complete</span>\n              </div>\n              <Progress value={progress} className=\"h-2 progress-glow mb-6\" />\n              \n              {/* Step Indicators */}\n              <div className=\"flex justify-between\">\n                {[1, 2, 3, 4].map((step) => (\n                  <div key={step} className=\"flex flex-col items-center\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors ${\n                      step < currentStep ? \"bg-cyber-green text-white\" :\n                      step === currentStep ? \"bg-cyber-blue text-white\" :\n                      \"bg-muted text-muted-foreground\"\n                    }`}>\n                      {step < currentStep ? <CheckCircle className=\"w-4 h-4\" /> : step}\n                    </div>\n                    <span className=\"text-xs mt-2 text-center max-w-20\">\n                      {step === 1 && \"Basics\"}\n                      {step === 2 && \"Details\"}\n                      {step === 3 && \"Funding\"}\n                      {step === 4 && \"Media\"}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </motion.div>\n          </div>\n        </section>\n\n        {/* KYC and Eligibility Status Check */}\n        {currentKycStatus !== \"approved\" ? (\n          <section className=\"py-8\">\n            <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n              <KYCStatus />\n            </div>\n          </section>\n        ) : canCreateCampaign && !canCreateCampaign.canCreate ? (\n          <section className=\"py-8\">\n            <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n              <Card className=\"glass-morphism border-red-500/50\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <AlertTriangle className=\"w-6 h-6 text-red-400\" />\n                    <div>\n                      <h3 className=\"font-semibold text-red-400\">Campaign Creation Restricted</h3>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {canCreateCampaign.reason}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </section>\n        ) : null}\n\n        {/* Main Form */}\n        <section className=\"py-16\">\n          <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* Form */}\n              <div className=\"lg:col-span-2\">\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n                    {/* Step 1: Campaign Basics */}\n                    {currentStep === 1 && (\n                      <Card className=\"glass-morphism\">\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <Lightbulb className=\"w-5 h-5 text-cyber-blue\" />\n                            Step 1: Campaign Basics\n                          </CardTitle>\n                          <p className=\"text-sm text-muted-foreground\">Tell us about your project idea and vision</p>\n                        </CardHeader>\n                        <CardContent className=\"space-y-6\">\n                          <FormField\n                            control={form.control}\n                            name=\"title\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Campaign Title *</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    placeholder=\"Revolutionary IoT Smart Home System\"\n                                    className=\"form-focus\"\n                                    {...field}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"description\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Description *</FormLabel>\n                                <FormControl>\n                                  <Textarea\n                                    placeholder=\"Tell the world about your innovative project. What problem does it solve? What makes it unique?\"\n                                    className=\"form-focus min-h-[120px]\"\n                                    {...field}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {/* Step 2: Project Details */}\n                    {currentStep === 2 && (\n                      <Card className=\"glass-morphism\">\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <Tag className=\"w-5 h-5 text-cyber-purple\" />\n                            Step 2: Project Details\n                          </CardTitle>\n                          <p className=\"text-sm text-muted-foreground\">Categorize your project and choose your funding model</p>\n                        </CardHeader>\n                        <CardContent className=\"space-y-6\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                            <FormField\n                              control={form.control}\n                              name=\"category\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Category *</FormLabel>\n                                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                    <FormControl>\n                                      <SelectTrigger className=\"form-focus\">\n                                        <SelectValue placeholder=\"Select category\" />\n                                      </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent>\n                                      {categories.map((category) => (\n                                        <SelectItem key={category.value} value={category.value}>\n                                          <div className=\"flex items-center gap-2\">\n                                            <div className={`w-3 h-3 rounded-full ${category.color}/70`}></div>\n                                            {category.label}\n                                          </div>\n                                        </SelectItem>\n                                      ))}\n                                    </SelectContent>\n                                  </Select>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={form.control}\n                              name=\"fundingType\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Funding Model *</FormLabel>\n                                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                    <FormControl>\n                                      <SelectTrigger className=\"form-focus\">\n                                        <SelectValue placeholder=\"Select funding type\" />\n                                      </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent>\n                                      {fundingTypes.map((type) => (\n                                        <SelectItem key={type.value} value={type.value}>\n                                          <div>\n                                            <div className=\"font-medium\">{type.label}</div>\n                                            <div className=\"text-xs text-muted-foreground\">{type.description}</div>\n                                          </div>\n                                        </SelectItem>\n                                      ))}\n                                    </SelectContent>\n                                  </Select>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {/* Step 3: Funding Details */}\n                    {currentStep === 3 && (\n                      <Card className=\"glass-morphism\">\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <Target className=\"w-5 h-5 text-cyber-green\" />\n                            Step 3: Funding Details\n                          </CardTitle>\n                          <p className=\"text-sm text-muted-foreground\">Set your funding goal and campaign duration</p>\n                        </CardHeader>\n                        <CardContent className=\"space-y-6\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                            <FormField\n                              control={form.control}\n                              name=\"goalAmount\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Funding Goal *</FormLabel>\n                                  <FormControl>\n                                    <Input\n                                      type=\"number\"\n                                      step=\"0.01\"\n                                      min=\"0\"\n                                      placeholder=\"100\"\n                                      className=\"form-focus\"\n                                      {...field}\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={form.control}\n                              name=\"currency\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Currency</FormLabel>\n                                  <Select onValueChange={field.onChange} defaultValue={field.value || \"\"}>\n                                    <FormControl>\n                                      <SelectTrigger className=\"form-focus\">\n                                        <SelectValue />\n                                      </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent>\n                                      <SelectItem value=\"ETH\">ETH</SelectItem>\n                                      <SelectItem value=\"MATIC\">MATIC</SelectItem>\n                                      <SelectItem value=\"USDC\">USDC</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {/* Step 4: Media & Tags */}\n                    {currentStep === 4 && (\n                      <Card className=\"glass-morphism\">\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <ImageIcon className=\"w-5 h-5 text-cyber-purple\" />\n                            Step 4: Media & Tags\n                          </CardTitle>\n                          <p className=\"text-sm text-muted-foreground\">Add visual elements and tags to make your campaign discoverable</p>\n                        </CardHeader>\n                        <CardContent className=\"space-y-6\">\n                          <FormField\n                            control={form.control}\n                            name=\"imageUrl\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Campaign Image URL (Optional)</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    placeholder=\"https://example.com/image.jpg\"\n                                    className=\"form-focus\"\n                                    {...field}\n                                    value={field.value || \"\"}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"tags\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Tags (comma separated, optional)</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    placeholder=\"blockchain, innovation, IoT, sustainable\"\n                                    className=\"form-focus\"\n                                    {...field}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {/* Navigation */}\n                    <div className=\"flex justify-between items-center\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={prevStep}\n                        disabled={currentStep === 1}\n                      >\n                        Previous\n                      </Button>\n                      \n                      {currentKycStatus !== \"approved\" && (\n                        <div className=\"text-sm text-muted-foreground\">\n                          <AlertTriangle className=\"w-4 h-4 inline mr-1\" />\n                          KYC verification required (Current: {currentKycStatus?.replace('_', ' ').toUpperCase() || 'NOT SUBMITTED'})\n                        </div>\n                      )}\n                      \n                      {currentStep < totalSteps ? (\n                        <Button \n                          type=\"button\"\n                          onClick={nextStep}\n                          disabled={!validateCurrentStep()}\n                          className=\"bg-gradient-to-r from-cyber-blue to-cyber-purple\"\n                        >\n                          Next Step\n                        </Button>\n                      ) : (\n                        <Button \n                          type=\"submit\"\n                          className=\"bg-gradient-to-r from-cyber-blue to-cyber-green hover:scale-105 transition-all duration-300\"\n                          disabled={createCampaignMutation.isPending || currentKycStatus !== \"approved\" || (canCreateCampaign && !canCreateCampaign.canCreate)}\n                          data-testid=\"button-launch-campaign\"\n                        >\n                          {createCampaignMutation.isPending ? (\n                            <>\n                              <div className=\"w-4 h-4 animate-spin border-2 border-white border-t-transparent rounded-full mr-2\"></div>\n                              Creating Campaign...\n                            </>\n                          ) : currentKycStatus !== \"approved\" ? (\n                            <>\n                              <AlertTriangle className=\"w-4 h-4 mr-2\" />\n                              KYC Required\n                            </>\n                          ) : (canCreateCampaign && !canCreateCampaign.canCreate) ? (\n                            <>\n                              <AlertTriangle className=\"w-4 h-4 mr-2\" />\n                              Restricted\n                            </>\n                          ) : (\n                            <>\n                              <Rocket className=\"w-4 h-4 mr-2\" />\n                              Launch Campaign\n                            </>\n                          )}\n                        </Button>\n                      )}\n                    </div>\n                  </form>\n                </Form>\n              </div>\n\n              {/* AI Assistant Sidebar */}\n              <div className=\"lg:col-span-1\">\n                <div className=\"sticky top-24\">\n                  <CampaignAssistant \n                    title={form.watch(\"title\")}\n                    description={form.watch(\"description\")}\n                    category={form.watch(\"category\")}\n                    goalAmount={parseFloat(form.watch(\"goalAmount\") || \"0\")}\n                    onTitleSuggestion={(title) => form.setValue(\"title\", title)}\n                    onDescriptionSuggestion={(description) => form.setValue(\"description\", description)}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":27646},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Campaign, Contribution } from \"@shared/schema\";\nimport { MainNavigation } from \"@/components/navigation/MainNavigation\";\nimport { ThreeBackground } from \"@/components/three/ThreeBackground\";\nimport Footer from \"@/components/layout/footer\";\nimport CampaignCard from \"@/components/campaign/campaign-card\";\nimport { \n  Plus, \n  TrendingUp, \n  Users, \n  Wallet, \n  Eye,\n  Edit,\n  Share2,\n  BarChart3,\n  Calendar,\n  Target,\n  Heart,\n  MessageCircle,\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  XCircle,\n  Lock,\n  Settings,\n  History,\n  ExternalLink\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useEffect } from \"react\";\n\nexport default function Dashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const { data: userCampaigns = [] } = useQuery<Campaign[]>({\n    queryKey: [\"/api/user/campaigns\"],\n    retry: false,\n  });\n\n  const { data: userContributions = [] } = useQuery<Contribution[]>({\n    queryKey: [\"/api/contributions\"],\n    retry: false,\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/stats\"],\n    retry: false,\n  });\n\n  const { data: userNotifications = [] } = useQuery<{id: string, title: string, message: string, type: string, isRead: boolean, createdAt: string}[]>({\n    queryKey: [\"/api/notifications\"],\n    retry: false,\n  });\n\n  const { data: reinstatementRequest } = useQuery<{status: string}>({\n    queryKey: [\"/api/reinstatement-requests\"],\n    retry: false,\n    enabled: user?.isFlagged || false,\n  });\n\n  const { data: canCreateCampaign } = useQuery<{canCreate: boolean, reason?: string}>({\n    queryKey: [\"/api/user/can-create-campaign\"],\n    retry: false,\n    enabled: !!user && !user.isFlagged,\n  });\n\n  const { data: profileCompletion } = useQuery<{\n    completionScore: number;\n    completionItems: Array<{field: string, label: string, completed: boolean}>;\n    isProfileComplete: boolean;\n  }>({\n    queryKey: [\"/api/user/profile-completion\"],\n    retry: false,\n  });\n\n  const { data: financialOverview } = useQuery<{\n    totalRaised: string;\n    totalContributed: string;\n    totalGoalAmount: string;\n    averageFunding: string;\n    fundingGoalProgress: number;\n    campaignStats: {\n      total: number;\n      active: number;\n      pending: number;\n      completed: number;\n      rejected: number;\n    };\n    contributionStats: {\n      totalContributions: number;\n      averageContribution: number;\n    };\n  }>({\n    queryKey: [\"/api/user/financial-overview\"],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background relative\">\n        <ThreeBackground />\n        <MainNavigation />\n        <div className=\"relative z-10 pt-16 flex justify-center items-center min-h-screen\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 animate-spin border-2 border-cyber-blue border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading dashboard...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will redirect via useEffect\n  }\n\n  const myCampaigns = userCampaigns.filter((campaign: Campaign) => campaign.creatorId === user?.id);\n  const myContributions = userContributions.filter((contribution: Contribution) => contribution.backerId === user?.id);\n  \n  const totalRaised = myCampaigns.reduce((sum: number, campaign: Campaign) => sum + parseFloat(campaign.currentAmount || \"0\"), 0);\n  const totalContributed = myContributions.reduce((sum: number, contribution: Contribution) => sum + parseFloat(contribution.amount || \"0\"), 0);\n  const activeCampaigns = myCampaigns.filter((campaign: Campaign) => campaign.status === \"active\").length;\n\n  return (\n    <div className=\"min-h-screen bg-background relative\">\n      <ThreeBackground />\n      <MainNavigation />\n      \n      <div className=\"relative z-10 pt-16\">\n        {/* Header */}\n        <section className=\"py-12 bg-gradient-to-b from-background to-muted/20\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-8\"\n            >\n              <div>\n                <h1 className=\"text-4xl md:text-5xl font-black mb-4\">\n                  Welcome back, <span className=\"gradient-text\">{user?.firstName || \"Creator\"}</span>\n                </h1>\n                <p className=\"text-xl text-muted-foreground\">\n                  Manage your campaigns and track your impact\n                </p>\n                \n                {/* User Profile with KYC Status */}\n                <div className=\"mt-4 flex items-center gap-4\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <span>@{user?.username}</span>\n                    <span>•</span>\n                    <span>{user?.email}</span>\n                  </div>\n                  <Badge \n                    variant={user?.kycStatus === 'approved' ? 'default' : \n                            user?.kycStatus === 'pending' || user?.kycStatus === 'under_review' ? 'secondary' : 'destructive'}\n                    className={`${\n                      user?.kycStatus === 'approved' ? 'text-green-600 border-green-600 bg-green-50' : \n                      user?.kycStatus === 'pending' || user?.kycStatus === 'under_review' ? 'text-yellow-600 border-yellow-600 bg-yellow-50' : 'text-red-600 border-red-600 bg-red-50'\n                    }`}\n                  >\n                    {user?.kycStatus === 'approved' && <CheckCircle className=\"w-3 h-3 mr-1\" />}\n                    {(user?.kycStatus === 'pending' || user?.kycStatus === 'under_review') && <Clock className=\"w-3 h-3 mr-1\" />}\n                    {user?.kycStatus === 'rejected' && <AlertCircle className=\"w-3 h-3 mr-1\" />}\n                    KYC: {user?.kycStatus?.replace('_', ' ').toUpperCase() || 'NOT SUBMITTED'}\n                  </Badge>\n                </div>\n              </div>\n              \n              <div className=\"flex gap-3 mt-4 md:mt-0\">\n                {user?.isFlagged ? (\n                  <Button disabled className=\"bg-gradient-to-r from-gray-400 to-gray-500\">\n                    <AlertCircle className=\"w-4 h-4 mr-2\" />\n                    Account Flagged\n                  </Button>\n                ) : canCreateCampaign?.canCreate ? (\n                  <Link href=\"/create\">\n                    <Button className=\"bg-gradient-to-r from-cyber-blue to-cyber-purple hover:scale-105 transition-all duration-300\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      New Campaign\n                    </Button>\n                  </Link>\n                ) : (\n                  <Button disabled className=\"bg-gradient-to-r from-gray-400 to-gray-500\" title={canCreateCampaign?.reason}>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    {canCreateCampaign?.reason || \"Cannot Create Campaign\"}\n                  </Button>\n                )}\n              </div>\n            </motion.div>\n\n            {/* Flagged User Banner */}\n            {user?.isFlagged && (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.95 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.5 }}\n                className=\"mb-8\"\n              >\n                <Card className=\"glass-morphism border-red-500/50\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <AlertCircle className=\"w-6 h-6 text-red-400\" />\n                        <div>\n                          <h3 className=\"font-semibold text-red-400\">Account Flagged</h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Your account is flagged. Please submit a reinstatement request to regain full access.\n                          </p>\n                          {user.flaggedReason && (\n                            <p className=\"text-sm text-red-300 mt-1\">\n                              Reason: {user.flaggedReason}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      {!reinstatementRequest || reinstatementRequest.status === \"rejected\" ? (\n                        <Button \n                          className=\"bg-red-500 hover:bg-red-600\" \n                          onClick={() => {\n                            // TODO: Open reinstatement request modal\n                            console.log(\"Open reinstatement request modal\");\n                          }}\n                        >\n                          Request Reinstatement\n                        </Button>\n                      ) : (\n                        <Badge variant=\"secondary\">\n                          Request {reinstatementRequest.status}\n                        </Badge>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            )}\n\n            {/* KYC Status Banner */}\n            {!user?.isFlagged && user?.kycStatus !== \"approved\" && (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.95 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.5 }}\n                className=\"mb-8\"\n              >\n                <Card className={`glass-morphism ${\n                  user?.kycStatus === \"pending\" || user?.kycStatus === \"under_review\" \n                    ? \"border-cyber-yellow/50\" \n                    : user?.kycStatus === \"rejected\"\n                    ? \"border-red-500/50\"\n                    : \"border-blue-500/50\"\n                }`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`w-3 h-3 rounded-full animate-pulse ${\n                          user?.kycStatus === \"pending\" || user?.kycStatus === \"under_review\" ? \"bg-cyber-yellow\" : \n                          user?.kycStatus === \"rejected\" ? \"bg-red-500\" : \"bg-blue-500\"\n                        }`}></div>\n                        <div>\n                          <h3 className={`font-semibold ${\n                            user?.kycStatus === \"pending\" || user?.kycStatus === \"under_review\" ? \"text-cyber-yellow\" : \n                            user?.kycStatus === \"rejected\" ? \"text-red-400\" : \"text-blue-400\"\n                          }`}>\n                            {user?.kycStatus === \"pending\" || user?.kycStatus === \"under_review\" ? \"KYC Under Review\" : \n                             user?.kycStatus === \"rejected\" ? \"KYC Rejected\" : \"KYC Required\"}\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {user?.kycStatus === \"pending\" || user?.kycStatus === \"under_review\" \n                              ? \"Your identity verification is being processed (1-3 business days)\"\n                              : user?.kycStatus === \"rejected\"\n                              ? \"Your KYC application was rejected. Please resubmit with corrections.\"\n                              : \"Complete KYC verification to create campaigns\"\n                            }\n                          </p>\n                        </div>\n                      </div>\n                      <Link href=\"/kyc\">\n                        <Button className={\n                          user?.kycStatus === \"pending\" || user?.kycStatus === \"under_review\"\n                            ? \"bg-cyber-yellow text-black hover:bg-cyber-yellow/90\" \n                            : user?.kycStatus === \"rejected\"\n                            ? \"bg-red-500 hover:bg-red-600\"\n                            : \"bg-blue-500 hover:bg-blue-600\"\n                        }>\n                          {user?.kycStatus === \"pending\" || user?.kycStatus === \"under_review\" ? \"Check Status\" : \n                           user?.kycStatus === \"rejected\" ? \"Resubmit KYC\" : \"Complete KYC\"}\n                        </Button>\n                      </Link>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            )}\n\n            {/* Quick Stats */}\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              className=\"grid grid-cols-1 md:grid-cols-4 gap-6\"\n            >\n              <Card className=\"glass-morphism border-white/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Campaigns Created</p>\n                      <p className=\"text-2xl font-bold\">{myCampaigns.length}</p>\n                    </div>\n                    <TrendingUp className=\"w-8 h-8 text-cyber-blue\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-morphism border-white/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Total Raised</p>\n                      <p className=\"text-2xl font-bold\">{totalRaised.toFixed(2)} ETH</p>\n                    </div>\n                    <Wallet className=\"w-8 h-8 text-cyber-green\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-morphism border-white/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Backed Projects</p>\n                      <p className=\"text-2xl font-bold\">{myContributions.length}</p>\n                    </div>\n                    <Heart className=\"w-8 h-8 text-cyber-pink\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-morphism border-white/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Total Contributed</p>\n                      <p className=\"text-2xl font-bold\">{totalContributed.toFixed(2)} ETH</p>\n                    </div>\n                    <Users className=\"w-8 h-8 text-cyber-purple\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n        </section>\n\n        {/* Dashboard Tabs */}\n        <section className=\"py-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"glass-morphism w-full justify-start mb-8\">\n                <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                <TabsTrigger value=\"my-campaigns\">My Campaigns</TabsTrigger>\n                <TabsTrigger value=\"backed-projects\">Backed Projects</TabsTrigger>\n                <TabsTrigger value=\"notifications\">Notifications ({userNotifications.filter((n: any) => !n.isRead).length})</TabsTrigger>\n                <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"overview\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                  {/* Recent Activity */}\n                  <Card className=\"glass-morphism\">\n                    <CardHeader>\n                      <CardTitle>Recent Activity</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {myCampaigns.slice(0, 3).map((campaign: Campaign) => (\n                          <div key={campaign.id} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className=\"w-2 h-2 bg-cyber-blue rounded-full\"></div>\n                              <div>\n                                <div className=\"font-medium text-sm\">{campaign.title.length > 20 ? campaign.title.substring(0, 20) + '...' : campaign.title}</div>\n                                <div className=\"text-xs text-muted-foreground\">\n                                  {formatDistanceToNow(new Date(campaign.createdAt || \"\"), { addSuffix: true })}\n                                </div>\n                              </div>\n                            </div>\n                            <Badge variant={campaign.status === \"active\" ? \"default\" : \"secondary\"} className=\"text-xs\">\n                              {campaign.status === \"pending_approval\" ? \"Review\" : campaign.status}\n                            </Badge>\n                          </div>\n                        ))}\n                        \n                        {myCampaigns.length === 0 && (\n                          <div className=\"text-center py-8\">\n                            <TrendingUp className=\"w-8 h-8 text-muted-foreground mx-auto mb-4\" />\n                            <p className=\"text-sm text-muted-foreground\">No campaigns yet</p>\n                            <Link href=\"/create\">\n                              <Button className=\"mt-4 text-sm\">Create Your First Campaign</Button>\n                            </Link>\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Financial Overview */}\n                  <Card className=\"glass-morphism\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <BarChart3 className=\"w-5 h-5\" />\n                        Financial Overview\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <div className=\"flex justify-between text-sm mb-2\">\n                            <span className=\"text-muted-foreground\">Total Raised</span>\n                            <span className=\"font-mono\">{financialOverview?.totalRaised || \"0.0000\"} ETH</span>\n                          </div>\n                          <div className=\"flex justify-between text-sm mb-2\">\n                            <span className=\"text-muted-foreground\">Goal Progress</span>\n                            <span className=\"font-mono\">{financialOverview?.fundingGoalProgress || 0}%</span>\n                          </div>\n                          <Progress value={financialOverview?.fundingGoalProgress || 0} className=\"h-2\" />\n                        </div>\n                        \n                        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                          <div>\n                            <div className=\"text-muted-foreground\">Active</div>\n                            <div className=\"font-mono text-green-400\">{financialOverview?.campaignStats.active || 0}</div>\n                          </div>\n                          <div>\n                            <div className=\"text-muted-foreground\">Pending</div>\n                            <div className=\"font-mono text-yellow-400\">{financialOverview?.campaignStats.pending || 0}</div>\n                          </div>\n                          <div>\n                            <div className=\"text-muted-foreground\">Completed</div>\n                            <div className=\"font-mono text-blue-400\">{financialOverview?.campaignStats.completed || 0}</div>\n                          </div>\n                          <div>\n                            <div className=\"text-muted-foreground\">Rejected</div>\n                            <div className=\"font-mono text-red-400\">{financialOverview?.campaignStats.rejected || 0}</div>\n                          </div>\n                        </div>\n                        \n                        <div>\n                          <div className=\"flex justify-between text-sm mb-1\">\n                            <span className=\"text-muted-foreground\">Avg Funding</span>\n                            <span className=\"font-mono\">{financialOverview?.averageFunding || \"0.0000\"} ETH</span>\n                          </div>\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Contributions</span>\n                            <span className=\"font-mono\">{financialOverview?.contributionStats.totalContributions || 0}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Profile Completion */}\n                  <Card className=\"glass-morphism\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Settings className=\"w-5 h-5\" />\n                        Profile Completion\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <div className=\"flex justify-between text-sm mb-2\">\n                            <span className=\"text-muted-foreground\">Profile Complete</span>\n                            <span className=\"font-mono\">{profileCompletion?.completionScore || 0}%</span>\n                          </div>\n                          <Progress value={profileCompletion?.completionScore || 0} className=\"h-2\" />\n                        </div>\n                        \n                        {profileCompletion && profileCompletion.completionScore < 100 && (\n                          <div className=\"space-y-2\">\n                            <p className=\"text-sm text-muted-foreground\">Missing items:</p>\n                            {profileCompletion.completionItems\n                              .filter(item => !item.completed)\n                              .slice(0, 3)\n                              .map((item, index) => (\n                              <div key={index} className=\"flex items-center gap-2 text-sm\">\n                                <XCircle className=\"w-3 h-3 text-red-400\" />\n                                <span>{item.label}</span>\n                              </div>\n                            ))}\n                            {profileCompletion.completionItems.filter(item => !item.completed).length > 3 && (\n                              <p className=\"text-xs text-muted-foreground\">+{profileCompletion.completionItems.filter(item => !item.completed).length - 3} more...</p>\n                            )}\n                          </div>\n                        )}\n                        \n                        {profileCompletion?.isProfileComplete && (\n                          <div className=\"flex items-center gap-2 text-sm text-green-400\">\n                            <CheckCircle className=\"w-3 h-3\" />\n                            <span>Profile Complete!</span>\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"my-campaigns\">\n                <div className=\"space-y-6\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-2xl font-bold\">My Campaigns ({myCampaigns.length})</h3>\n                    <Link href=\"/create\">\n                      <Button>\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        New Campaign\n                      </Button>\n                    </Link>\n                  </div>\n\n                  {myCampaigns.length > 0 ? (\n                    <div className=\"space-y-6\">\n                      {myCampaigns.map((campaign: Campaign) => (\n                        <Card key={campaign.id} className=\"glass-morphism\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex items-start justify-between mb-4\">\n                              <div className=\"flex items-start gap-4\">\n                                <div className=\"w-20 h-20 rounded-lg overflow-hidden\">\n                                  <img \n                                    src={campaign.imageUrl || \"/api/placeholder/80/80\"} \n                                    alt={campaign.title}\n                                    className=\"w-full h-full object-cover\"\n                                  />\n                                </div>\n                                <div className=\"flex-1\">\n                                  <h4 className=\"font-semibold text-lg mb-2\">{campaign.title}</h4>\n                                  <div className=\"flex items-center gap-2 mb-2\">\n                                    <Badge \n                                      variant={campaign.status === \"active\" ? \"default\" : \n                                              campaign.status === \"pending_approval\" ? \"secondary\" : \n                                              campaign.status === \"rejected\" ? \"destructive\" : \"secondary\"}\n                                      className={`${\n                                        campaign.status === \"pending_approval\" ? \"bg-yellow-100 text-yellow-800 border-yellow-300\" :\n                                        campaign.status === \"active\" ? \"bg-green-100 text-green-800 border-green-300\" :\n                                        campaign.status === \"rejected\" ? \"bg-red-100 text-red-800 border-red-300\" : \"\"\n                                      }`}\n                                    >\n                                      {campaign.status === \"pending_approval\" ? \"Under Review\" :\n                                       campaign.status === \"active\" ? \"Approved\" :\n                                       campaign.status === \"rejected\" ? \"Rejected\" : \n                                       campaign.status?.replace('_', ' ').toUpperCase()}\n                                    </Badge>\n                                    {campaign.isEditedAfterApproval && campaign.status === \"pending_approval\" && (\n                                      <Badge variant=\"outline\" className=\"text-orange-600 border-orange-300\">\n                                        <Clock className=\"w-3 h-3 mr-1\" />\n                                        Pending Re-approval\n                                      </Badge>\n                                    )}\n                                    {campaign.status === \"rejected\" && (\n                                      <Badge variant=\"destructive\">\n                                        <XCircle className=\"w-3 h-3 mr-1\" />\n                                        Rejected\n                                      </Badge>\n                                    )}\n                                  </div>\n                                  <div className=\"space-y-2\">\n                                    <div className=\"flex justify-between text-sm\">\n                                      <span className=\"text-muted-foreground\">Funding Progress</span>\n                                      <span className=\"font-mono\">\n                                        {((parseFloat(campaign.currentAmount || \"0\") / parseFloat(campaign.goalAmount || \"1\")) * 100).toFixed(1)}%\n                                      </span>\n                                    </div>\n                                    <Progress \n                                      value={(parseFloat(campaign.currentAmount || \"0\") / parseFloat(campaign.goalAmount || \"1\")) * 100} \n                                      className=\"h-2\" \n                                    />\n                                    <div className=\"flex justify-between text-sm text-muted-foreground\">\n                                      <span>{campaign.currentAmount || \"0\"} {campaign.currency} raised</span>\n                                      <span>{campaign.goalAmount} {campaign.currency} goal</span>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"flex flex-col gap-2\">\n                                <Button variant=\"outline\" size=\"sm\" className=\"glass-morphism\">\n                                  <Eye className=\"w-4 h-4 mr-2\" />\n                                  View\n                                </Button>\n                                {campaign.status !== \"rejected\" && !user?.isFlagged && (\n                                  <Button variant=\"outline\" size=\"sm\" className=\"glass-morphism\">\n                                    <Edit className=\"w-4 h-4 mr-2\" />\n                                    Edit\n                                  </Button>\n                                )}\n                                <Button variant=\"outline\" size=\"sm\" className=\"glass-morphism\">\n                                  <Share2 className=\"w-4 h-4 mr-2\" />\n                                  Share\n                                </Button>\n                              </div>\n                            </div>\n                            \n                            {campaign.adminComments && (\n                              <div className=\"mt-4 p-3 bg-muted/30 rounded-lg\">\n                                <div className=\"flex items-start gap-2\">\n                                  <MessageCircle className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                                  <div>\n                                    <div className=\"text-sm font-medium text-muted-foreground\">Admin Notes:</div>\n                                    <div className=\"text-sm\">{campaign.adminComments}</div>\n                                  </div>\n                                </div>\n                              </div>\n                            )}\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <Card className=\"glass-morphism\">\n                      <CardContent className=\"p-8 text-center\">\n                        <TrendingUp className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold mb-2\">No campaigns yet</h3>\n                        <p className=\"text-muted-foreground mb-4\">\n                          Create your first campaign to start raising funds for your project\n                        </p>\n                        <Link href=\"/create\">\n                          <Button className=\"bg-gradient-to-r from-cyber-blue to-cyber-purple\">\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Create Campaign\n                          </Button>\n                        </Link>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"backed-projects\">\n                <div className=\"space-y-6\">\n                  <h3 className=\"text-2xl font-bold\">Backed Projects ({myContributions.length})</h3>\n\n                  {myContributions.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {myContributions.map((contribution: Contribution) => {\n                        const campaign = userCampaigns.find((c: Campaign) => c.id === contribution.campaignId);\n                        return (\n                          <Card key={contribution.id} className=\"glass-morphism\">\n                            <CardContent className=\"p-6\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center gap-4\">\n                                  <div className=\"w-16 h-16 rounded-lg overflow-hidden\">\n                                    <img \n                                      src={campaign?.imageUrl || \"https://images.unsplash.com/photo-1622979135225-d2ba269cf1ac?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\"} \n                                      alt={campaign?.title}\n                                      className=\"w-full h-full object-cover\"\n                                    />\n                                  </div>\n                                  <div>\n                                    <h4 className=\"font-semibold\">{campaign?.title || \"Campaign\"}</h4>\n                                    <p className=\"text-sm text-muted-foreground\">\n                                      Contributed {formatDistanceToNow(new Date(contribution.createdAt || \"\"), { addSuffix: true })}\n                                    </p>\n                                    {contribution.message && (\n                                      <p className=\"text-sm text-muted-foreground italic mt-1\">\n                                        \"{contribution.message}\"\n                                      </p>\n                                    )}\n                                  </div>\n                                </div>\n                                <div className=\"text-right\">\n                                  <div className=\"text-lg font-bold font-mono\">\n                                    {contribution.amount} {contribution.currency}\n                                  </div>\n                                  <Badge variant={contribution.status === \"confirmed\" ? \"default\" : \"secondary\"}>\n                                    {contribution.status}\n                                  </Badge>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        );\n                      })}\n                    </div>\n                  ) : (\n                    <Card className=\"glass-morphism\">\n                      <CardContent className=\"p-8 text-center\">\n                        <Heart className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold mb-2\">No backed projects yet</h3>\n                        <p className=\"text-muted-foreground mb-4\">\n                          Discover amazing campaigns and support innovative projects\n                        </p>\n                        <Link href=\"/campaigns\">\n                          <Button className=\"bg-gradient-to-r from-cyber-blue to-cyber-purple\">\n                            Browse Campaigns\n                          </Button>\n                        </Link>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"notifications\">\n                <div className=\"space-y-6\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-2xl font-bold\">Notifications ({userNotifications.length})</h3>\n                    {userNotifications.some((n: any) => !n.isRead) && (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => {\n                          // TODO: Mark all as read\n                          console.log(\"Mark all as read\");\n                        }}\n                      >\n                        Mark All Read\n                      </Button>\n                    )}\n                  </div>\n\n                  {userNotifications.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {userNotifications.map((notification: any) => (\n                        <Card key={notification.id} className={`glass-morphism transition-all duration-200 ${\n                          !notification.isRead ? \"border-cyber-blue/50 bg-cyber-blue/5\" : \"\"\n                        }`}>\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex items-start gap-3\">\n                                <div className={`w-2 h-2 rounded-full mt-2 ${\n                                  !notification.isRead ? \"bg-cyber-blue animate-pulse\" : \"bg-muted\"\n                                }`}></div>\n                                <div className=\"flex-1\">\n                                  <h4 className=\"font-semibold mb-1\">{notification.title}</h4>\n                                  <p className=\"text-sm text-muted-foreground mb-2\">{notification.message}</p>\n                                  <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                                    <span>{formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true })}</span>\n                                    <Badge \n                                      variant=\"outline\" \n                                      className={`${\n                                        notification.type === \"success\" ? \"text-green-600 border-green-300\" :\n                                        notification.type === \"error\" ? \"text-red-600 border-red-300\" :\n                                        notification.type === \"warning\" ? \"text-yellow-600 border-yellow-300\" :\n                                        \"text-blue-600 border-blue-300\"\n                                      }`}\n                                    >\n                                      {notification.type}\n                                    </Badge>\n                                  </div>\n                                </div>\n                              </div>\n                              {!notification.isRead && (\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={() => {\n                                    // TODO: Mark as read\n                                    console.log(\"Mark as read:\", notification.id);\n                                  }}\n                                >\n                                  Mark Read\n                                </Button>\n                              )}\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <Card className=\"glass-morphism\">\n                      <CardContent className=\"p-8 text-center\">\n                        <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold mb-2\">No notifications yet</h3>\n                        <p className=\"text-muted-foreground\">\n                          You'll see updates about your campaigns, KYC status, and other important information here.\n                        </p>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"analytics\">\n                <div className=\"space-y-6\">\n                  <h3 className=\"text-2xl font-bold\">Analytics</h3>\n                  \n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                    <Card className=\"glass-morphism\">\n                      <CardHeader>\n                        <CardTitle>Funding Trends</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"h-64 flex items-center justify-center\">\n                          <div className=\"text-center\">\n                            <BarChart3 className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                            <p className=\"text-muted-foreground\">Analytics charts coming soon</p>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"glass-morphism\">\n                      <CardHeader>\n                        <CardTitle>Backer Demographics</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"h-64 flex items-center justify-center\">\n                          <div className=\"text-center\">\n                            <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                            <p className=\"text-muted-foreground\">Demographic analysis coming soon</p>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":42938},"client/src/pages/explorer.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MainNavigation } from \"@/components/navigation/MainNavigation\";\nimport { ThreeBackground } from \"@/components/three/ThreeBackground\";\nimport Footer from \"@/components/layout/footer\";\nimport TransactionFeed from \"@/components/blockchain/transaction-feed\";\nimport NetworkStats from \"@/components/blockchain/network-stats\";\nimport type { Transaction, Campaign } from \"@shared/schema\";\nimport { \n  Search, \n  ExternalLink, \n  Activity, \n  Blocks, \n  Zap, \n  Globe,\n  TrendingUp,\n  Users,\n  Wallet,\n  Clock,\n  Filter,\n  Copy,\n  CheckCircle\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function Explorer() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeFilter, setActiveFilter] = useState(\"all\");\n  const [copiedAddress, setCopiedAddress] = useState(\"\");\n\n  const { data: transactions = [] } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\"],\n    refetchInterval: 5000,\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/stats\"],\n    refetchInterval: 30000,\n  });\n\n  const { data: campaigns = [] } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n    retry: false,\n  });\n\n  const mockBlocks = [\n    {\n      number: 12345678,\n      hash: \"0x1a2b3c4d5e6f7890abcdef1234567890abcdef1234567890abcdef1234567890\",\n      timestamp: new Date(Date.now() - 30000),\n      transactions: 142,\n      gasUsed: \"8,432,156\",\n      size: \"47.2 KB\"\n    },\n    {\n      number: 12345677,\n      hash: \"0x9876543210fedcba0987654321fedcba0987654321fedcba0987654321fedcba\",\n      timestamp: new Date(Date.now() - 60000),\n      transactions: 89,\n      gasUsed: \"5,124,893\",\n      size: \"32.8 KB\"\n    },\n    {\n      number: 12345676,\n      hash: \"0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890\",\n      timestamp: new Date(Date.now() - 90000),\n      transactions: 234,\n      gasUsed: \"12,567,342\",\n      size: \"68.1 KB\"\n    },\n  ];\n\n  const mockValidators = [\n    { address: \"0x1234...5678\", stake: \"125.4 ETH\", uptime: \"99.8%\", rewards: \"2.34 ETH\" },\n    { address: \"0x9876...5432\", stake: \"98.7 ETH\", uptime: \"99.5%\", rewards: \"1.87 ETH\" },\n    { address: \"0xabcd...efgh\", stake: \"156.2 ETH\", uptime: \"100%\", rewards: \"3.12 ETH\" },\n  ];\n\n  const filteredTransactions = transactions.filter(tx => {\n    const matchesSearch = !searchQuery || \n      tx.hash.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      tx.fromAddress?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      tx.toAddress?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesFilter = activeFilter === \"all\" || tx.transactionType === activeFilter;\n    \n    return matchesSearch && matchesFilter;\n  });\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedAddress(text);\n    setTimeout(() => setCopiedAddress(\"\"), 2000);\n  };\n\n  const formatAddress = (address: string) => {\n    if (!address) return \"N/A\";\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n\n  const formatHash = (hash: string) => {\n    return `${hash.slice(0, 10)}...${hash.slice(-6)}`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background relative\">\n      <ThreeBackground />\n      <MainNavigation />\n      \n      <div className=\"relative z-10 pt-16\">\n        {/* Header */}\n        <section className=\"py-12 bg-gradient-to-b from-background to-muted/20\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              className=\"text-center mb-8\"\n            >\n              <div className=\"flex justify-center mb-6\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-cyber-green to-cyber-blue rounded-full flex items-center justify-center\">\n                  <Blocks className=\"w-8 h-8 text-white\" />\n                </div>\n              </div>\n              <h1 className=\"text-4xl md:text-6xl font-black mb-4 gradient-text\">\n                Blockchain Explorer\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n                Real-time transparency - explore transactions, blocks, and network activity on Polygon blockchain\n              </p>\n            </motion.div>\n\n            {/* Search Bar */}\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              className=\"max-w-2xl mx-auto\"\n            >\n              <div className=\"relative\">\n                <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n                <Input\n                  placeholder=\"Search by transaction hash, address, or block number...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-12 pr-4 py-3 glass-morphism border-white/20 focus:border-cyber-blue form-focus text-lg\"\n                />\n              </div>\n            </motion.div>\n          </div>\n        </section>\n\n        {/* Network Overview */}\n        <section className=\"py-8\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <Card className=\"glass-morphism border-white/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground mb-1\">Latest Block</p>\n                      <p className=\"text-2xl font-bold\">{mockBlocks[0].number.toLocaleString()}</p>\n                    </div>\n                    <Blocks className=\"w-8 h-8 text-cyber-blue\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-morphism border-white/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground mb-1\">24h Transactions</p>\n                      <p className=\"text-2xl font-bold\">{(transactions.length * 24).toLocaleString()}</p>\n                    </div>\n                    <Activity className=\"w-8 h-8 text-cyber-green\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-morphism border-white/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground mb-1\">Gas Price</p>\n                      <p className=\"text-2xl font-bold\">0.02 GWEI</p>\n                    </div>\n                    <Zap className=\"w-8 h-8 text-cyber-purple\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-morphism border-white/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground mb-1\">Network Status</p>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 bg-cyber-green rounded-full animate-pulse\"></div>\n                        <span className=\"text-cyber-green font-medium\">Healthy</span>\n                      </div>\n                    </div>\n                    <Globe className=\"w-8 h-8 text-cyber-yellow\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        {/* Main Explorer Content */}\n        <section className=\"py-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <Tabs defaultValue=\"transactions\" className=\"space-y-6\">\n              <TabsList className=\"glass-morphism w-full justify-start\">\n                <TabsTrigger value=\"transactions\">Transactions</TabsTrigger>\n                <TabsTrigger value=\"blocks\">Blocks</TabsTrigger>\n                <TabsTrigger value=\"campaigns\">Campaign Contracts</TabsTrigger>\n                <TabsTrigger value=\"validators\">Validators</TabsTrigger>\n                <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"transactions\">\n                <div className=\"space-y-6\">\n                  <div className=\"flex flex-col sm:flex-row gap-4 justify-between items-start sm:items-center\">\n                    <h3 className=\"text-2xl font-bold\">Live Transactions</h3>\n                    <div className=\"flex gap-2\">\n                      {[\"all\", \"contribution\", \"withdrawal\", \"contract_creation\"].map((filter) => (\n                        <Button\n                          key={filter}\n                          variant={activeFilter === filter ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => setActiveFilter(filter)}\n                          className={activeFilter === filter \n                            ? \"bg-cyber-blue\" \n                            : \"glass-morphism border-white/20\"\n                          }\n                        >\n                          {filter.charAt(0).toUpperCase() + filter.slice(1).replace(\"_\", \" \")}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Card className=\"glass-morphism\">\n                    <CardContent className=\"p-0\">\n                      <div className=\"overflow-x-auto\">\n                        <table className=\"w-full\">\n                          <thead className=\"border-b border-muted\">\n                            <tr>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Hash</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Type</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">From</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">To</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Amount</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Time</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Status</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {filteredTransactions.map((tx) => (\n                              <tr key={tx.id} className=\"border-b border-muted/50 hover:bg-muted/20\">\n                                <td className=\"p-4\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <code className=\"text-cyber-blue font-mono text-sm\">\n                                      {formatHash(tx.hash)}\n                                    </code>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"icon\"\n                                      className=\"w-6 h-6\"\n                                      onClick={() => copyToClipboard(tx.hash)}\n                                    >\n                                      {copiedAddress === tx.hash ? (\n                                        <CheckCircle className=\"w-3 h-3 text-cyber-green\" />\n                                      ) : (\n                                        <Copy className=\"w-3 h-3\" />\n                                      )}\n                                    </Button>\n                                  </div>\n                                </td>\n                                <td className=\"p-4\">\n                                  <Badge className={\n                                    tx.transactionType === \"contribution\"\n                                      ? \"bg-cyber-green/20 text-cyber-green\"\n                                      : tx.transactionType === \"withdrawal\"\n                                      ? \"bg-cyber-purple/20 text-cyber-purple\"\n                                      : \"bg-cyber-yellow/20 text-cyber-yellow\"\n                                  }>\n                                    {tx.transactionType}\n                                  </Badge>\n                                </td>\n                                <td className=\"p-4\">\n                                  <code className=\"text-muted-foreground font-mono text-sm\">\n                                    {formatAddress(tx.fromAddress || \"\")}\n                                  </code>\n                                </td>\n                                <td className=\"p-4\">\n                                  <code className=\"text-muted-foreground font-mono text-sm\">\n                                    {formatAddress(tx.toAddress || \"\")}\n                                  </code>\n                                </td>\n                                <td className=\"p-4\">\n                                  <span className=\"font-mono font-bold\">\n                                    {tx.amount} ETH\n                                  </span>\n                                </td>\n                                <td className=\"p-4\">\n                                  <span className=\"text-muted-foreground text-sm\">\n                                    {formatDistanceToNow(new Date(tx.createdAt), { addSuffix: true })}\n                                  </span>\n                                </td>\n                                <td className=\"p-4\">\n                                  <Badge className=\"bg-cyber-green/20 text-cyber-green\">\n                                    {tx.status}\n                                  </Badge>\n                                </td>\n                              </tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"blocks\">\n                <div className=\"space-y-6\">\n                  <h3 className=\"text-2xl font-bold\">Latest Blocks</h3>\n                  \n                  <Card className=\"glass-morphism\">\n                    <CardContent className=\"p-0\">\n                      <div className=\"overflow-x-auto\">\n                        <table className=\"w-full\">\n                          <thead className=\"border-b border-muted\">\n                            <tr>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Block</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Hash</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Transactions</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Gas Used</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Size</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Time</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {mockBlocks.map((block) => (\n                              <tr key={block.number} className=\"border-b border-muted/50 hover:bg-muted/20\">\n                                <td className=\"p-4\">\n                                  <span className=\"text-cyber-blue font-bold\">\n                                    #{block.number.toLocaleString()}\n                                  </span>\n                                </td>\n                                <td className=\"p-4\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <code className=\"text-muted-foreground font-mono text-sm\">\n                                      {formatHash(block.hash)}\n                                    </code>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"icon\"\n                                      className=\"w-6 h-6\"\n                                    >\n                                      <ExternalLink className=\"w-3 h-3\" />\n                                    </Button>\n                                  </div>\n                                </td>\n                                <td className=\"p-4\">\n                                  <span className=\"font-medium\">{block.transactions}</span>\n                                </td>\n                                <td className=\"p-4\">\n                                  <span className=\"font-mono text-sm\">{block.gasUsed}</span>\n                                </td>\n                                <td className=\"p-4\">\n                                  <span className=\"text-muted-foreground\">{block.size}</span>\n                                </td>\n                                <td className=\"p-4\">\n                                  <span className=\"text-muted-foreground text-sm\">\n                                    {formatDistanceToNow(block.timestamp, { addSuffix: true })}\n                                  </span>\n                                </td>\n                              </tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"campaigns\">\n                <div className=\"space-y-6\">\n                  <h3 className=\"text-2xl font-bold\">Campaign Smart Contracts</h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {campaigns.slice(0, 6).map((campaign) => (\n                      <Card key={campaign.id} className=\"glass-morphism\">\n                        <CardContent className=\"p-6\">\n                          <div className=\"space-y-4\">\n                            <div>\n                              <h4 className=\"font-semibold truncate\">{campaign.title}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {campaign.category}\n                              </p>\n                            </div>\n                            \n                            <div>\n                              <label className=\"text-xs text-muted-foreground\">Contract Address</label>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <code className=\"text-xs font-mono bg-muted px-2 py-1 rounded flex-1\">\n                                  {campaign.smartContractAddress \n                                    ? formatAddress(campaign.smartContractAddress)\n                                    : \"Not deployed\"\n                                  }\n                                </code>\n                                {campaign.smartContractAddress && (\n                                  <Button variant=\"ghost\" size=\"icon\" className=\"w-6 h-6\">\n                                    <ExternalLink className=\"w-3 h-3\" />\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n\n                            <div className=\"flex justify-between items-center text-sm\">\n                              <span className=\"text-muted-foreground\">Raised:</span>\n                              <span className=\"font-mono font-bold\">\n                                {campaign.currentAmount} {campaign.currency}\n                              </span>\n                            </div>\n\n                            <div className=\"flex justify-between items-center text-sm\">\n                              <span className=\"text-muted-foreground\">Backers:</span>\n                              <span className=\"font-bold\">{campaign.backerCount}</span>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"validators\">\n                <div className=\"space-y-6\">\n                  <h3 className=\"text-2xl font-bold\">Network Validators</h3>\n                  \n                  <Card className=\"glass-morphism\">\n                    <CardContent className=\"p-0\">\n                      <div className=\"overflow-x-auto\">\n                        <table className=\"w-full\">\n                          <thead className=\"border-b border-muted\">\n                            <tr>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Validator</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Stake</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Uptime</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Rewards</th>\n                              <th className=\"text-left p-4 font-medium text-muted-foreground\">Status</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {mockValidators.map((validator, index) => (\n                              <tr key={index} className=\"border-b border-muted/50 hover:bg-muted/20\">\n                                <td className=\"p-4\">\n                                  <code className=\"text-cyber-blue font-mono\">\n                                    {validator.address}\n                                  </code>\n                                </td>\n                                <td className=\"p-4\">\n                                  <span className=\"font-mono font-bold\">{validator.stake}</span>\n                                </td>\n                                <td className=\"p-4\">\n                                  <span className=\"text-cyber-green font-medium\">{validator.uptime}</span>\n                                </td>\n                                <td className=\"p-4\">\n                                  <span className=\"font-mono\">{validator.rewards}</span>\n                                </td>\n                                <td className=\"p-4\">\n                                  <Badge className=\"bg-cyber-green/20 text-cyber-green\">\n                                    Active\n                                  </Badge>\n                                </td>\n                              </tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"analytics\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                  <TransactionFeed />\n                  <NetworkStats />\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":24345},"client/src/pages/home.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MainNavigation } from \"@/components/navigation/MainNavigation\";\nimport { ThreeBackground } from \"@/components/three/ThreeBackground\";\nimport CampaignCard from \"@/components/campaign/campaign-card\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Plus, TrendingUp, Users, Wallet } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Campaign, Contribution } from \"@shared/schema\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  \n  const { data: campaigns = [] } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n    retry: false,\n  });\n\n  const { data: stats } = useQuery<{\n    totalRaised: string;\n    activeCampaigns: number;\n    totalBackers: number;\n    successRate: number;\n  }>({\n    queryKey: [\"/api/stats\"],\n    retry: false,\n  });\n\n  const { data: userContributions = [] } = useQuery<Contribution[]>({\n    queryKey: [\"/api/contributions\"],\n    retry: false,\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background relative\">\n      <ThreeBackground />\n      <MainNavigation />\n      \n      <div className=\"relative z-10\">\n        {/* Welcome Section */}\n        <section className=\"py-12 bg-gradient-to-b from-background to-muted/20\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              className=\"text-center mb-8\"\n            >\n              <h1 className=\"text-4xl md:text-6xl font-black mb-4\">\n                Welcome back, <span className=\"gradient-text\">{user?.firstName || \"Creator\"}</span>\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n                Ready to launch your next revolutionary project or discover amazing campaigns?\n              </p>\n            </motion.div>\n\n            {/* Quick Actions */}\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n              className=\"flex flex-wrap justify-center gap-4 mb-12\"\n            >\n              <Link href=\"/create\">\n                <Button size=\"lg\" className=\"bg-gradient-to-r from-cyber-blue to-cyber-purple hover:scale-105 transform transition-all duration-300\">\n                  <Plus className=\"w-5 h-5 mr-2\" />\n                  Create Campaign\n                </Button>\n              </Link>\n              <Link href=\"/campaigns\">\n                <Button variant=\"outline\" size=\"lg\" className=\"glass-morphism hover:bg-white/20\">\n                  <TrendingUp className=\"w-5 h-5 mr-2\" />\n                  Browse Campaigns\n                </Button>\n              </Link>\n              <Link href=\"/dashboard\">\n                <Button variant=\"outline\" size=\"lg\" className=\"glass-morphism hover:bg-white/20\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  My Dashboard\n                </Button>\n              </Link>\n            </motion.div>\n\n            {/* KYC Status Alert */}\n            {user?.kycStatus !== \"approved\" && (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.95 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.5 }}\n                className=\"mb-8\"\n              >\n                <Card className=\"glass-morphism border-cyber-yellow/50\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-3 h-3 bg-cyber-yellow rounded-full animate-pulse\"></div>\n                        <div>\n                          <h3 className=\"font-semibold text-cyber-yellow\">Complete KYC Verification</h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Verify your identity to create campaigns and unlock all features\n                          </p>\n                        </div>\n                      </div>\n                      <Link href=\"/kyc\">\n                        <Button className=\"bg-cyber-yellow text-black hover:bg-cyber-yellow/90\">\n                          Start KYC\n                        </Button>\n                      </Link>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            )}\n          </div>\n        </section>\n\n        {/* Dashboard Overview */}\n        <section className=\"py-16\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n              <Card className=\"glass-morphism border-white/20\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-muted-foreground\">Your Contributions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center gap-2\">\n                    <Wallet className=\"w-5 h-5 text-cyber-blue\" />\n                    <span className=\"text-2xl font-bold\">{userContributions.length}</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-morphism border-white/20\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Raised</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"w-5 h-5 text-cyber-green\" />\n                    <span className=\"text-2xl font-bold\">{stats?.totalRaised || \"0\"} ETH</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-morphism border-white/20\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-muted-foreground\">Active Campaigns</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"w-5 h-5 text-cyber-purple\" />\n                    <span className=\"text-2xl font-bold\">{stats?.activeCampaigns || \"0\"}</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-morphism border-white/20\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-muted-foreground\">Success Rate</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"secondary\" className=\"bg-cyber-green/20 text-cyber-green\">\n                      {stats?.successRate || \"0\"}%\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Featured Campaigns */}\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.8 }}\n            >\n              <h2 className=\"text-3xl font-bold mb-8 gradient-text\">Featured Campaigns</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {campaigns.slice(0, 6).map((campaign, index) => (\n                  <motion.div\n                    key={campaign.id}\n                    initial={{ opacity: 0, y: 30 }}\n                    whileInView={{ opacity: 1, y: 0 }}\n                    viewport={{ once: true }}\n                    transition={{ duration: 0.5, delay: index * 0.1 }}\n                  >\n                    <CampaignCard campaign={campaign} />\n                  </motion.div>\n                ))}\n              </div>\n            </motion.div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8417},"client/src/pages/kyc.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport KYCStatus from \"@/components/kyc/KYCStatus\";\nimport KYCForm from \"@/components/kyc/KYCForm\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, CheckCircle, ArrowLeft, Info } from \"lucide-react\";\n\ninterface KYCStatusData {\n  status: 'not_submitted' | 'pending' | 'approved' | 'rejected' | 'under_review';\n  submittedAt?: string;\n  reviewedAt?: string;\n  adminComments?: string;\n}\n\nexport default function KYC() {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const [, navigate] = useLocation();\n  const [showForm, setShowForm] = useState(false);\n\n  const { data: kycStatus, isLoading: statusLoading } = useQuery<KYCStatusData>({\n    queryKey: [\"/api/kyc/status\"],\n    enabled: isAuthenticated,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      navigate(\"/auth\");\n    }\n  }, [authLoading, isAuthenticated, navigate]);\n\n  if (authLoading || statusLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n              <div className=\"h-64 bg-muted rounded\"></div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user) {\n    return null;\n  }\n\n  const status = kycStatus?.status || 'not_submitted';\n  const canShowForm = status === 'not_submitted' || status === 'rejected';\n\n  const handleFormSuccess = () => {\n    setShowForm(false);\n    // Status will be updated automatically via query invalidation\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto space-y-8\">\n          {/* Header */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"text-center space-y-4\"\n          >\n            <div className=\"flex items-center justify-center gap-3\">\n              <div className=\"p-3 rounded-full bg-primary/10\">\n                <Shield className=\"w-8 h-8 text-primary\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold\">KYC Verification</h1>\n                <p className=\"text-muted-foreground\">\n                  Know Your Customer identity verification\n                </p>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Information Card */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n          >\n            <Card className=\"border-blue-200 bg-blue-50/50 dark:border-blue-800 dark:bg-blue-950/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start gap-3\">\n                  <Info className=\"w-5 h-5 text-blue-600 dark:text-blue-400 mt-0.5\" />\n                  <div>\n                    <h3 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">\n                      Why do we need KYC verification?\n                    </h3>\n                    <p className=\"text-blue-700 dark:text-blue-300 text-sm leading-relaxed\">\n                      KYC (Know Your Customer) verification helps us comply with financial regulations \n                      and ensures the security of our platform. Verified users can create fundraising \n                      campaigns and access advanced features. The verification process typically takes \n                      1-3 business days.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Main Content */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n          >\n            {!showForm ? (\n              <div className=\"space-y-6\">\n                {/* KYC Status */}\n                <KYCStatus />\n\n                {/* Action Buttons */}\n                {canShowForm && (\n                  <div className=\"text-center\">\n                    <Button\n                      onClick={() => setShowForm(true)}\n                      size=\"lg\"\n                      className=\"w-full max-w-md\"\n                      data-testid=\"button-start-kyc\"\n                    >\n                      <Shield className=\"w-5 h-5 mr-2\" />\n                      {status === 'rejected' ? 'Resubmit KYC Application' : 'Start KYC Verification'}\n                    </Button>\n                  </div>\n                )}\n\n                {/* Verification Steps */}\n                {status === 'not_submitted' && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Verification Process</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid gap-4 md:grid-cols-3\">\n                        <div className=\"text-center space-y-2\">\n                          <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto\">\n                            <span className=\"text-lg font-semibold text-primary\">1</span>\n                          </div>\n                          <h4 className=\"font-medium\">Personal Information</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Provide your basic personal details\n                          </p>\n                        </div>\n                        <div className=\"text-center space-y-2\">\n                          <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto\">\n                            <span className=\"text-lg font-semibold text-primary\">2</span>\n                          </div>\n                          <h4 className=\"font-medium\">Identity Verification</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Enter your ID details and financial information\n                          </p>\n                        </div>\n                        <div className=\"text-center space-y-2\">\n                          <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto\">\n                            <span className=\"text-lg font-semibold text-primary\">3</span>\n                          </div>\n                          <h4 className=\"font-medium\">Document Upload</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Upload photos of your ID and selfie\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Success Message */}\n                {status === 'approved' && (\n                  <Card className=\"border-green-200 bg-green-50/50 dark:border-green-800 dark:bg-green-950/20\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center gap-3\">\n                        <CheckCircle className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                        <div>\n                          <h3 className=\"font-semibold text-green-900 dark:text-green-100\">\n                            Verification Complete!\n                          </h3>\n                          <p className=\"text-green-700 dark:text-green-300 text-sm\">\n                            You can now create campaigns and access all platform features.\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {/* Back Button */}\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowForm(false)}\n                  className=\"mb-4\"\n                  data-testid=\"button-back-to-status\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Status\n                </Button>\n\n                {/* KYC Form */}\n                <KYCForm onSubmitSuccess={handleFormSuccess} />\n              </div>\n            )}\n          </motion.div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":9092},"client/src/pages/landing.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport CampaignCard from \"@/components/campaign/campaign-card\";\nimport TransactionFeed from \"@/components/blockchain/transaction-feed\";\nimport NetworkStats from \"@/components/blockchain/network-stats\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Campaign } from \"@shared/schema\";\n\nexport default function Landing() {\n  const { data: campaigns = [] } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n    retry: false,\n  });\n\n  const { data: stats } = useQuery<{\n    totalRaised: string;\n    activeCampaigns: number;\n    totalBackers: number;\n  }>({\n    queryKey: [\"/api/stats\"],\n    retry: false,\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      {/* Hero Section */}\n      <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n        {/* Animated background */}\n        <div className=\"absolute inset-0 cyber-gradient\">\n          <div className=\"absolute inset-0 dot-pattern\"></div>\n        </div>\n        \n        {/* Hero Content */}\n        <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"mb-8\"\n          >\n            <h1 className=\"text-5xl md:text-7xl font-black mb-6 gradient-text animate-float\">\n              The Future of<br/>\n              <span className=\"glow-text\">Crowdfunding</span>\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n              Launch campaigns, raise funds transparently on blockchain, and build the next generation of innovative projects with our Web3 crowdfunding platform.\n            </p>\n          </motion.div>\n          \n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            className=\"flex flex-col sm:flex-row gap-6 justify-center items-center mb-12\"\n          >\n            <Button \n              size=\"lg\" \n              className=\"bg-gradient-to-r from-cyber-blue to-cyber-green hover:scale-105 transform transition-all duration-300 animate-glow text-lg px-8 py-4\"\n              onClick={() => window.location.href = '/auth'}\n            >\n              Launch Campaign\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              className=\"glass-morphism hover:bg-white/20 transition-all duration-300 text-lg px-8 py-4\"\n              onClick={() => window.location.href = '/access-guide'}\n            >\n              Access All Features\n            </Button>\n          </motion.div>\n\n          {/* Stats */}\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n            className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\"\n          >\n            <Card className=\"glass-morphism border-white/20\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-black text-cyber-blue mb-2\">\n                  {stats?.totalRaised ? `${stats.totalRaised} ETH` : \"$2.4M+\"}\n                </div>\n                <div className=\"text-muted-foreground\">Total Raised</div>\n              </CardContent>\n            </Card>\n            <Card className=\"glass-morphism border-white/20\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-black text-cyber-green mb-2\">\n                  {stats?.activeCampaigns || \"1,247\"}\n                </div>\n                <div className=\"text-muted-foreground\">Active Campaigns</div>\n              </CardContent>\n            </Card>\n            <Card className=\"glass-morphism border-white/20\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-black text-cyber-purple mb-2\">\n                  {stats?.totalBackers ? `${stats.totalBackers}K+` : \"45K+\"}\n                </div>\n                <div className=\"text-muted-foreground\">Global Backers</div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Trending Campaigns Section */}\n      <section className=\"py-20 bg-muted/20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center mb-16\"\n          >\n            <h2 className=\"text-4xl md:text-5xl font-black mb-6 gradient-text\">\n              Trending Campaigns\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Discover groundbreaking projects backed by our global community\n            </p>\n          </motion.div>\n\n          {/* Filter Tabs */}\n          <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n            {[\"All Categories\", \"Technology\", \"Gaming\", \"DeFi\", \"Creative\"].map((category) => (\n              <Button\n                key={category}\n                variant=\"outline\"\n                className=\"glass-morphism hover:bg-cyber-blue/20 border-cyber-blue/50\"\n              >\n                {category}\n              </Button>\n            ))}\n          </div>\n\n          {/* Campaign Grid */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            whileInView={{ opacity: 1 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.8 }}\n            className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\"\n          >\n            {campaigns.slice(0, 6).map((campaign, index) => (\n              <motion.div\n                key={campaign.id}\n                initial={{ opacity: 0, y: 30 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                viewport={{ once: true }}\n                transition={{ duration: 0.5, delay: index * 0.1 }}\n              >\n                <CampaignCard campaign={campaign} />\n              </motion.div>\n            ))}\n          </motion.div>\n\n          <div className=\"text-center mt-12\">\n            <Button\n              variant=\"outline\"\n              size=\"lg\"\n              className=\"glass-morphism hover:bg-white/20\"\n            >\n              View All Campaigns\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Live Transaction Feed */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.8 }}\n            className=\"text-center mb-16\"\n          >\n            <h2 className=\"text-4xl md:text-5xl font-black mb-6 gradient-text\">\n              Live Blockchain Explorer\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Real-time transparency - every transaction recorded on Polygon blockchain\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <TransactionFeed />\n            <NetworkStats />\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7846},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertCircle, Home, ArrowLeft } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\n\nexport default function NotFound() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      <div className=\"container mx-auto px-4 py-16 flex items-center justify-center min-h-[calc(100vh-120px)]\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"text-center\"\n        >\n          <Card className=\"w-full max-w-lg mx-4 border-muted\">\n            <CardContent className=\"pt-12 pb-8 px-8\">\n              <motion.div\n                initial={{ scale: 0.8 }}\n                animate={{ scale: 1 }}\n                transition={{ delay: 0.2, duration: 0.3 }}\n                className=\"flex justify-center mb-6\"\n              >\n                <div className=\"w-20 h-20 rounded-full bg-destructive/10 flex items-center justify-center\">\n                  <AlertCircle className=\"h-10 w-10 text-destructive\" />\n                </div>\n              </motion.div>\n\n              <h1 className=\"text-3xl font-bold mb-4\">Page Not Found</h1>\n              \n              <p className=\"text-muted-foreground mb-2\">\n                The page you're looking for doesn't exist.\n              </p>\n              \n              <p className=\"text-sm text-muted-foreground mb-8\">\n                Requested path: <code className=\"bg-muted px-2 py-1 rounded text-xs\">{location}</code>\n              </p>\n\n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                <Link href=\"/\">\n                  <Button className=\"w-full sm:w-auto\" data-testid=\"button-home\">\n                    <Home className=\"w-4 h-4 mr-2\" />\n                    Go Home\n                  </Button>\n                </Link>\n                \n                <Button \n                  variant=\"outline\" \n                  onClick={() => window.history.back()}\n                  className=\"w-full sm:w-auto\"\n                  data-testid=\"button-back\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Go Back\n                </Button>\n              </div>\n\n              <div className=\"mt-8 p-4 bg-muted/50 rounded-lg text-left\">\n                <h3 className=\"text-sm font-medium mb-2\">Available Pages:</h3>\n                <div className=\"text-xs text-muted-foreground space-y-1\">\n                  <div>• <Link href=\"/\" className=\"hover:underline\">/</Link> - Home</div>\n                  <div>• <Link href=\"/campaigns\" className=\"hover:underline\">/campaigns</Link> - Browse Campaigns</div>\n                  <div>• <Link href=\"/create\" className=\"hover:underline\">/create</Link> - Create Campaign</div>\n                  <div>• <Link href=\"/dashboard\" className=\"hover:underline\">/dashboard</Link> - Dashboard</div>\n                  <div>• <Link href=\"/kyc\" className=\"hover:underline\">/kyc</Link> - KYC Verification</div>\n                  <div>• <Link href=\"/explorer\" className=\"hover:underline\">/explorer</Link> - Explorer</div>\n                  <div>• <Link href=\"/auth\" className=\"hover:underline\">/auth</Link> - Authentication</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3685},"client/src/components/admin/AdminDashboard.tsx":{"content":"import { useState } from \"react\";\nimport KYCManagement from \"./KYCManagement\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Users, \n  TrendingUp, \n  AlertTriangle, \n  CheckCircle, \n  XCircle,\n  Eye,\n  Shield,\n  DollarSign,\n  Flag,\n  UserX,\n  Edit,\n  Trash2,\n  Mail,\n  RefreshCw,\n  Download,\n  Search,\n  Filter\n} from \"lucide-react\";\nimport type { User, Campaign, ReinstatementRequest } from \"@shared/schema\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { BackButton } from \"@/components/navigation/BackButton\";\n\n// Component to display user's campaigns\nfunction UserCampaignsView({ userId }: { userId: string }) {\n  const { data: userCampaigns = [] } = useQuery<any[]>({\n    queryKey: [`/api/admin/users/${userId}/campaigns`],\n  });\n\n  const { data: userContributions = [] } = useQuery<any[]>({\n    queryKey: [`/api/admin/users/${userId}/contributions`],\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h4 className=\"font-medium mb-4\">Created Campaigns ({userCampaigns.length})</h4>\n        {userCampaigns.length === 0 ? (\n          <p className=\"text-sm text-muted-foreground\">No campaigns created</p>\n        ) : (\n          <div className=\"space-y-2\">\n            {userCampaigns.map((campaign: any) => (\n              <div key={campaign.id} className=\"flex items-center justify-between p-3 border rounded\">\n                <div>\n                  <p className=\"font-medium\">{campaign.title}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Goal: ${campaign.goalAmount} | Raised: ${campaign.currentAmount || '0'}\n                  </p>\n                </div>\n                <Badge variant={campaign.status === \"active\" ? \"default\" : campaign.status === \"pending_approval\" ? \"secondary\" : \"destructive\"}>\n                  {campaign.status.replace('_', ' ')}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n      \n      <div>\n        <h4 className=\"font-medium mb-4\">Contributions Made ({userContributions.length})</h4>\n        {userContributions.length === 0 ? (\n          <p className=\"text-sm text-muted-foreground\">No contributions made</p>\n        ) : (\n          <div className=\"space-y-2\">\n            {userContributions.map((contribution: any) => (\n              <div key={contribution.id} className=\"flex items-center justify-between p-3 border rounded\">\n                <div>\n                  <p className=\"font-medium\">${contribution.amount} {contribution.currency}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {new Date(contribution.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n                <Badge variant=\"outline\">{contribution.paymentMethod}</Badge>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\ninterface AdminStats {\n  totalUsers: number;\n  totalCampaigns: number;\n  pendingKyc: number;\n  flaggedUsers: number;\n  pendingReinstatements: number;\n  totalRaised: string;\n}\n\nexport function AdminDashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedTab, setSelectedTab] = useState(\"overview\");\n  const [userFilter, setUserFilter] = useState(\"\");\n  const [flaggedFilter, setFlaggedFilter] = useState(\"all\");\n  const [selectedUser, setSelectedUser] = useState<any>(null);\n  const [flagUserDialog, setFlagUserDialog] = useState(false);\n  const [flagReason, setFlagReason] = useState(\"\");\n  const [editUserDialog, setEditUserDialog] = useState(false);\n  const [notifyUserDialog, setNotifyUserDialog] = useState(false);\n  const [suspendUserDialog, setSuspendUserDialog] = useState(false);\n  const [resetPasswordDialog, setResetPasswordDialog] = useState(false);\n  const [deleteUserDialog, setDeleteUserDialog] = useState(false);\n  const [userCampaignsDialog, setUserCampaignsDialog] = useState(false);\n  const [notificationTitle, setNotificationTitle] = useState(\"\");\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\n  const [notificationType, setNotificationType] = useState(\"info\");\n  const [suspendReason, setSuspendReason] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [editedUser, setEditedUser] = useState<any>({});\n\n  // Fetch real data from APIs\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const { data: campaigns = [] } = useQuery<Campaign[]>({\n    queryKey: [\"/api/admin/campaigns\"],\n  });\n\n  const { data: reinstatementRequests = [] } = useQuery<ReinstatementRequest[]>({\n    queryKey: [\"/api/admin/reinstatement-requests\"],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/stats\"],\n  });\n\n  // Calculate admin stats from real data\n  const adminStats: AdminStats = {\n    totalUsers: users.length,\n    totalCampaigns: campaigns.length,\n    pendingKyc: users.filter(user => user.kycStatus === \"pending\").length,\n    flaggedUsers: users.filter(user => user.isFlagged).length,\n    pendingReinstatements: reinstatementRequests.filter(req => req.status === \"pending\").length,\n    totalRaised: (stats as any)?.totalRaised || \"0\"\n  };\n\n  // Filter users based on search and flags\n  const filteredUsers = users.filter(user => {\n    const matchesSearch = userFilter === \"\" || \n      user.email.toLowerCase().includes(userFilter.toLowerCase()) ||\n      (user.firstName + \" \" + user.lastName).toLowerCase().includes(userFilter.toLowerCase());\n    \n    const matchesFlag = flaggedFilter === \"all\" ||\n      (flaggedFilter === \"flagged\" && user.isFlagged) ||\n      (flaggedFilter === \"normal\" && !user.isFlagged);\n      \n    return matchesSearch && matchesFlag;\n  });\n\n  // User management mutations\n  const flagUserMutation = useMutation({\n    mutationFn: async ({ userId, reason }: { userId: string; reason: string }) => {\n      return apiRequest(\"PUT\", `/api/admin/users/${userId}/flag`, { reason });\n    },\n    onSuccess: () => {\n      toast({ title: \"User flagged successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setFlagUserDialog(false);\n      setFlagReason(\"\");\n    },\n    onError: () => {\n      toast({ title: \"Failed to flag user\", variant: \"destructive\" });\n    }\n  });\n\n  const unflagUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(\"PUT\", `/api/admin/users/${userId}/unflag`, {});\n    },\n    onSuccess: () => {\n      toast({ title: \"User unflagged successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to unflag user\", variant: \"destructive\" });\n    }\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/users/${userId}`, {});\n    },\n    onSuccess: () => {\n      toast({ title: \"User deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setDeleteUserDialog(false);\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete user\", variant: \"destructive\" });\n    }\n  });\n\n  const suspendUserMutation = useMutation({\n    mutationFn: async ({ userId, reason }: { userId: string; reason: string }) => {\n      return apiRequest(\"PUT\", `/api/admin/users/${userId}/suspend`, { reason });\n    },\n    onSuccess: () => {\n      toast({ title: \"User suspended successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setSuspendUserDialog(false);\n      setSuspendReason(\"\");\n    },\n    onError: () => {\n      toast({ title: \"Failed to suspend user\", variant: \"destructive\" });\n    }\n  });\n\n  const unsuspendUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(\"PUT\", `/api/admin/users/${userId}/unsuspend`, {});\n    },\n    onSuccess: () => {\n      toast({ title: \"User unsuspended successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to unsuspend user\", variant: \"destructive\" });\n    }\n  });\n\n  const editUserMutation = useMutation({\n    mutationFn: async ({ userId, updates }: { userId: string; updates: any }) => {\n      return apiRequest(\"PUT\", `/api/admin/users/${userId}`, updates);\n    },\n    onSuccess: () => {\n      toast({ title: \"User updated successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setEditUserDialog(false);\n      setEditedUser({});\n    },\n    onError: () => {\n      toast({ title: \"Failed to update user\", variant: \"destructive\" });\n    }\n  });\n\n  const notifyUserMutation = useMutation({\n    mutationFn: async ({ userId, title, message, type }: { userId: string; title: string; message: string; type: string }) => {\n      return apiRequest(\"POST\", `/api/admin/users/${userId}/notify`, { title, message, type });\n    },\n    onSuccess: () => {\n      toast({ title: \"Notification sent successfully\" });\n      setNotifyUserDialog(false);\n      setNotificationTitle(\"\");\n      setNotificationMessage(\"\");\n      setNotificationType(\"info\");\n    },\n    onError: () => {\n      toast({ title: \"Failed to send notification\", variant: \"destructive\" });\n    }\n  });\n\n  const resetPasswordMutation = useMutation({\n    mutationFn: async ({ userId, newPassword }: { userId: string; newPassword: string }) => {\n      return apiRequest(\"POST\", `/api/admin/users/${userId}/reset-password`, { newPassword });\n    },\n    onSuccess: () => {\n      toast({ title: \"Password reset successfully\" });\n      setResetPasswordDialog(false);\n      setNewPassword(\"\");\n    },\n    onError: () => {\n      toast({ title: \"Failed to reset password\", variant: \"destructive\" });\n    }\n  });\n\n  const reinstatementMutation = useMutation({\n    mutationFn: async ({ id, status, adminComments }: { id: string; status: string; adminComments?: string }) => {\n      return apiRequest(\"PUT\", `/api/admin/reinstatement-requests/${id}`, { status, adminComments });\n    },\n    onSuccess: () => {\n      toast({ title: \"Reinstatement request updated successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reinstatement-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update reinstatement request\", variant: \"destructive\" });\n    }\n  });\n\n  const handleCampaignAction = async (campaignId: string, action: \"approve\" | \"reject\") => {\n    try {\n      await apiRequest(\"PUT\", `/api/admin/campaigns/${campaignId}/status`, { \n        status: action === \"approve\" ? \"active\" : \"rejected\" \n      });\n      toast({\n        title: \"Campaign Updated\",\n        description: `Campaign has been ${action}ed.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/campaigns\"] });\n    } catch (error) {\n      toast({\n        title: \"Error\", \n        description: \"Failed to update campaign.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Admin Dashboard</h1>\n          <p className=\"text-muted-foreground\">Manage users, campaigns, and platform settings</p>\n        </div>\n        <BackButton to=\"/dashboard\" label=\"Back to Dashboard\" />\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{adminStats.totalUsers.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">Registered users</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Campaigns</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{adminStats.totalCampaigns}</div>\n            <p className=\"text-xs text-muted-foreground\">All campaigns</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending KYC</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{adminStats.pendingKyc}</div>\n            <p className=\"text-xs text-muted-foreground\">Requires review</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Flagged Users</CardTitle>\n            <Flag className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{adminStats.flaggedUsers}</div>\n            <p className=\"text-xs text-muted-foreground\">Restricted access</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Raised</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{adminStats.totalRaised} ETH</div>\n            <p className=\"text-xs text-muted-foreground\">Platform lifetime</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Management Tabs */}\n      <Tabs value={selectedTab} onValueChange={setSelectedTab}>\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"users\">Users ({users.length})</TabsTrigger>\n          <TabsTrigger value=\"campaigns\">Campaigns ({campaigns.length})</TabsTrigger>\n          <TabsTrigger value=\"flagged\">Flagged Users ({adminStats.flaggedUsers})</TabsTrigger>\n          <TabsTrigger value=\"reinstatements\">Reinstatements ({adminStats.pendingReinstatements})</TabsTrigger>\n          <TabsTrigger value=\"kyc\">KYC Management</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Platform Overview</CardTitle>\n              <CardDescription>\n                Recent activity and platform health metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium\">Recent Activity</h4>\n                    <div className=\"text-sm text-muted-foreground space-y-1\">\n                      <p>• 5 new campaigns submitted today</p>\n                      <p>• 12 users completed KYC verification</p>\n                      <p>• $45,230 raised in the last 24 hours</p>\n                      <p>• 23 successful transactions processed</p>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium\">System Health</h4>\n                    <div className=\"text-sm space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                        <span>Database: Healthy</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                        <span>Payment Processing: Online</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                        <span>Blockchain Sync: Active</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"users\">\n          <Card>\n            <CardHeader>\n              <CardTitle>User Management</CardTitle>\n              <CardDescription>\n                Comprehensive user account management and monitoring\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {/* Search and Filter Controls */}\n              <div className=\"flex items-center gap-4 mb-6\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search users by name or email...\"\n                    value={userFilter}\n                    onChange={(e) => setUserFilter(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n                <Select value={flaggedFilter} onValueChange={setFlaggedFilter}>\n                  <SelectTrigger className=\"w-48\">\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Users</SelectItem>\n                    <SelectItem value=\"normal\">Normal Users</SelectItem>\n                    <SelectItem value=\"flagged\">Flagged Users</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>User</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>KYC Status</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Joined</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredUsers.map((user) => (\n                    <TableRow key={user.id}>\n                      <TableCell>\n                        <div className=\"font-medium\">\n                          {user.firstName} {user.lastName}\n                        </div>\n                      </TableCell>\n                      <TableCell>{user.email}</TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={user.kycStatus === \"approved\" ? \"default\" : \n                                  user.kycStatus === \"pending\" ? \"secondary\" : \"destructive\"}\n                        >\n                          {user.kycStatus}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {user.isFlagged ? (\n                          <Badge variant=\"destructive\" className=\"flex items-center gap-1\">\n                            <Flag className=\"h-3 w-3\" />\n                            Flagged\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"default\">Active</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {new Date(user.createdAt || \"\").toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-1\">\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"max-w-2xl\">\n                              <DialogHeader>\n                                <DialogTitle>User Profile: {user.firstName} {user.lastName}</DialogTitle>\n                                <DialogDescription>\n                                  Detailed user information and activity\n                                </DialogDescription>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <div>\n                                    <label className=\"text-sm font-medium\">Email</label>\n                                    <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                                  </div>\n                                  <div>\n                                    <label className=\"text-sm font-medium\">KYC Status</label>\n                                    <p className=\"text-sm text-muted-foreground\">{user.kycStatus}</p>\n                                  </div>\n                                  <div>\n                                    <label className=\"text-sm font-medium\">Wallet Address</label>\n                                    <p className=\"text-sm text-muted-foreground font-mono\">{user.walletAddress || \"Not connected\"}</p>\n                                  </div>\n                                  <div>\n                                    <label className=\"text-sm font-medium\">Join Date</label>\n                                    <p className=\"text-sm text-muted-foreground\">{new Date(user.createdAt || \"\").toLocaleDateString()}</p>\n                                  </div>\n                                </div>\n                                {user.isFlagged && (\n                                  <div className=\"p-3 bg-red-50 border border-red-200 rounded\">\n                                    <div className=\"flex items-center gap-2\">\n                                      <Flag className=\"h-4 w-4 text-red-600\" />\n                                      <span className=\"font-medium text-red-800\">Account Flagged</span>\n                                    </div>\n                                    <p className=\"text-sm text-red-700 mt-1\">\n                                      Reason: {user.flaggedReason}\n                                    </p>\n                                    <p className=\"text-xs text-red-600 mt-1\">\n                                      Flagged by: {user.flaggedBy} on {new Date(user.flaggedAt || \"\").toLocaleDateString()}\n                                    </p>\n                                  </div>\n                                )}\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n                          \n                          {!user.isFlagged ? (\n                            <Dialog open={flagUserDialog && selectedUser?.id === user.id} onOpenChange={(open) => {\n                              setFlagUserDialog(open);\n                              if (open) setSelectedUser(user);\n                              else { setSelectedUser(null); setFlagReason(\"\"); }\n                            }}>\n                              <DialogTrigger asChild>\n                                <Button size=\"sm\" variant=\"outline\" className=\"text-red-600\">\n                                  <Flag className=\"h-4 w-4\" />\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent>\n                                <DialogHeader>\n                                  <DialogTitle>Flag User Account</DialogTitle>\n                                  <DialogDescription>\n                                    Flag this user account to restrict their access to platform features.\n                                  </DialogDescription>\n                                </DialogHeader>\n                                <div className=\"space-y-4\">\n                                  <div>\n                                    <label className=\"text-sm font-medium\">Reason for flagging</label>\n                                    <Textarea\n                                      value={flagReason}\n                                      onChange={(e) => setFlagReason(e.target.value)}\n                                      placeholder=\"Explain why this user is being flagged...\"\n                                      className=\"mt-1\"\n                                    />\n                                  </div>\n                                  <div className=\"flex justify-end gap-2\">\n                                    <Button variant=\"outline\" onClick={() => setFlagUserDialog(false)}>\n                                      Cancel\n                                    </Button>\n                                    <Button\n                                      variant=\"destructive\"\n                                      onClick={() => flagUserMutation.mutate({ userId: user.id, reason: flagReason })}\n                                      disabled={!flagReason.trim() || flagUserMutation.isPending}\n                                    >\n                                      {flagUserMutation.isPending ? \"Flagging...\" : \"Flag User\"}\n                                    </Button>\n                                  </div>\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                          ) : (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"text-green-600\"\n                              onClick={() => unflagUserMutation.mutate(user.id)}\n                              disabled={unflagUserMutation.isPending}\n                            >\n                              <CheckCircle className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                          \n                          <Dialog open={editUserDialog && selectedUser?.id === user.id} onOpenChange={(open) => {\n                            setEditUserDialog(open);\n                            if (open) {\n                              setSelectedUser(user);\n                              setEditedUser({\n                                firstName: user.firstName || \"\",\n                                lastName: user.lastName || \"\",\n                                email: user.email,\n                                walletAddress: user.walletAddress || \"\"\n                              });\n                            } else {\n                              setSelectedUser(null);\n                              setEditedUser({});\n                            }\n                          }}>\n                            <DialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\" data-testid={`button-edit-user-${user.id}`}>\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Edit User Details</DialogTitle>\n                                <DialogDescription>\n                                  Update user's basic information\n                                </DialogDescription>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <div>\n                                    <label className=\"text-sm font-medium\">First Name</label>\n                                    <Input\n                                      value={editedUser.firstName || \"\"}\n                                      onChange={(e) => setEditedUser((prev: any) => ({ ...prev, firstName: e.target.value }))}\n                                      data-testid=\"input-edit-firstname\"\n                                    />\n                                  </div>\n                                  <div>\n                                    <label className=\"text-sm font-medium\">Last Name</label>\n                                    <Input\n                                      value={editedUser.lastName || \"\"}\n                                      onChange={(e) => setEditedUser((prev: any) => ({ ...prev, lastName: e.target.value }))}\n                                      data-testid=\"input-edit-lastname\"\n                                    />\n                                  </div>\n                                </div>\n                                <div>\n                                  <label className=\"text-sm font-medium\">Email</label>\n                                  <Input\n                                    value={editedUser.email || \"\"}\n                                    onChange={(e) => setEditedUser((prev: any) => ({ ...prev, email: e.target.value }))}\n                                    data-testid=\"input-edit-email\"\n                                  />\n                                </div>\n                                <div>\n                                  <label className=\"text-sm font-medium\">Wallet Address</label>\n                                  <Input\n                                    value={editedUser.walletAddress || \"\"}\n                                    onChange={(e) => setEditedUser((prev: any) => ({ ...prev, walletAddress: e.target.value }))}\n                                    placeholder=\"0x...\"\n                                    data-testid=\"input-edit-wallet\"\n                                  />\n                                </div>\n                                <div className=\"flex justify-end gap-2\">\n                                  <Button variant=\"outline\" onClick={() => setEditUserDialog(false)}>\n                                    Cancel\n                                  </Button>\n                                  <Button\n                                    onClick={() => editUserMutation.mutate({ userId: user.id, updates: editedUser })}\n                                    disabled={editUserMutation.isPending}\n                                    data-testid=\"button-save-user-edit\"\n                                  >\n                                    {editUserMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                                  </Button>\n                                </div>\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n                          \n                          <Dialog open={notifyUserDialog && selectedUser?.id === user.id} onOpenChange={(open) => {\n                            setNotifyUserDialog(open);\n                            if (open) setSelectedUser(user);\n                            else {\n                              setSelectedUser(null);\n                              setNotificationTitle(\"\");\n                              setNotificationMessage(\"\");\n                              setNotificationType(\"info\");\n                            }\n                          }}>\n                            <DialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\" data-testid={`button-notify-user-${user.id}`}>\n                                <Mail className=\"h-4 w-4\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Send Notification</DialogTitle>\n                                <DialogDescription>\n                                  Send a direct message to {user.firstName} {user.lastName}\n                                </DialogDescription>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <label className=\"text-sm font-medium\">Title</label>\n                                  <Input\n                                    value={notificationTitle}\n                                    onChange={(e) => setNotificationTitle(e.target.value)}\n                                    placeholder=\"Notification title\"\n                                    data-testid=\"input-notification-title\"\n                                  />\n                                </div>\n                                <div>\n                                  <label className=\"text-sm font-medium\">Message</label>\n                                  <Textarea\n                                    value={notificationMessage}\n                                    onChange={(e) => setNotificationMessage(e.target.value)}\n                                    placeholder=\"Your message...\"\n                                    rows={4}\n                                    data-testid=\"textarea-notification-message\"\n                                  />\n                                </div>\n                                <div>\n                                  <label className=\"text-sm font-medium\">Type</label>\n                                  <Select value={notificationType} onValueChange={setNotificationType}>\n                                    <SelectTrigger data-testid=\"select-notification-type\">\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"info\">Info</SelectItem>\n                                      <SelectItem value=\"success\">Success</SelectItem>\n                                      <SelectItem value=\"warning\">Warning</SelectItem>\n                                      <SelectItem value=\"error\">Error</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                                <div className=\"flex justify-end gap-2\">\n                                  <Button variant=\"outline\" onClick={() => setNotifyUserDialog(false)}>\n                                    Cancel\n                                  </Button>\n                                  <Button\n                                    onClick={() => notifyUserMutation.mutate({ \n                                      userId: user.id, \n                                      title: notificationTitle, \n                                      message: notificationMessage, \n                                      type: notificationType \n                                    })}\n                                    disabled={!notificationTitle || !notificationMessage || notifyUserMutation.isPending}\n                                    data-testid=\"button-send-notification\"\n                                  >\n                                    {notifyUserMutation.isPending ? \"Sending...\" : \"Send Notification\"}\n                                  </Button>\n                                </div>\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n                          \n                          <Dialog open={userCampaignsDialog && selectedUser?.id === user.id} onOpenChange={(open) => {\n                            setUserCampaignsDialog(open);\n                            if (open) setSelectedUser(user);\n                            else setSelectedUser(null);\n                          }}>\n                            <DialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-campaigns-${user.id}`}>\n                                <TrendingUp className=\"h-4 w-4\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"max-w-4xl\">\n                              <DialogHeader>\n                                <DialogTitle>User Campaigns: {user.firstName} {user.lastName}</DialogTitle>\n                                <DialogDescription>\n                                  All campaigns created by this user\n                                </DialogDescription>\n                              </DialogHeader>\n                              <UserCampaignsView userId={user.id} />\n                            </DialogContent>\n                          </Dialog>\n                          \n                          {user.isFlagged && user.flaggedReason?.startsWith(\"SUSPENDED:\") ? (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"text-green-600\"\n                              onClick={() => unsuspendUserMutation.mutate(user.id)}\n                              disabled={unsuspendUserMutation.isPending}\n                              data-testid={`button-unsuspend-user-${user.id}`}\n                            >\n                              <RefreshCw className=\"h-4 w-4\" />\n                            </Button>\n                          ) : (\n                            <Dialog open={suspendUserDialog && selectedUser?.id === user.id} onOpenChange={(open) => {\n                              setSuspendUserDialog(open);\n                              if (open) setSelectedUser(user);\n                              else {\n                                setSelectedUser(null);\n                                setSuspendReason(\"\");\n                              }\n                            }}>\n                              <DialogTrigger asChild>\n                                <Button size=\"sm\" variant=\"outline\" className=\"text-orange-600\" data-testid={`button-suspend-user-${user.id}`}>\n                                  <UserX className=\"h-4 w-4\" />\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent>\n                                <DialogHeader>\n                                  <DialogTitle>Suspend User Account</DialogTitle>\n                                  <DialogDescription>\n                                    Temporarily suspend this user's account access\n                                  </DialogDescription>\n                                </DialogHeader>\n                                <div className=\"space-y-4\">\n                                  <div>\n                                    <label className=\"text-sm font-medium\">Reason for suspension</label>\n                                    <Textarea\n                                      value={suspendReason}\n                                      onChange={(e) => setSuspendReason(e.target.value)}\n                                      placeholder=\"Explain why this user is being suspended...\"\n                                      data-testid=\"textarea-suspend-reason\"\n                                    />\n                                  </div>\n                                  <div className=\"flex justify-end gap-2\">\n                                    <Button variant=\"outline\" onClick={() => setSuspendUserDialog(false)}>\n                                      Cancel\n                                    </Button>\n                                    <Button\n                                      variant=\"destructive\"\n                                      onClick={() => suspendUserMutation.mutate({ userId: user.id, reason: suspendReason })}\n                                      disabled={!suspendReason.trim() || suspendUserMutation.isPending}\n                                      data-testid=\"button-confirm-suspend\"\n                                    >\n                                      {suspendUserMutation.isPending ? \"Suspending...\" : \"Suspend User\"}\n                                    </Button>\n                                  </div>\n                                </div>\n                              </DialogContent>\n                            </Dialog>\n                          )}\n                          \n                          <Dialog open={resetPasswordDialog && selectedUser?.id === user.id} onOpenChange={(open) => {\n                            setResetPasswordDialog(open);\n                            if (open) setSelectedUser(user);\n                            else {\n                              setSelectedUser(null);\n                              setNewPassword(\"\");\n                            }\n                          }}>\n                            <DialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\" data-testid={`button-reset-password-${user.id}`}>\n                                <RefreshCw className=\"h-4 w-4\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Reset User Password</DialogTitle>\n                                <DialogDescription>\n                                  Set a new password for {user.firstName} {user.lastName}\n                                </DialogDescription>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <label className=\"text-sm font-medium\">New Password</label>\n                                  <Input\n                                    type=\"password\"\n                                    value={newPassword}\n                                    onChange={(e) => setNewPassword(e.target.value)}\n                                    placeholder=\"Enter new password (min 6 characters)\"\n                                    data-testid=\"input-new-password\"\n                                  />\n                                </div>\n                                <div className=\"flex justify-end gap-2\">\n                                  <Button variant=\"outline\" onClick={() => setResetPasswordDialog(false)}>\n                                    Cancel\n                                  </Button>\n                                  <Button\n                                    onClick={() => resetPasswordMutation.mutate({ userId: user.id, newPassword })}\n                                    disabled={newPassword.length < 6 || resetPasswordMutation.isPending}\n                                    data-testid=\"button-confirm-reset-password\"\n                                  >\n                                    {resetPasswordMutation.isPending ? \"Resetting...\" : \"Reset Password\"}\n                                  </Button>\n                                </div>\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n                          \n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              window.open(`/api/admin/users/${user.id}/export`, '_blank');\n                            }}\n                            data-testid={`button-export-user-${user.id}`}\n                          >\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                          \n                          <Dialog open={deleteUserDialog && selectedUser?.id === user.id} onOpenChange={(open) => {\n                            setDeleteUserDialog(open);\n                            if (open) setSelectedUser(user);\n                            else setSelectedUser(null);\n                          }}>\n                            <DialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\" className=\"text-red-600\" data-testid={`button-delete-user-${user.id}`}>\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Delete User Account</DialogTitle>\n                                <DialogDescription>\n                                  This action cannot be undone. This will permanently delete {user.firstName} {user.lastName}'s account and all associated data.\n                                </DialogDescription>\n                              </DialogHeader>\n                              <div className=\"flex justify-end gap-2\">\n                                <Button variant=\"outline\" onClick={() => setDeleteUserDialog(false)}>\n                                  Cancel\n                                </Button>\n                                <Button\n                                  variant=\"destructive\"\n                                  onClick={() => deleteUserMutation.mutate(user.id)}\n                                  disabled={deleteUserMutation.isPending}\n                                  data-testid=\"button-confirm-delete-user\"\n                                >\n                                  {deleteUserMutation.isPending ? \"Deleting...\" : \"Delete Permanently\"}\n                                </Button>\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"campaigns\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Campaign Management</CardTitle>\n              <CardDescription>\n                Review and manage campaign submissions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Campaign</TableHead>\n                    <TableHead>Creator</TableHead>\n                    <TableHead>Goal</TableHead>\n                    <TableHead>Raised</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {campaigns.slice(0, 5).map((campaign: any) => (\n                    <TableRow key={campaign.id}>\n                      <TableCell>\n                        <div className=\"font-medium\">{campaign.title}</div>\n                      </TableCell>\n                      <TableCell>{campaign.creatorId}</TableCell>\n                      <TableCell>${campaign.goalAmount}</TableCell>\n                      <TableCell>${campaign.currentAmount}</TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={campaign.status === \"active\" ? \"default\" : \n                                  campaign.status === \"pending_approval\" ? \"secondary\" : \"destructive\"}\n                        >\n                          {campaign.status.replace('_', ' ')}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View\n                          </Button>\n                          {campaign.status === \"pending_approval\" && (\n                            <>\n                              <Button \n                                size=\"sm\"\n                                onClick={() => handleCampaignAction(campaign.id, \"approve\")}\n                              >\n                                Approve\n                              </Button>\n                              <Button \n                                size=\"sm\" \n                                variant=\"destructive\"\n                                onClick={() => handleCampaignAction(campaign.id, \"reject\")}\n                              >\n                                Reject\n                              </Button>\n                            </>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"flagged\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Flagged Users</CardTitle>\n              <CardDescription>\n                Manage users with restricted access and review flagging reasons\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>User</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Flagged Reason</TableHead>\n                    <TableHead>Flagged By</TableHead>\n                    <TableHead>Date Flagged</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {users.filter(user => user.isFlagged).map((user) => (\n                    <TableRow key={user.id}>\n                      <TableCell>\n                        <div className=\"font-medium\">\n                          {user.firstName} {user.lastName}\n                        </div>\n                      </TableCell>\n                      <TableCell>{user.email}</TableCell>\n                      <TableCell className=\"max-w-xs\">\n                        <p className=\"text-sm truncate\" title={user.flaggedReason || \"\"}>\n                          {user.flaggedReason}\n                        </p>\n                      </TableCell>\n                      <TableCell>{user.flaggedBy}</TableCell>\n                      <TableCell>\n                        {user.flaggedAt ? new Date(user.flaggedAt).toLocaleDateString() : \"N/A\"}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"text-green-600\"\n                            onClick={() => unflagUserMutation.mutate(user.id)}\n                            disabled={unflagUserMutation.isPending}\n                          >\n                            <CheckCircle className=\"h-4 w-4 mr-1\" />\n                            Unflag\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              \n              {users.filter(user => user.isFlagged).length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Shield className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No flagged users</p>\n                  <p className=\"text-sm\">All users currently have normal access</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"reinstatements\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Reinstatement Requests</CardTitle>\n              <CardDescription>\n                Review and process user reinstatement requests\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>User</TableHead>\n                    <TableHead>Reason</TableHead>\n                    <TableHead>Additional Info</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Submitted</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {reinstatementRequests.map((request) => {\n                    const user = users.find(u => u.id === request.userId);\n                    return (\n                      <TableRow key={request.id}>\n                        <TableCell>\n                          <div className=\"font-medium\">\n                            {user ? `${user.firstName} ${user.lastName}` : \"Unknown User\"}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {user?.email}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"max-w-xs\">\n                          <p className=\"text-sm truncate\" title={request.reason}>\n                            {request.reason}\n                          </p>\n                        </TableCell>\n                        <TableCell className=\"max-w-xs\">\n                          <p className=\"text-sm truncate\" title={request.additionalInfo || \"\"}>\n                            {request.additionalInfo || \"N/A\"}\n                          </p>\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={request.status === \"approved\" ? \"default\" : \n                                    request.status === \"pending\" ? \"secondary\" : \"destructive\"}\n                          >\n                            {request.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {new Date(request.createdAt || \"\").toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>\n                          {request.status === \"pending\" && (\n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                size=\"sm\"\n                                onClick={() => reinstatementMutation.mutate({ id: request.id, status: \"approved\" })}\n                                disabled={reinstatementMutation.isPending}\n                              >\n                                <CheckCircle className=\"h-4 w-4 mr-1\" />\n                                Approve\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => reinstatementMutation.mutate({ id: request.id, status: \"rejected\" })}\n                                disabled={reinstatementMutation.isPending}\n                              >\n                                <XCircle className=\"h-4 w-4 mr-1\" />\n                                Reject\n                              </Button>\n                            </div>\n                          )}\n                          {request.status !== \"pending\" && (\n                            <Badge variant=\"outline\">\n                              {request.status === \"approved\" ? \"Approved\" : \"Rejected\"}\n                            </Badge>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n              \n              {reinstatementRequests.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <RefreshCw className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No reinstatement requests</p>\n                  <p className=\"text-sm\">User reinstatement requests will appear here</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"kyc\">\n          <KYCManagement />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":57954},"client/src/components/ai/campaign-assistant.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Lightbulb, \n  TrendingUp, \n  Target, \n  Zap,\n  Brain,\n  Sparkles,\n  BarChart3,\n  AlertCircle,\n  CheckCircle,\n  Loader2\n} from \"lucide-react\";\n\ninterface CampaignAssistantProps {\n  title?: string;\n  description?: string;\n  category?: string;\n  goalAmount?: number;\n  onTitleSuggestion?: (title: string) => void;\n  onDescriptionSuggestion?: (description: string) => void;\n}\n\ninterface AISuggestion {\n  type: \"info\" | \"warning\" | \"success\";\n  title: string;\n  content: string;\n  action?: string;\n}\n\nexport default function CampaignAssistant({ \n  title = \"\", \n  description = \"\", \n  category = \"\", \n  goalAmount = 0,\n  onTitleSuggestion,\n  onDescriptionSuggestion \n}: CampaignAssistantProps) {\n  const { isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [suggestions, setSuggestions] = useState<AISuggestion[]>([]);\n  const [credibilityScore, setCredibilityScore] = useState(0);\n  const [fundingPrediction, setFundingPrediction] = useState<{\n    successProbability: number;\n    recommendedGoal: number;\n    marketInsights: string[];\n  } | null>(null);\n\n  // Title optimization mutation\n  const optimizeTitleMutation = useMutation({\n    mutationFn: async (title: string) => {\n      return await apiRequest(\"POST\", \"/api/ai/optimize-title\", { title });\n    },\n    onSuccess: (data) => {\n      setSuggestions(prev => [\n        ...prev.filter(s => s.title !== \"Title Optimization\"),\n        {\n          type: \"info\",\n          title: \"Title Optimization\",\n          content: `AI suggests: \"${data.suggestions[0]}\" for ${data.engagementBoost} higher engagement`,\n          action: \"Apply Suggestion\"\n        }\n      ]);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Please log in to use AI assistance.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      console.error(\"Title optimization failed:\", error);\n    },\n  });\n\n  // Description enhancement mutation\n  const enhanceDescriptionMutation = useMutation({\n    mutationFn: async (data: { description: string; category: string }) => {\n      return await apiRequest(\"POST\", \"/api/ai/enhance-description\", data);\n    },\n    onSuccess: (data) => {\n      setSuggestions(prev => [\n        ...prev.filter(s => s.title !== \"Description Enhancement\"),\n        {\n          type: \"success\",\n          title: \"Description Enhancement\",\n          content: `AI improved your description focusing on: ${data.keyImprovements.join(\", \")}`,\n          action: \"Apply Enhancement\"\n        }\n      ]);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Please log in to use AI assistance.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      console.error(\"Description enhancement failed:\", error);\n    },\n  });\n\n  // Credibility analysis mutation\n  const analyzeCredibilityMutation = useMutation({\n    mutationFn: async (campaignData: any) => {\n      return await apiRequest(\"POST\", \"/api/ai/analyze-credibility\", { campaignData });\n    },\n    onSuccess: (data) => {\n      setCredibilityScore(data.score);\n      setSuggestions(prev => [\n        ...prev.filter(s => s.title !== \"Credibility Analysis\"),\n        ...data.recommendations.map((rec: string, index: number) => ({\n          type: data.score > 7 ? \"success\" : data.score > 5 ? \"warning\" : \"info\",\n          title: \"Credibility Analysis\",\n          content: rec,\n        }))\n      ]);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Please log in to use AI assistance.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      console.error(\"Credibility analysis failed:\", error);\n    },\n  });\n\n  // Funding prediction mutation\n  const predictFundingMutation = useMutation({\n    mutationFn: async (campaignData: any) => {\n      return await apiRequest(\"POST\", \"/api/ai/predict-funding\", { campaignData });\n    },\n    onSuccess: (data) => {\n      setFundingPrediction(data);\n      setSuggestions(prev => [\n        ...prev.filter(s => s.title !== \"Funding Prediction\"),\n        {\n          type: data.successProbability > 0.7 ? \"success\" : data.successProbability > 0.4 ? \"warning\" : \"info\",\n          title: \"Funding Prediction\",\n          content: `${Math.round(data.successProbability * 100)}% success probability. Recommended goal: ${data.recommendedGoal} ETH`,\n          action: \"View Insights\"\n        }\n      ]);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Please log in to use AI assistance.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      console.error(\"Funding prediction failed:\", error);\n    },\n  });\n\n  // Auto-analyze when campaign data changes\n  useEffect(() => {\n    if (isAuthenticated && title && description && category) {\n      const campaignData = {\n        title,\n        description,\n        category,\n        goalAmount,\n        duration: 30, // Default 30 days\n      };\n\n      // Debounce AI calls\n      const timer = setTimeout(() => {\n        analyzeCredibilityMutation.mutate(campaignData);\n        predictFundingMutation.mutate(campaignData);\n      }, 1000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [title, description, category, goalAmount, isAuthenticated]);\n\n  const handleOptimizeTitle = () => {\n    if (title) {\n      optimizeTitleMutation.mutate(title);\n    }\n  };\n\n  const handleEnhanceDescription = () => {\n    if (description && category) {\n      enhanceDescriptionMutation.mutate({ description, category });\n    }\n  };\n\n  const handleApplySuggestion = (suggestion: AISuggestion) => {\n    if (suggestion.title === \"Title Optimization\" && onTitleSuggestion) {\n      // Extract suggested title from content\n      const match = suggestion.content.match(/AI suggests: \"([^\"]+)\"/);\n      if (match) {\n        onTitleSuggestion(match[1]);\n        toast({\n          title: \"Title Updated\",\n          description: \"AI-optimized title has been applied.\",\n        });\n      }\n    } else if (suggestion.title === \"Description Enhancement\" && onDescriptionSuggestion) {\n      // This would need the enhanced description from the mutation response\n      toast({\n        title: \"Enhancement Applied\",\n        description: \"Description improvements have been applied.\",\n      });\n    }\n  };\n\n  const getSuggestionIcon = (type: string) => {\n    switch (type) {\n      case \"success\": return CheckCircle;\n      case \"warning\": return AlertCircle;\n      default: return Lightbulb;\n    }\n  };\n\n  const getSuggestionColor = (type: string) => {\n    switch (type) {\n      case \"success\": return \"text-cyber-green\";\n      case \"warning\": return \"text-cyber-yellow\";\n      default: return \"text-cyber-blue\";\n    }\n  };\n\n  const getSuggestionBg = (type: string) => {\n    switch (type) {\n      case \"success\": return \"bg-cyber-green/10 border-cyber-green/30\";\n      case \"warning\": return \"bg-cyber-yellow/10 border-cyber-yellow/30\";\n      default: return \"bg-cyber-blue/10 border-cyber-blue/30\";\n    }\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <Card className=\"glass-morphism border-white/20\">\n        <CardContent className=\"p-6 text-center\">\n          <Brain className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Log in to access AI assistance</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* AI Assistant Header */}\n      <Card className=\"glass-morphism border-white/20\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-cyber-blue to-cyber-purple rounded-full flex items-center justify-center\">\n              <Brain className=\"w-4 h-4 text-white\" />\n            </div>\n            AI Campaign Assistant\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Quick Actions */}\n          <div className=\"grid grid-cols-2 gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleOptimizeTitle}\n              disabled={!title || optimizeTitleMutation.isPending}\n              className=\"glass-morphism border-cyber-blue/50 hover:bg-cyber-blue/20\"\n            >\n              {optimizeTitleMutation.isPending ? (\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n              ) : (\n                <Sparkles className=\"w-4 h-4\" />\n              )}\n              <span className=\"ml-2\">Optimize Title</span>\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleEnhanceDescription}\n              disabled={!description || !category || enhanceDescriptionMutation.isPending}\n              className=\"glass-morphism border-cyber-purple/50 hover:bg-cyber-purple/20\"\n            >\n              {enhanceDescriptionMutation.isPending ? (\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n              ) : (\n                <Zap className=\"w-4 h-4\" />\n              )}\n              <span className=\"ml-2\">Enhance Text</span>\n            </Button>\n          </div>\n\n          {/* Credibility Score */}\n          {credibilityScore > 0 && (\n            <motion.div\n              initial={{ opacity: 0, scale: 0.95 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.3 }}\n              className=\"bg-muted/30 rounded-lg p-4\"\n            >\n              <div className=\"flex justify-between items-center mb-3\">\n                <span className=\"font-medium\">Campaign Credibility Score</span>\n                <Badge className={credibilityScore > 7 ? \"bg-cyber-green/20 text-cyber-green\" : \n                                credibilityScore > 5 ? \"bg-cyber-yellow/20 text-cyber-yellow\" : \n                                \"bg-red-500/20 text-red-400\"}>\n                  {credibilityScore.toFixed(1)}/10\n                </Badge>\n              </div>\n              <Progress \n                value={(credibilityScore / 10) * 100} \n                className=\"h-2 progress-glow\" \n              />\n              <div className=\"text-xs text-muted-foreground mt-2\">\n                Based on content quality, market analysis, and best practices\n              </div>\n            </motion.div>\n          )}\n\n          {/* Funding Prediction */}\n          {fundingPrediction && (\n            <motion.div\n              initial={{ opacity: 0, scale: 0.95 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.3, delay: 0.1 }}\n              className=\"bg-muted/30 rounded-lg p-4\"\n            >\n              <div className=\"flex justify-between items-center mb-3\">\n                <span className=\"font-medium\">Success Probability</span>\n                <Badge className={fundingPrediction.successProbability > 0.7 ? \"bg-cyber-green/20 text-cyber-green\" : \n                                fundingPrediction.successProbability > 0.4 ? \"bg-cyber-yellow/20 text-cyber-yellow\" : \n                                \"bg-red-500/20 text-red-400\"}>\n                  {Math.round(fundingPrediction.successProbability * 100)}%\n                </Badge>\n              </div>\n              <Progress \n                value={fundingPrediction.successProbability * 100} \n                className=\"h-2 progress-glow\" \n              />\n              <div className=\"text-xs text-muted-foreground mt-2\">\n                Recommended goal: {fundingPrediction.recommendedGoal} ETH\n              </div>\n            </motion.div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* AI Suggestions */}\n      {suggestions.length > 0 && (\n        <Card className=\"glass-morphism border-white/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5 text-cyber-green\" />\n              AI Recommendations\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {suggestions.map((suggestion, index) => {\n              const Icon = getSuggestionIcon(suggestion.type);\n              return (\n                <motion.div\n                  key={`${suggestion.title}-${index}`}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.3, delay: index * 0.1 }}\n                  className={`p-4 rounded-lg border ${getSuggestionBg(suggestion.type)}`}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <Icon className={`w-5 h-5 ${getSuggestionColor(suggestion.type)} flex-shrink-0 mt-0.5`} />\n                    <div className=\"flex-1\">\n                      <div className={`font-medium mb-1 ${getSuggestionColor(suggestion.type)}`}>\n                        {suggestion.title}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground mb-3\">\n                        {suggestion.content}\n                      </div>\n                      {suggestion.action && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleApplySuggestion(suggestion)}\n                          className=\"text-xs border-current hover:bg-current/10\"\n                        >\n                          {suggestion.action}\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </motion.div>\n              );\n            })}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Market Insights */}\n      {fundingPrediction?.marketInsights && fundingPrediction.marketInsights.length > 0 && (\n        <Card className=\"glass-morphism border-white/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"w-5 h-5 text-cyber-purple\" />\n              Market Insights\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {fundingPrediction.marketInsights.map((insight, index) => (\n                <motion.div\n                  key={index}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.3, delay: index * 0.1 }}\n                  className=\"flex items-start gap-3 p-3 bg-muted/30 rounded-lg\"\n                >\n                  <Target className=\"w-4 h-4 text-cyber-purple flex-shrink-0 mt-0.5\" />\n                  <div className=\"text-sm text-muted-foreground\">{insight}</div>\n                </motion.div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Empty State */}\n      {suggestions.length === 0 && !credibilityScore && !fundingPrediction && (\n        <Card className=\"glass-morphism border-white/20\">\n          <CardContent className=\"p-8 text-center\">\n            <Brain className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-muted-foreground mb-2\">AI Assistant Ready</p>\n            <p className=\"text-sm text-muted-foreground\">\n              Fill in your campaign details to get personalized AI recommendations\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":16219},"client/src/components/blockchain/network-stats.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { TrendingUp, Activity, Zap, Target } from \"lucide-react\";\n\nexport default function NetworkStats() {\n  const { data: stats } = useQuery<{\n    activeCampaigns: number;\n    successRate: number;\n  }>({\n    queryKey: [\"/api/stats\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const mockNetworkData = {\n    dailyVolume: \"47.3\",\n    dailyVolumeUsd: \"89,247\",\n    dailyVolumeChange: \"+12.4\",\n    gasPrice: \"0.02\",\n    gasPriceStatus: \"Low\",\n    activeCampaigns: stats?.activeCampaigns || 1247,\n    newCampaignsToday: 3,\n    successRate: stats?.successRate || 73.2,\n  };\n\n  return (\n    <Card className=\"glass-morphism rounded-2xl\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-bold\">Network Statistics</CardTitle>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Total Volume */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n            className=\"bg-muted/30 rounded-xl p-4 border border-white/10\"\n          >\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-muted-foreground flex items-center gap-2\">\n                <TrendingUp className=\"w-4 h-4\" />\n                24h Volume\n              </span>\n              <Badge className=\"bg-cyber-green/20 text-cyber-green font-mono text-sm\">\n                {mockNetworkData.dailyVolumeChange}%\n              </Badge>\n            </div>\n            <div className=\"font-mono text-2xl font-bold text-foreground\">\n              {mockNetworkData.dailyVolume} ETH\n            </div>\n            <div className=\"text-sm text-muted-foreground font-mono\">\n              ≈ ${mockNetworkData.dailyVolumeUsd} USD\n            </div>\n          </motion.div>\n\n          {/* Active Campaigns */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.1 }}\n            className=\"bg-muted/30 rounded-xl p-4 border border-white/10\"\n          >\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-muted-foreground flex items-center gap-2\">\n                <Activity className=\"w-4 h-4\" />\n                Active Campaigns\n              </span>\n              <Badge className=\"bg-cyber-blue/20 text-cyber-blue font-mono text-sm\">\n                +{mockNetworkData.newCampaignsToday} today\n              </Badge>\n            </div>\n            <div className=\"font-mono text-2xl font-bold text-foreground\">\n              {mockNetworkData.activeCampaigns.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">\n              Across 12 categories\n            </div>\n          </motion.div>\n\n          {/* Gas Tracker */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"bg-muted/30 rounded-xl p-4 border border-white/10\"\n          >\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-muted-foreground flex items-center gap-2\">\n                <Zap className=\"w-4 h-4\" />\n                Polygon Gas Price\n              </span>\n              <Badge className=\"bg-cyber-purple/20 text-cyber-purple font-mono text-sm\">\n                {mockNetworkData.gasPriceStatus}\n              </Badge>\n            </div>\n            <div className=\"font-mono text-2xl font-bold text-foreground\">\n              {mockNetworkData.gasPrice} GWEI\n            </div>\n            <div className=\"text-sm text-muted-foreground font-mono\">\n              ≈ $0.001 USD\n            </div>\n          </motion.div>\n\n          {/* Success Rate */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.3 }}\n            className=\"bg-muted/30 rounded-xl p-4 border border-white/10\"\n          >\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-muted-foreground flex items-center gap-2\">\n                <Target className=\"w-4 h-4\" />\n                Success Rate\n              </span>\n              <Badge className=\"bg-cyber-yellow/20 text-cyber-yellow font-mono text-sm\">\n                This month\n              </Badge>\n            </div>\n            <div className=\"font-mono text-2xl font-bold text-foreground\">\n              {mockNetworkData.successRate}%\n            </div>\n            <Progress \n              value={mockNetworkData.successRate} \n              className=\"mt-2 h-2 progress-glow\"\n            />\n          </motion.div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5172},"client/src/components/blockchain/transaction-feed.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ExternalLink, Activity } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Transaction } from \"@shared/schema\";\n\nexport default function TransactionFeed() {\n  const { data: transactions = [] } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\"],\n    refetchInterval: 5000, // Refresh every 5 seconds for real-time feel\n  });\n\n  const getTransactionTypeColor = (type: string) => {\n    const colors: Record<string, string> = {\n      contribution: \"bg-cyber-green/20 text-cyber-green border-cyber-green/20\",\n      withdrawal: \"bg-cyber-purple/20 text-cyber-purple border-cyber-purple/20\",\n      contract_creation: \"bg-cyber-yellow/20 text-cyber-yellow border-cyber-yellow/20\",\n    };\n    return colors[type] || \"bg-gray-500/20 text-gray-500 border-gray-500/20\";\n  };\n\n  return (\n    <Card className=\"glass-morphism rounded-2xl\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-bold flex items-center gap-3\">\n          <div className=\"w-3 h-3 bg-cyber-green rounded-full animate-pulse\"></div>\n          Live Transactions\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n          {transactions.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Activity className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No recent transactions</p>\n            </div>\n          ) : (\n            transactions.map((transaction, index) => (\n              <motion.div\n                key={transaction.id}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.3, delay: index * 0.1 }}\n                className=\"bg-muted/30 rounded-xl p-4 border border-white/10\"\n              >\n                <div className=\"flex justify-between items-start mb-2\">\n                  <Badge className={getTransactionTypeColor(transaction.transactionType)}>\n                    {transaction.transactionType.toUpperCase()}\n                  </Badge>\n                  <div className=\"font-mono text-xs text-muted-foreground\">\n                    {formatDistanceToNow(new Date(transaction.createdAt), { addSuffix: true })}\n                  </div>\n                </div>\n                \n                <div className=\"mb-2\">\n                  {transaction.campaignId && (\n                    <div className=\"text-sm text-muted-foreground mb-1\">\n                      Campaign Transaction\n                    </div>\n                  )}\n                  <div className=\"font-mono text-lg font-bold text-foreground\">\n                    {transaction.transactionType === \"withdrawal\" ? \"-\" : \"+\"}{transaction.amount} ETH\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between text-xs\">\n                  <span className=\"font-mono text-muted-foreground\">\n                    {transaction.fromAddress && (\n                      `${transaction.fromAddress.slice(0, 6)}...${transaction.fromAddress.slice(-4)}`\n                    )}\n                  </span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-cyber-blue hover:text-cyber-green h-auto p-0\"\n                  >\n                    <ExternalLink className=\"w-3 h-3 mr-1\" />\n                    View on Polygonscan\n                  </Button>\n                </div>\n              </motion.div>\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3935},"client/src/components/campaign/campaign-card.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Link } from \"wouter\";\nimport { Calendar, Users, ExternalLink } from \"lucide-react\";\nimport type { Campaign } from \"@shared/schema\";\n\ninterface CampaignCardProps {\n  campaign: Campaign;\n}\n\nexport default function CampaignCard({ campaign }: CampaignCardProps) {\n  const progress = (parseFloat(campaign.currentAmount || \"0\") / parseFloat(campaign.goalAmount || \"1\")) * 100;\n  const isCompleted = campaign.status === \"completed\";\n  const daysLeft = Math.max(0, Math.ceil((new Date(campaign.deadline).getTime() - Date.now()) / (1000 * 60 * 60 * 24)));\n\n  const getCategoryColor = (category: string) => {\n    const colors: Record<string, string> = {\n      Technology: \"bg-cyber-green/90\",\n      Gaming: \"bg-cyber-purple/90\",\n      DeFi: \"bg-cyber-yellow/90 text-black\",\n      Creative: \"bg-cyber-pink/90\",\n      GreenTech: \"bg-cyber-green/90\",\n      Research: \"bg-cyan-400/90 text-black\",\n    };\n    return colors[category] || \"bg-gray-500/90\";\n  };\n\n  return (\n    <Link href={`/campaigns/${campaign.id}`}>\n      <motion.div\n        whileHover={{ scale: 1.05 }}\n        transition={{ duration: 0.3 }}\n        className=\"cursor-pointer\"\n      >\n        <Card className=\"group glass-morphism rounded-2xl overflow-hidden hover:shadow-2xl hover:shadow-cyber-blue/20 transition-all duration-500 card-hover\">\n          {/* Image */}\n          <div className=\"relative h-48 overflow-hidden\">\n            <img \n              src={campaign.imageUrl || \"https://images.unsplash.com/photo-1622979135225-d2ba269cf1ac?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"} \n              alt={campaign.title || \"Campaign Image\"}\n              className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-700\" \n            />\n            <div className=\"absolute top-4 left-4\">\n              <Badge className={`${getCategoryColor(campaign.category)} px-3 py-1 rounded-full text-sm font-medium`}>\n                {campaign.category}\n              </Badge>\n            </div>\n            <div className=\"absolute top-4 right-4 bg-black/50 backdrop-blur-sm px-3 py-1 rounded-full text-sm font-mono\">\n              {Math.round(progress)}% funded\n            </div>\n          </div>\n\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-bold mb-2 group-hover:text-cyber-blue transition-colors duration-300\">\n              {campaign.title}\n            </h3>\n            <p className=\"text-muted-foreground mb-4 text-sm line-clamp-2\">\n              {campaign.description}\n            </p>\n\n            {/* Progress */}\n            <div className=\"mb-4\">\n              <div className=\"flex justify-between text-sm mb-2\">\n                <span className=\"text-muted-foreground\">Progress</span>\n                <span className=\"font-mono font-bold\">\n                  {campaign.currentAmount} / {campaign.goalAmount} {campaign.currency}\n                </span>\n              </div>\n              <Progress \n                value={progress} \n                className=\"h-2 progress-glow\"\n              />\n            </div>\n\n            {/* Stats */}\n            <div className=\"flex justify-between items-center text-sm\">\n              <div className=\"flex items-center gap-2 text-muted-foreground\">\n                <Users className=\"w-4 h-4\" />\n                <span className=\"font-mono\">{campaign.backerCount} backers</span>\n              </div>\n              <div className=\"flex items-center gap-2 text-muted-foreground\">\n                <Calendar className=\"w-4 h-4\" />\n                <span className=\"font-mono\">\n                  {isCompleted ? \"Successfully funded!\" : `${daysLeft} days left`}\n                </span>\n              </div>\n            </div>\n\n            {/* Credibility Score */}\n            {parseFloat(campaign.credibilityScore) > 0 && (\n              <div className=\"mt-4 pt-4 border-t border-muted\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">Credibility Score</span>\n                  <Badge variant=\"secondary\" className=\"bg-cyber-green/20 text-cyber-green\">\n                    {campaign.credibilityScore}/10\n                  </Badge>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </motion.div>\n    </Link>\n  );\n}\n","size_bytes":4529},"client/src/components/campaign/campaign-stats.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  TrendingUp, \n  Users, \n  Target, \n  Calendar,\n  DollarSign,\n  Activity,\n  Zap,\n  Globe\n} from \"lucide-react\";\nimport type { Campaign, Contribution } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface CampaignStatsProps {\n  campaign: Campaign;\n  contributions?: Contribution[];\n}\n\nexport default function CampaignStats({ campaign, contributions = [] }: CampaignStatsProps) {\n  const progress = (parseFloat(campaign.currentAmount || \"0\") / parseFloat(campaign.goalAmount || \"1\")) * 100;\n  const daysLeft = Math.max(0, Math.ceil((new Date(campaign.deadline || Date.now()).getTime() - Date.now()) / (1000 * 60 * 60 * 24)));\n  \n  // Calculate statistics\n  const totalContributions = contributions.length;\n  const averageContribution = contributions.length > 0 \n    ? contributions.reduce((sum, c) => sum + parseFloat(c.amount || \"0\"), 0) / contributions.length\n    : 0;\n  \n  const dailyContributions = contributions.filter(c => \n    new Date(c.createdAt).getTime() > Date.now() - 24 * 60 * 60 * 1000\n  ).length;\n\n  const topContribution = contributions.length > 0\n    ? Math.max(...contributions.map(c => parseFloat(c.amount || \"0\")))\n    : 0;\n\n  const contributionTrend = contributions\n    .slice(-7)\n    .reduce((acc, c) => acc + parseFloat(c.amount || \"0\"), 0);\n\n  const stats = [\n    {\n      title: \"Funding Progress\",\n      value: `${Math.round(progress)}%`,\n      subtitle: `${campaign.currentAmount} / ${campaign.goalAmount} ${campaign.currency}`,\n      icon: Target,\n      color: \"text-cyber-blue\",\n      bgColor: \"bg-cyber-blue/20\",\n    },\n    {\n      title: \"Total Backers\",\n      value: (campaign.backerCount || 0).toString(),\n      subtitle: `${dailyContributions} today`,\n      icon: Users,\n      color: \"text-cyber-green\",\n      bgColor: \"bg-cyber-green/20\",\n    },\n    {\n      title: \"Days Remaining\",\n      value: daysLeft.toString(),\n      subtitle: `Until ${new Date(campaign.deadline).toLocaleDateString()}`,\n      icon: Calendar,\n      color: \"text-cyber-purple\",\n      bgColor: \"bg-cyber-purple/20\",\n    },\n    {\n      title: \"Average Contribution\",\n      value: `${averageContribution.toFixed(2)} ${campaign.currency}`,\n      subtitle: `Top: ${topContribution.toFixed(2)} ${campaign.currency}`,\n      icon: DollarSign,\n      color: \"text-cyber-yellow\",\n      bgColor: \"bg-cyber-yellow/20\",\n    },\n  ];\n\n  const performanceMetrics = [\n    {\n      label: \"Credibility Score\",\n      value: parseFloat(campaign.credibilityScore),\n      max: 10,\n      color: \"bg-gradient-to-r from-cyber-green to-cyber-blue\",\n    },\n    {\n      label: \"Funding Velocity\",\n      value: Math.min(100, contributionTrend * 10),\n      max: 100,\n      color: \"bg-gradient-to-r from-cyber-blue to-cyber-purple\",\n    },\n    {\n      label: \"Backer Engagement\",\n      value: Math.min(100, (totalContributions / Math.max(campaign.backerCount, 1)) * 100),\n      max: 100,\n      color: \"bg-gradient-to-r from-cyber-purple to-cyber-pink\",\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overview Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {stats.map((stat, index) => {\n          const Icon = stat.icon;\n          return (\n            <motion.div\n              key={stat.title}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n            >\n              <Card className=\"glass-morphism border-white/20 hover:border-white/30 transition-all duration-300\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className={`w-12 h-12 rounded-lg ${stat.bgColor} flex items-center justify-center`}>\n                      <Icon className={`w-6 h-6 ${stat.color}`} />\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold\">{stat.value}</div>\n                      <div className=\"text-sm text-muted-foreground\">{stat.subtitle}</div>\n                    </div>\n                  </div>\n                  <div className=\"text-sm font-medium text-muted-foreground\">{stat.title}</div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          );\n        })}\n      </div>\n\n      {/* Performance Metrics */}\n      <motion.div\n        initial={{ opacity: 0, y: 30 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6, delay: 0.4 }}\n      >\n        <Card className=\"glass-morphism border-white/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Activity className=\"w-5 h-5 text-cyber-blue\" />\n              Performance Metrics\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {performanceMetrics.map((metric, index) => (\n              <div key={metric.label}>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"text-sm font-medium\">{metric.label}</span>\n                  <span className=\"text-sm font-mono\">\n                    {metric.label === \"Credibility Score\" \n                      ? `${metric.value.toFixed(1)}/${metric.max}` \n                      : `${Math.round(metric.value)}%`\n                    }\n                  </span>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"w-full bg-muted rounded-full h-2\">\n                    <motion.div\n                      className={`h-2 rounded-full ${metric.color}`}\n                      initial={{ width: 0 }}\n                      animate={{ width: `${(metric.value / metric.max) * 100}%` }}\n                      transition={{ duration: 1, delay: 0.5 + index * 0.1 }}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Activity Timeline */}\n      <motion.div\n        initial={{ opacity: 0, y: 30 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6, delay: 0.6 }}\n      >\n        <Card className=\"glass-morphism border-white/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Zap className=\"w-5 h-5 text-cyber-yellow\" />\n              Recent Activity\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {contributions.slice(0, 5).map((contribution, index) => (\n                <div key={contribution.id} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-2 h-2 bg-cyber-green rounded-full animate-pulse\"></div>\n                    <div>\n                      <div className=\"font-medium\">\n                        {contribution.isAnonymous ? \"Anonymous\" : \"Backer\"} contributed\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {formatDistanceToNow(new Date(contribution.createdAt), { addSuffix: true })}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-mono font-bold\">\n                      +{contribution.amount} {contribution.currency}\n                    </div>\n                    {contribution.message && (\n                      <div className=\"text-xs text-muted-foreground italic max-w-32 truncate\">\n                        \"{contribution.message}\"\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n              \n              {contributions.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <Activity className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No activity yet</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Campaign Health */}\n      <motion.div\n        initial={{ opacity: 0, y: 30 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6, delay: 0.8 }}\n      >\n        <Card className=\"glass-morphism border-white/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Globe className=\"w-5 h-5 text-cyber-green\" />\n              Campaign Health\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto mb-3 bg-cyber-green/20 rounded-full flex items-center justify-center\">\n                  <TrendingUp className=\"w-8 h-8 text-cyber-green\" />\n                </div>\n                <div className=\"text-lg font-bold text-cyber-green\">\n                  {progress > 75 ? \"Excellent\" : progress > 50 ? \"Good\" : progress > 25 ? \"Fair\" : \"Needs Attention\"}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Funding Progress</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto mb-3 bg-cyber-blue/20 rounded-full flex items-center justify-center\">\n                  <Users className=\"w-8 h-8 text-cyber-blue\" />\n                </div>\n                <div className=\"text-lg font-bold text-cyber-blue\">\n                  {campaign.backerCount > 100 ? \"High\" : campaign.backerCount > 50 ? \"Medium\" : \"Low\"}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Community Interest</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto mb-3 bg-cyber-purple/20 rounded-full flex items-center justify-center\">\n                  <Calendar className=\"w-8 h-8 text-cyber-purple\" />\n                </div>\n                <div className=\"text-lg font-bold text-cyber-purple\">\n                  {daysLeft > 15 ? \"Healthy\" : daysLeft > 7 ? \"Moderate\" : \"Critical\"}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Time Remaining</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":10839},"client/src/components/kyc/kyc-status.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Shield, \n  CheckCircle, \n  Clock, \n  AlertTriangle,\n  FileText,\n  Camera,\n  CreditCard,\n  Building,\n  User,\n  XCircle\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface KYCStatusProps {\n  className?: string;\n}\n\nexport default function KYCStatus({ className = \"\" }: KYCStatusProps) {\n  const { user } = useAuth();\n\n  if (!user) {\n    return null;\n  }\n\n  const getStatusConfig = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return {\n          icon: CheckCircle,\n          color: \"text-cyber-green\",\n          bgColor: \"bg-cyber-green/10\",\n          borderColor: \"border-cyber-green/30\",\n          title: \"KYC Verified\",\n          description: \"Your identity has been successfully verified\",\n          actionText: \"View Certificate\",\n          actionVariant: \"default\" as const,\n        };\n      case \"pending\":\n        return {\n          icon: Clock,\n          color: \"text-cyber-yellow\",\n          bgColor: \"bg-cyber-yellow/10\",\n          borderColor: \"border-cyber-yellow/30\",\n          title: \"KYC Under Review\",\n          description: \"Your documents are being reviewed (1-3 business days)\",\n          actionText: \"Check Status\",\n          actionVariant: \"outline\" as const,\n        };\n      case \"rejected\":\n        return {\n          icon: XCircle,\n          color: \"text-red-400\",\n          bgColor: \"bg-red-500/10\",\n          borderColor: \"border-red-500/30\",\n          title: \"KYC Rejected\",\n          description: \"Please resubmit your documents with corrections\",\n          actionText: \"Resubmit Documents\",\n          actionVariant: \"destructive\" as const,\n        };\n      default:\n        return {\n          icon: AlertTriangle,\n          color: \"text-cyber-blue\",\n          bgColor: \"bg-cyber-blue/10\",\n          borderColor: \"border-cyber-blue/30\",\n          title: \"KYC Required\",\n          description: \"Complete identity verification to unlock all features\",\n          actionText: \"Start Verification\",\n          actionVariant: \"default\" as const,\n        };\n    }\n  };\n\n  const statusConfig = getStatusConfig(user.kycStatus || \"not_started\");\n  const Icon = statusConfig.icon;\n\n  // Mock KYC steps for demonstration\n  const kycSteps = [\n    {\n      id: \"personal_info\",\n      title: \"Personal Information\",\n      icon: User,\n      completed: user.kycStatus !== \"not_started\",\n      description: \"Basic personal details\",\n    },\n    {\n      id: \"identity_verification\",\n      title: \"Identity Verification\",\n      icon: CreditCard,\n      completed: user.kycStatus === \"approved\" || user.kycStatus === \"pending\",\n      description: \"Government-issued ID\",\n    },\n    {\n      id: \"address_verification\",\n      title: \"Address Verification\",\n      icon: Building,\n      completed: user.kycStatus === \"approved\" || user.kycStatus === \"pending\",\n      description: \"Proof of address document\",\n    },\n    {\n      id: \"selfie_verification\",\n      title: \"Selfie Verification\",\n      icon: Camera,\n      completed: user.kycStatus === \"approved\" || user.kycStatus === \"pending\",\n      description: \"Photo with ID document\",\n    },\n  ];\n\n  const completedSteps = kycSteps.filter(step => step.completed).length;\n  const progress = (completedSteps / kycSteps.length) * 100;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.95 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.5 }}\n      className={className}\n    >\n      <Card className={`glass-morphism border ${statusConfig.borderColor} ${statusConfig.bgColor}`}>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-3\">\n            <div className={`w-12 h-12 rounded-full ${statusConfig.bgColor} flex items-center justify-center`}>\n              <Icon className={`w-6 h-6 ${statusConfig.color}`} />\n            </div>\n            <div>\n              <div className={`text-lg font-bold ${statusConfig.color}`}>\n                {statusConfig.title}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {statusConfig.description}\n              </div>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {/* Progress Bar */}\n          <div>\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-sm font-medium\">Verification Progress</span>\n              <span className=\"text-sm text-muted-foreground\">{Math.round(progress)}% Complete</span>\n            </div>\n            <Progress value={progress} className=\"h-2 progress-glow\" />\n          </div>\n\n          {/* KYC Steps */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium text-sm\">Verification Steps:</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {kycSteps.map((step) => {\n                const StepIcon = step.icon;\n                return (\n                  <div\n                    key={step.id}\n                    className={`p-3 rounded-lg border ${\n                      step.completed \n                        ? \"bg-cyber-green/10 border-cyber-green/30\" \n                        : \"bg-muted/30 border-muted\"\n                    }`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                        step.completed \n                          ? \"bg-cyber-green/20\" \n                          : \"bg-muted\"\n                      }`}>\n                        {step.completed ? (\n                          <CheckCircle className=\"w-4 h-4 text-cyber-green\" />\n                        ) : (\n                          <StepIcon className=\"w-4 h-4 text-muted-foreground\" />\n                        )}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className={`font-medium text-sm ${\n                          step.completed ? \"text-cyber-green\" : \"text-muted-foreground\"\n                        }`}>\n                          {step.title}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {step.description}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Status-specific information */}\n          {user.kycStatus === \"pending\" && user.kycDocuments && (\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium text-sm\">Submitted Documents:</h4>\n              <div className=\"space-y-2\">\n                {user.kycDocuments.map((doc: any, index: number) => (\n                  <div key={index} className=\"flex items-center gap-3 p-2 bg-muted/30 rounded\">\n                    <FileText className=\"w-4 h-4 text-cyber-blue\" />\n                    <span className=\"text-sm capitalize\">{doc.type?.replace(\"_\", \" \")}</span>\n                    <Badge className=\"ml-auto bg-cyber-yellow/20 text-cyber-yellow\">\n                      Under Review\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Action Button */}\n          <div className=\"flex justify-between items-center pt-4 border-t border-muted\">\n            <div className=\"text-xs text-muted-foreground\">\n              {user.kycStatus === \"approved\" && (\n                \"All features unlocked\"\n              )}\n              {user.kycStatus === \"pending\" && (\n                \"Review typically takes 1-3 business days\"\n              )}\n              {user.kycStatus === \"rejected\" && (\n                \"Please check your email for specific requirements\"\n              )}\n              {(!user.kycStatus || user.kycStatus === \"not_started\") && (\n                \"Required to create campaigns\"\n              )}\n            </div>\n            \n            <Link href=\"/kyc\">\n              <Button \n                variant={statusConfig.actionVariant}\n                size=\"sm\"\n                className={\n                  statusConfig.actionVariant === \"default\" \n                    ? \"bg-gradient-to-r from-cyber-blue to-cyber-purple\" \n                    : \"\"\n                }\n              >\n                {statusConfig.actionText}\n              </Button>\n            </Link>\n          </div>\n\n          {/* Security Notice */}\n          <div className=\"flex items-start gap-3 p-3 bg-muted/20 rounded-lg\">\n            <Shield className=\"w-4 h-4 text-cyber-blue flex-shrink-0 mt-0.5\" />\n            <div className=\"text-xs text-muted-foreground\">\n              <span className=\"font-medium\">Secure & Private:</span> Your personal information \n              is encrypted and stored securely. We comply with all data protection regulations.\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":9314},"client/src/components/layout/PageLayout.tsx":{"content":"import { MainNavigation } from \"@/components/navigation/MainNavigation\";\nimport { ThreeBackground } from \"@/components/three/ThreeBackground\";\nimport { BackButton } from \"@/components/navigation/BackButton\";\n\ninterface PageLayoutProps {\n  children: React.ReactNode;\n  showBackground?: boolean;\n  showNavigation?: boolean;\n  backTo?: string;\n  backLabel?: string;\n}\n\nexport function PageLayout({ \n  children, \n  showBackground = true, \n  showNavigation = true,\n  backTo,\n  backLabel\n}: PageLayoutProps) {\n  return (\n    <div className=\"min-h-screen bg-background relative\">\n      {showBackground && <ThreeBackground />}\n      {showNavigation && <MainNavigation />}\n      \n      <div className=\"relative z-10\">\n        {(backTo || backLabel) && (\n          <div className=\"container mx-auto px-4 pt-4\">\n            <BackButton to={backTo} label={backLabel} />\n          </div>\n        )}\n        {children}\n      </div>\n    </div>\n  );\n}","size_bytes":935},"client/src/components/layout/footer.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Github, Twitter, MessageSquareDiff } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-background border-t border-muted py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"md:col-span-2\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.6 }}\n            >\n              <div className=\"text-3xl font-bold gradient-text mb-4\">\n                CryptoFund\n              </div>\n              <p className=\"text-muted-foreground mb-6 max-w-md\">\n                The future of crowdfunding is here. Launch campaigns, raise funds transparently on blockchain, and build the next generation of innovative projects.\n              </p>\n              <div className=\"flex space-x-6\">\n                <Button variant=\"ghost\" size=\"icon\" className=\"hover:text-cyber-blue\">\n                  <Twitter className=\"w-5 h-5\" />\n                </Button>\n                <Button variant=\"ghost\" size=\"icon\" className=\"hover:text-cyber-blue\">\n                  <Github className=\"w-5 h-5\" />\n                </Button>\n                <Button variant=\"ghost\" size=\"icon\" className=\"hover:text-cyber-blue\">\n                  <MessageSquareDiff className=\"w-5 h-5\" />\n                </Button>\n              </div>\n            </motion.div>\n          </div>\n          \n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6, delay: 0.1 }}\n          >\n            <h3 className=\"text-lg font-semibold mb-4\">Platform</h3>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-cyber-blue transition-colors duration-300\">Browse Campaigns</a></li>\n              <li><a href=\"#\" className=\"hover:text-cyber-blue transition-colors duration-300\">Create Campaign</a></li>\n              <li><a href=\"#\" className=\"hover:text-cyber-blue transition-colors duration-300\">KYC Verification</a></li>\n              <li><a href=\"#\" className=\"hover:text-cyber-blue transition-colors duration-300\">Blockchain Explorer</a></li>\n            </ul>\n          </motion.div>\n          \n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            <h3 className=\"text-lg font-semibold mb-4\">Resources</h3>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-cyber-blue transition-colors duration-300\">How It Works</a></li>\n              <li><a href=\"#\" className=\"hover:text-cyber-blue transition-colors duration-300\">Documentation</a></li>\n              <li><a href=\"#\" className=\"hover:text-cyber-blue transition-colors duration-300\">Support</a></li>\n              <li><a href=\"#\" className=\"hover:text-cyber-blue transition-colors duration-300\">API</a></li>\n            </ul>\n          </motion.div>\n        </div>\n        \n        <motion.div\n          initial={{ opacity: 0 }}\n          whileInView={{ opacity: 1 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.6, delay: 0.3 }}\n          className=\"border-t border-muted mt-12 pt-8 text-center text-muted-foreground\"\n        >\n          <p>&copy; 2024 CryptoFund. Powering the future of decentralized crowdfunding.</p>\n        </motion.div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3832},"client/src/components/layout/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, X, Wallet } from \"lucide-react\";\nimport ThemeToggle from \"@/components/ui/theme-toggle\";\n\nexport default function Navbar() {\n  const { isAuthenticated, user } = useAuth();\n  const [location] = useLocation();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const navItems = isAuthenticated ? [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/campaigns\", label: \"Campaigns\" },\n    { href: \"/create\", label: \"Create\" },\n    { href: \"/explorer\", label: \"Explorer\" },\n    { href: \"/dashboard\", label: \"Dashboard\" },\n    { href: \"/kyc\", label: \"KYC\" },\n  ] : [\n    { href: \"#home\", label: \"Home\" },\n    { href: \"/features\", label: \"Features\" },\n    { href: \"#campaigns\", label: \"Campaigns\" },\n    { href: \"#create\", label: \"Create\" },\n    { href: \"#explorer\", label: \"Explorer\" },\n  ];\n\n  return (\n    <nav className=\"fixed top-0 w-full z-50 glass-morphism border-b border-white/10\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <motion.div\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.5 }}\n            className=\"flex items-center space-x-4\"\n          >\n            <div className=\"text-2xl font-bold gradient-text\">\n              CryptoFund\n            </div>\n          </motion.div>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navItems.map((item) => (\n              <Link key={item.href} href={item.href}>\n                <Button\n                  variant=\"ghost\"\n                  className={`text-sm font-medium transition-colors duration-300 ${\n                    location === item.href \n                      ? \"text-cyber-blue\" \n                      : \"text-muted-foreground hover:text-cyber-blue\"\n                  }`}\n                >\n                  {item.label}\n                </Button>\n              </Link>\n            ))}\n          </div>\n\n          {/* Right Side Actions */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <ThemeToggle />\n            \n            {isAuthenticated ? (\n              <>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"glass-morphism border-white/20 hover:bg-white/20\"\n                >\n                  <Wallet className=\"w-4 h-4 mr-2\" />\n                  <span className=\"font-mono text-sm\">\n                    {user?.walletAddress \n                      ? `${user.walletAddress.slice(0, 6)}...${user.walletAddress.slice(-4)}`\n                      : \"0x1a2b...c3d4\"\n                    }\n                  </span>\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => window.location.href = '/api/logout'}\n                  className=\"glass-morphism hover:bg-white/20\"\n                >\n                  Logout\n                </Button>\n              </>\n            ) : (\n              <Button\n                className=\"bg-gradient-to-r from-cyber-blue to-cyber-purple hover:scale-105 transition-transform duration-300\"\n                onClick={() => window.location.href = '/api/login'}\n              >\n                Connect Wallet\n              </Button>\n            )}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <div className=\"md:hidden\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n            >\n              {isMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMenuOpen && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: \"auto\" }}\n            exit={{ opacity: 0, height: 0 }}\n            transition={{ duration: 0.3 }}\n            className=\"md:hidden border-t border-white/10 py-4\"\n          >\n            <div className=\"flex flex-col space-y-2\">\n              {navItems.map((item) => (\n                <Link key={item.href} href={item.href}>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full justify-start text-left\"\n                    onClick={() => setIsMenuOpen(false)}\n                  >\n                    {item.label}\n                  </Button>\n                </Link>\n              ))}\n              \n              <div className=\"border-t border-white/10 pt-4 mt-4 space-y-2\">\n                <ThemeToggle />\n                {isAuthenticated ? (\n                  <>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full glass-morphism\"\n                    >\n                      <Wallet className=\"w-4 h-4 mr-2\" />\n                      <span className=\"font-mono text-sm\">0x1a2b...c3d4</span>\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      onClick={() => window.location.href = '/api/logout'}\n                    >\n                      Logout\n                    </Button>\n                  </>\n                ) : (\n                  <Button\n                    className=\"w-full bg-gradient-to-r from-cyber-blue to-cyber-purple\"\n                    onClick={() => window.location.href = '/api/login'}\n                  >\n                    Connect Wallet\n                  </Button>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":6010},"client/src/components/navigation/BackButton.tsx":{"content":"import { ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\ninterface BackButtonProps {\n  to?: string;\n  label?: string;\n  className?: string;\n}\n\nexport function BackButton({ to = \"/\", label = \"Back to Home\", className = \"\" }: BackButtonProps) {\n  const [, setLocation] = useLocation();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"sm\"\n      onClick={() => setLocation(to)}\n      className={`flex items-center gap-2 text-muted-foreground hover:text-foreground ${className}`}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      {label}\n    </Button>\n  );\n}","size_bytes":638},"client/src/components/navigation/MainNavigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Home, \n  Search, \n  PlusCircle, \n  User, \n  TrendingUp,\n  Shield,\n  Brain,\n  Settings,\n  LogOut\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport function MainNavigation() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  const navItems = [\n    { href: \"/\", icon: Home, label: \"Home\" },\n    { href: \"/campaigns\", icon: Search, label: \"Explore\" },\n    { href: \"/create\", icon: PlusCircle, label: \"Create\" },\n    { href: \"/dashboard\", icon: TrendingUp, label: \"Dashboard\" },\n    { href: \"/explorer\", icon: Brain, label: \"AI Explorer\" },\n  ];\n\n  return (\n    <nav className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container flex h-16 items-center justify-between px-4\">\n        {/* Logo */}\n        <Link href=\"/\" className=\"flex items-center space-x-2\">\n          <div className=\"h-8 w-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-600\" />\n          <span className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            CryptoFund\n          </span>\n        </Link>\n\n        {/* Center Navigation */}\n        <div className=\"hidden md:flex items-center space-x-1\">\n          {navItems.map((item) => {\n            const isActive = location === item.href || (item.href !== \"/\" && location.startsWith(item.href));\n            return (\n              <Link key={item.href} href={item.href}>\n                <Button\n                  variant={isActive ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  className=\"flex items-center gap-2\"\n                >\n                  <item.icon className=\"h-4 w-4\" />\n                  {item.label}\n                </Button>\n              </Link>\n            );\n          })}\n        </div>\n\n        {/* User Menu */}\n        <div className=\"flex items-center space-x-4\">\n          {user ? (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarImage src={user.profileImageUrl || \"\"} alt={user.firstName || \"User\"} />\n                    <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\n                      {user.firstName?.[0] || user.email?.[0] || \"U\"}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                <div className=\"flex flex-col space-y-1 p-2\">\n                  <p className=\"text-sm font-medium leading-none\">\n                    {user.firstName} {user.lastName}\n                  </p>\n                  <p className=\"text-xs leading-none text-muted-foreground\">\n                    {user.email}\n                  </p>\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <Badge variant={user.kycStatus === \"approved\" ? \"default\" : \"secondary\"}>\n                      {user.kycStatus === \"approved\" ? (\n                        <>\n                          <Shield className=\"h-3 w-3 mr-1\" />\n                          Verified\n                        </>\n                      ) : (\n                        \"Pending KYC\"\n                      )}\n                    </Badge>\n                  </div>\n                </div>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                  <Link href=\"/dashboard\" className=\"flex items-center\">\n                    <User className=\"mr-2 h-4 w-4\" />\n                    Dashboard\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/kyc\" className=\"flex items-center\">\n                    <Shield className=\"mr-2 h-4 w-4\" />\n                    KYC Verification\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={logout} className=\"cursor-pointer\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Log out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          ) : (\n            <Button \n              onClick={() => window.location.href = '/auth'} \n              variant=\"outline\"\n              size=\"sm\"\n            >\n              Login\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Mobile Navigation */}\n      <div className=\"md:hidden border-t\">\n        <div className=\"flex items-center justify-around py-2\">\n          {navItems.slice(0, 4).map((item) => {\n            const isActive = location === item.href || (item.href !== \"/\" && location.startsWith(item.href));\n            return (\n              <Link key={item.href} href={item.href}>\n                <Button\n                  variant={isActive ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  className=\"flex flex-col items-center gap-1 h-auto py-2\"\n                >\n                  <item.icon className=\"h-4 w-4\" />\n                  <span className=\"text-xs\">{item.label}</span>\n                </Button>\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":5838},"client/src/components/payment/CryptoPayment.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Wallet, \n  CreditCard, \n  ArrowRight, \n  CheckCircle, \n  AlertTriangle,\n  ExternalLink \n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface CryptoPaymentProps {\n  campaignId: string;\n  onSuccess?: () => void;\n}\n\nconst SUPPORTED_TOKENS = [\n  { symbol: \"ETH\", name: \"Ethereum\", address: \"0x0000000000000000000000000000000000000000\" },\n  { symbol: \"MATIC\", name: \"Polygon\", address: \"0x0000000000000000000000000000000000000001\" },\n  { symbol: \"USDC\", name: \"USD Coin\", address: \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\" },\n];\n\nexport function CryptoPayment({ campaignId, onSuccess }: CryptoPaymentProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [amount, setAmount] = useState(\"\");\n  const [selectedToken, setSelectedToken] = useState(SUPPORTED_TOKENS[0]);\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [transactionStep, setTransactionStep] = useState<\"input\" | \"confirm\" | \"processing\" | \"success\">(\"input\");\n\n  const contributeMutation = useMutation({\n    mutationFn: async ({ amount, currency, transactionHash }: { \n      amount: string; \n      currency: string; \n      transactionHash: string; \n    }) => {\n      return apiRequest(\"POST\", \"/api/contributions\", {\n        campaignId,\n        amount,\n        currency,\n        transactionHash,\n        paymentMethod: \"crypto\",\n        fromAddress: \"0x1234567890123456789012345678901234567890\", // Mock wallet address\n        toAddress: \"0x0987654321098765432109876543210987654321\", // Mock campaign address\n        gasUsed: \"21000\",\n        gasPrice: \"0.02\",\n        blockNumber: Math.floor(Math.random() * 1000000).toString(),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Contribution Successful!\",\n        description: \"Your crypto contribution has been processed.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\", campaignId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/contributions\"] });\n      setTransactionStep(\"success\");\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Transaction Failed\",\n        description: error.message || \"Failed to process crypto contribution.\",\n        variant: \"destructive\",\n      });\n      setTransactionStep(\"input\");\n    },\n  });\n\n  const connectWallet = async () => {\n    // Mock wallet connection - in real app would use MetaMask or WalletConnect\n    try {\n      toast({\n        title: \"Wallet Connected\",\n        description: \"Mock wallet connected successfully (0x1234...7890)\",\n      });\n      setWalletConnected(true);\n    } catch (error) {\n      toast({\n        title: \"Connection Failed\",\n        description: \"Please install MetaMask or use a Web3 browser.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleContribute = async () => {\n    if (!amount || parseFloat(amount) <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid contribution amount.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setTransactionStep(\"confirm\");\n  };\n\n  const confirmTransaction = async () => {\n    setTransactionStep(\"processing\");\n    \n    // Simulate blockchain transaction\n    const mockTransactionHash = `0x${Math.random().toString(16).substr(2, 64)}`;\n    \n    // Simulate processing delay\n    setTimeout(() => {\n      contributeMutation.mutate({\n        amount,\n        currency: selectedToken.symbol,\n        transactionHash: mockTransactionHash,\n      });\n    }, 2000);\n  };\n\n  const resetForm = () => {\n    setAmount(\"\");\n    setTransactionStep(\"input\");\n  };\n\n  if (transactionStep === \"success\") {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardContent className=\"p-6 text-center\">\n          <CheckCircle className=\"h-16 w-16 text-green-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Payment Successful!</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Your contribution of {amount} {selectedToken.symbol} has been processed.\n          </p>\n          <div className=\"space-y-2\">\n            <Button onClick={resetForm} variant=\"outline\" className=\"w-full\">\n              Make Another Contribution\n            </Button>\n            <Button asChild className=\"w-full\">\n              <a \n                href={`https://polygonscan.com/tx/0x${Math.random().toString(16).substr(2, 64)}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"flex items-center gap-2\"\n              >\n                View on Explorer\n                <ExternalLink className=\"h-4 w-4\" />\n              </a>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Wallet className=\"h-5 w-5\" />\n          Crypto Payment\n        </CardTitle>\n        <CardDescription>\n          Support this campaign with cryptocurrency\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {!walletConnected ? (\n          <div className=\"text-center space-y-4\">\n            <div className=\"bg-muted/50 rounded-lg p-4\">\n              <AlertTriangle className=\"h-8 w-8 text-amber-500 mx-auto mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">\n                Connect your crypto wallet to contribute\n              </p>\n            </div>\n            <Button onClick={connectWallet} className=\"w-full\">\n              <Wallet className=\"h-4 w-4 mr-2\" />\n              Connect Wallet\n            </Button>\n          </div>\n        ) : (\n          <>\n            {/* Wallet Status */}\n            <div className=\"bg-green-50 dark:bg-green-950 rounded-lg p-3\">\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <span className=\"text-sm font-medium text-green-700 dark:text-green-300\">\n                  Wallet Connected\n                </span>\n              </div>\n              <p className=\"text-xs text-green-600 dark:text-green-400 mt-1\">\n                0x1234...7890 (Mock Wallet)\n              </p>\n            </div>\n\n            {transactionStep === \"input\" && (\n              <>\n                {/* Token Selection */}\n                <div className=\"space-y-2\">\n                  <Label>Payment Token</Label>\n                  <Select \n                    value={selectedToken.symbol} \n                    onValueChange={(value) => {\n                      const token = SUPPORTED_TOKENS.find(t => t.symbol === value);\n                      if (token) setSelectedToken(token);\n                    }}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {SUPPORTED_TOKENS.map((token) => (\n                        <SelectItem key={token.symbol} value={token.symbol}>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium\">{token.symbol}</span>\n                            <span className=\"text-muted-foreground\">- {token.name}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Amount Input */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"amount\">Contribution Amount</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"amount\"\n                      type=\"number\"\n                      placeholder=\"0.00\"\n                      value={amount}\n                      onChange={(e) => setAmount(e.target.value)}\n                      className=\"pr-16\"\n                    />\n                    <Badge variant=\"secondary\" className=\"absolute right-2 top-1/2 -translate-y-1/2\">\n                      {selectedToken.symbol}\n                    </Badge>\n                  </div>\n                </div>\n\n                {/* Quick Amount Buttons */}\n                <div className=\"grid grid-cols-3 gap-2\">\n                  {[\"0.1\", \"0.5\", \"1.0\"].map((quickAmount) => (\n                    <Button\n                      key={quickAmount}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setAmount(quickAmount)}\n                    >\n                      {quickAmount} {selectedToken.symbol}\n                    </Button>\n                  ))}\n                </div>\n\n                <Button onClick={handleContribute} className=\"w-full\" disabled={!amount}>\n                  Continue\n                  <ArrowRight className=\"h-4 w-4 ml-2\" />\n                </Button>\n              </>\n            )}\n\n            {transactionStep === \"confirm\" && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-muted/50 rounded-lg p-4\">\n                  <h4 className=\"font-medium mb-3\">Transaction Summary</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Amount:</span>\n                      <span className=\"font-medium\">{amount} {selectedToken.symbol}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Network:</span>\n                      <span>Polygon Mumbai (Testnet)</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Gas Fee:</span>\n                      <span>~0.02 MATIC</span>\n                    </div>\n                    <Separator />\n                    <div className=\"flex justify-between font-medium\">\n                      <span>Total:</span>\n                      <span>{amount} {selectedToken.symbol}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" onClick={() => setTransactionStep(\"input\")} className=\"flex-1\">\n                    Back\n                  </Button>\n                  <Button onClick={confirmTransaction} className=\"flex-1\">\n                    Confirm & Pay\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {transactionStep === \"processing\" && (\n              <div className=\"text-center space-y-4\">\n                <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mx-auto\" />\n                <div>\n                  <h4 className=\"font-medium\">Processing Transaction</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Please wait while your transaction is being processed...\n                  </p>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11794},"client/src/components/payment/FiatPayment.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  CreditCard, \n  DollarSign, \n  ArrowRight, \n  CheckCircle, \n  AlertTriangle \n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface FiatPaymentProps {\n  campaignId: string;\n  onSuccess?: () => void;\n}\n\nexport function FiatPayment({ campaignId, onSuccess }: FiatPaymentProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [amount, setAmount] = useState(\"\");\n  const [step, setStep] = useState<\"input\" | \"processing\" | \"success\">(\"input\");\n\n  const contributeMutation = useMutation({\n    mutationFn: async ({ amount }: { amount: string }) => {\n      return apiRequest(\"POST\", \"/api/contributions\", {\n        campaignId,\n        amount,\n        currency: \"USD\",\n        paymentMethod: \"fiat\",\n        transactionHash: `fiat_${Math.random().toString(36).substr(2, 9)}`,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment Successful!\",\n        description: \"Your fiat contribution has been processed.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\", campaignId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/contributions\"] });\n      setStep(\"success\");\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message || \"Failed to process fiat payment.\",\n        variant: \"destructive\",\n      });\n      setStep(\"input\");\n    },\n  });\n\n  const handlePayment = async () => {\n    if (!amount || parseFloat(amount) <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid contribution amount.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setStep(\"processing\");\n    \n    // Simulate payment processing\n    setTimeout(() => {\n      contributeMutation.mutate({ amount });\n    }, 2000);\n  };\n\n  const resetForm = () => {\n    setAmount(\"\");\n    setStep(\"input\");\n  };\n\n  if (step === \"success\") {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardContent className=\"p-6 text-center\">\n          <CheckCircle className=\"h-16 w-16 text-green-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Payment Successful!</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Your contribution of ${amount} USD has been processed.\n          </p>\n          <Button onClick={resetForm} className=\"w-full\">\n            Make Another Contribution\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <CreditCard className=\"h-5 w-5\" />\n          Fiat Payment\n        </CardTitle>\n        <CardDescription>\n          Support this campaign with traditional payment methods\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Payment Method Notice */}\n        <div className=\"bg-amber-50 dark:bg-amber-950 rounded-lg p-3\">\n          <div className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-4 w-4 text-amber-600\" />\n            <span className=\"text-sm font-medium text-amber-700 dark:text-amber-300\">\n              Demo Mode\n            </span>\n          </div>\n          <p className=\"text-xs text-amber-600 dark:text-amber-400 mt-1\">\n            This is a demonstration. Real payments require Stripe integration.\n          </p>\n        </div>\n\n        {step === \"input\" && (\n          <>\n            {/* Amount Input */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"fiat-amount\">Contribution Amount</Label>\n              <div className=\"relative\">\n                <DollarSign className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"fiat-amount\"\n                  type=\"number\"\n                  placeholder=\"0.00\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.target.value)}\n                  className=\"pl-10 pr-16\"\n                />\n                <Badge variant=\"secondary\" className=\"absolute right-2 top-1/2 -translate-y-1/2\">\n                  USD\n                </Badge>\n              </div>\n            </div>\n\n            {/* Quick Amount Buttons */}\n            <div className=\"grid grid-cols-3 gap-2\">\n              {[\"10\", \"50\", \"100\"].map((quickAmount) => (\n                <Button\n                  key={quickAmount}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setAmount(quickAmount)}\n                >\n                  ${quickAmount}\n                </Button>\n              ))}\n            </div>\n\n            {/* Mock Payment Form */}\n            <div className=\"space-y-4\">\n              <Separator />\n              <div className=\"space-y-3\">\n                <Label>Payment Details (Demo)</Label>\n                <Input placeholder=\"Card Number: 4242 4242 4242 4242\" disabled />\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Input placeholder=\"MM/YY: 12/25\" disabled />\n                  <Input placeholder=\"CVC: 123\" disabled />\n                </div>\n                <Input placeholder=\"Name on Card: John Doe\" disabled />\n              </div>\n            </div>\n\n            <Button onClick={handlePayment} className=\"w-full\" disabled={!amount}>\n              <CreditCard className=\"h-4 w-4 mr-2\" />\n              Pay ${amount || \"0.00\"} USD\n            </Button>\n          </>\n        )}\n\n        {step === \"processing\" && (\n          <div className=\"text-center space-y-4\">\n            <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mx-auto\" />\n            <div>\n              <h4 className=\"font-medium\">Processing Payment</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Please wait while your payment is being processed...\n              </p>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6598},"client/src/components/payment/PaymentModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CreditCard, Smartphone, Zap, X } from \"lucide-react\";\nimport { CryptoPayment } from \"@/components/web3/CryptoPayment\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface PaymentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  campaign: {\n    id: string;\n    title: string;\n    currentAmount: string;\n    goalAmount: string;\n    currency: string;\n    smartContractAddress?: string;\n  };\n}\n\nexport function PaymentModal({ isOpen, onClose, campaign }: PaymentModalProps) {\n  const [activeTab, setActiveTab] = useState(\"crypto\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const recordContributionMutation = useMutation({\n    mutationFn: async (contributionData: any) => {\n      return apiRequest(\"POST\", \"/api/contributions\", contributionData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\", campaign.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      onClose();\n    },\n  });\n\n  const handleCryptoSuccess = async (transactionHash: string) => {\n    try {\n      // Record the contribution in the database\n      await recordContributionMutation.mutateAsync({\n        campaignId: campaign.id,\n        amount: \"0.1\", // This would come from the payment component\n        currency: campaign.currency,\n        transactionHash: transactionHash,\n        paymentMethod: \"crypto\",\n        status: \"confirmed\",\n      });\n\n      toast({\n        title: \"Contribution Recorded!\",\n        description: \"Your crypto contribution has been successfully recorded on-chain.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Recording Failed\",\n        description: \"Payment succeeded but failed to record. Please contact support.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const FiatPayment = () => (\n    <div className=\"space-y-6 p-4\" data-testid=\"fiat-payment-section\">\n      <div className=\"text-center space-y-4\">\n        <div className=\"w-16 h-16 mx-auto rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center\">\n          <CreditCard className=\"w-8 h-8 text-blue-600\" />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-semibold\">Fiat Payment Coming Soon</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Credit card and bank transfer payments will be available soon\n          </p>\n        </div>\n      </div>\n\n      <div className=\"space-y-3\">\n        <div className=\"p-4 border rounded-lg opacity-50\">\n          <div className=\"flex items-center space-x-3\">\n            <CreditCard className=\"w-5 h-5\" />\n            <div>\n              <p className=\"font-medium\">Credit/Debit Cards</p>\n              <p className=\"text-sm text-muted-foreground\">Visa, Mastercard, American Express</p>\n            </div>\n            <Badge variant=\"secondary\">Soon</Badge>\n          </div>\n        </div>\n\n        <div className=\"p-4 border rounded-lg opacity-50\">\n          <div className=\"flex items-center space-x-3\">\n            <Smartphone className=\"w-5 h-5\" />\n            <div>\n              <p className=\"font-medium\">Digital Wallets</p>\n              <p className=\"text-sm text-muted-foreground\">PayPal, Apple Pay, Google Pay</p>\n            </div>\n            <Badge variant=\"secondary\">Soon</Badge>\n          </div>\n        </div>\n      </div>\n\n      <Button variant=\"outline\" className=\"w-full\" disabled data-testid=\"button-fiat-payment-disabled\">\n        Fiat Payments Coming Soon\n      </Button>\n    </div>\n  );\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl\" data-testid=\"payment-modal\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Zap className=\"w-5 h-5 text-yellow-500\" />\n              Support This Campaign\n            </DialogTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-payment-modal\">\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        {/* Campaign Info */}\n        <div className=\"border rounded-lg p-4 bg-muted/30\">\n          <h4 className=\"font-semibold truncate\" data-testid=\"modal-campaign-title\">{campaign.title}</h4>\n          <div className=\"flex items-center justify-between mt-2 text-sm\">\n            <span>Progress:</span>\n            <span data-testid=\"modal-campaign-progress\">\n              {campaign.currentAmount} / {campaign.goalAmount} {campaign.currency}\n            </span>\n          </div>\n        </div>\n\n        {/* Payment Options */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"crypto\" className=\"flex items-center gap-2\" data-testid=\"tab-crypto-payment\">\n              <Zap className=\"w-4 h-4\" />\n              Crypto\n            </TabsTrigger>\n            <TabsTrigger value=\"fiat\" className=\"flex items-center gap-2\" data-testid=\"tab-fiat-payment\">\n              <CreditCard className=\"w-4 h-4\" />\n              Fiat\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"crypto\" className=\"mt-6\">\n            <CryptoPayment\n              campaignId={campaign.id}\n              campaignTitle={campaign.title}\n              onSuccess={handleCryptoSuccess}\n              onCancel={onClose}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"fiat\" className=\"mt-6\">\n            <FiatPayment />\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6168},"client/src/components/three/ThreeBackground.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\n\ninterface ThreeBackgroundProps {\n  className?: string;\n}\n\nexport function ThreeBackground({ className = \"\" }: ThreeBackgroundProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const sceneRef = useRef<{\n    scene: THREE.Scene;\n    camera: THREE.PerspectiveCamera;\n    renderer: THREE.WebGLRenderer;\n    particles: THREE.Points;\n    animationId?: number;\n  }>();\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const container = containerRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\n\n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setClearColor(0x000000, 0);\n    container.appendChild(renderer.domElement);\n\n    // Create particle system\n    const particleCount = 2000;\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n    const sizes = new Float32Array(particleCount);\n\n    for (let i = 0; i < particleCount; i++) {\n      const i3 = i * 3;\n      \n      // Position\n      positions[i3] = (Math.random() - 0.5) * 100;\n      positions[i3 + 1] = (Math.random() - 0.5) * 100;\n      positions[i3 + 2] = (Math.random() - 0.5) * 100;\n\n      // Color (blue to purple gradient)\n      const hue = 0.6 + Math.random() * 0.2; // Blue to purple\n      const saturation = 0.8 + Math.random() * 0.2;\n      const lightness = 0.4 + Math.random() * 0.4;\n      \n      const color = new THREE.Color().setHSL(hue, saturation, lightness);\n      colors[i3] = color.r;\n      colors[i3 + 1] = color.g;\n      colors[i3 + 2] = color.b;\n\n      // Size\n      sizes[i] = Math.random() * 2 + 1;\n    }\n\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute('particleColor', new THREE.BufferAttribute(colors, 3));\n    geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: { value: 0.0 }\n      },\n      vertexShader: `\n        attribute float size;\n        attribute vec3 particleColor;\n        varying vec3 vColor;\n        uniform float time;\n\n        void main() {\n          vColor = particleColor;\n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          \n          // Add some movement\n          mvPosition.x += sin(time * 0.5 + position.y * 0.01) * 2.0;\n          mvPosition.y += cos(time * 0.3 + position.x * 0.01) * 2.0;\n          \n          gl_PointSize = size * (100.0 / -mvPosition.z);\n          gl_Position = projectionMatrix * mvPosition;\n        }\n      `,\n      fragmentShader: `\n        varying vec3 vColor;\n        \n        void main() {\n          float strength = distance(gl_PointCoord, vec2(0.5));\n          strength = 1.0 - strength;\n          strength = pow(strength, 2.0);\n          \n          vec3 finalColor = mix(vec3(0.0), vColor, strength);\n          gl_FragColor = vec4(finalColor, strength * 0.8);\n        }\n      `,\n      transparent: true,\n      blending: THREE.AdditiveBlending\n    });\n\n    const particles = new THREE.Points(geometry, material);\n    scene.add(particles);\n\n    camera.position.z = 30;\n\n    // Animation loop\n    let animationId: number | undefined;\n    const animate = () => {\n      animationId = requestAnimationFrame(animate);\n\n      const time = Date.now() * 0.001;\n      material.uniforms.time.value = time;\n\n      // Rotate the particle system\n      particles.rotation.y = time * 0.1;\n      particles.rotation.x = time * 0.05;\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      if (!container) return;\n      \n      camera.aspect = container.clientWidth / container.clientHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(container.clientWidth, container.clientHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Store refs for cleanup\n    sceneRef.current = {\n      scene,\n      camera,\n      renderer,\n      particles,\n      animationId\n    };\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n      if (container && renderer.domElement) {\n        container.removeChild(renderer.domElement);\n      }\n      geometry.dispose();\n      material.dispose();\n      renderer.dispose();\n    };\n  }, []);\n\n  return (\n    <div \n      ref={containerRef} \n      className={`absolute inset-0 -z-10 ${className}`}\n      style={{ \n        background: 'linear-gradient(135deg, rgba(0,0,0,0.9) 0%, rgba(20,20,40,0.9) 50%, rgba(40,20,60,0.9) 100%)' \n      }}\n    />\n  );\n}","size_bytes":4912},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3409},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-96 min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7446},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8505},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }","size_bytes":755},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/theme-toggle.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sun, Moon } from \"lucide-react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"dark\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const initialTheme = savedTheme || (prefersDark ? \"dark\" : \"light\");\n    \n    setTheme(initialTheme);\n    updateTheme(initialTheme);\n  }, []);\n\n  const updateTheme = (newTheme: \"light\" | \"dark\") => {\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n    localStorage.setItem(\"theme\", newTheme);\n  };\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"dark\" ? \"light\" : \"dark\";\n    setTheme(newTheme);\n    updateTheme(newTheme);\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      className=\"glass-morphism hover:bg-white/20 transition-all duration-300\"\n    >\n      <motion.div\n        initial={false}\n        animate={{ rotate: theme === \"dark\" ? 180 : 0 }}\n        transition={{ duration: 0.3, ease: \"easeInOut\" }}\n      >\n        {theme === \"dark\" ? (\n          <Sun className=\"w-5 h-5 text-cyber-yellow\" />\n        ) : (\n          <Moon className=\"w-5 h-5 text-cyber-blue\" />\n        )}\n      </motion.div>\n    </Button>\n  );\n}\n","size_bytes":1490},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/web3/CryptoPayment.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Wallet, AlertCircle, CheckCircle, Zap } from \"lucide-react\";\nimport { useWeb3 } from \"@/hooks/useWeb3\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CryptoPaymentProps {\n  campaignId: string;\n  campaignTitle: string;\n  onSuccess?: (transactionHash: string) => void;\n  onCancel?: () => void;\n}\n\nexport function CryptoPayment({ campaignId, campaignTitle, onSuccess, onCancel }: CryptoPaymentProps) {\n  const [amount, setAmount] = useState(\"\");\n  const [currency, setCurrency] = useState(\"ETH\");\n  const [message, setMessage] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { toast } = useToast();\n  \n  const {\n    isConnected,\n    account,\n    balance,\n    formatBalance,\n    connectWallet,\n    sendTransaction,\n    getNetworkName,\n    chainId,\n  } = useWeb3();\n\n  const handlePayment = async () => {\n    if (!isConnected || !account) {\n      toast({\n        title: \"Wallet Not Connected\",\n        description: \"Please connect your wallet to proceed\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!amount || parseFloat(amount) <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid contribution amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      // Create smart contract address for the campaign (mock for development)\n      const contractAddress = `0x${Math.random().toString(16).substr(2, 40)}`;\n      \n      const result = await sendTransaction(contractAddress, amount, campaignId);\n      \n      if (result && result.status === 'confirmed') {\n        toast({\n          title: \"Payment Successful!\",\n          description: `Successfully contributed ${amount} ${currency} to ${campaignTitle}`,\n        });\n        \n        if (onSuccess) {\n          onSuccess(result.hash);\n        }\n      }\n    } catch (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: \"Transaction failed. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const getEstimatedGas = () => {\n    return \"0.002 ETH\"; // Mock gas estimation\n  };\n\n  const getUSDValue = (cryptoAmount: string, cryptoCurrency: string) => {\n    // Mock USD conversion rates\n    const rates = {\n      ETH: 2000,\n      MATIC: 0.8,\n      USDC: 1.0,\n    };\n    \n    const rate = rates[cryptoCurrency as keyof typeof rates] || 0;\n    return (parseFloat(cryptoAmount || \"0\") * rate).toFixed(2);\n  };\n\n  if (!isConnected) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\" data-testid=\"crypto-payment-connect-card\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"flex items-center justify-center gap-2\">\n            <Wallet className=\"w-5 h-5\" />\n            Connect Wallet to Contribute\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Connect your Web3 wallet to contribute cryptocurrency to this campaign.\n            </AlertDescription>\n          </Alert>\n\n          <Button \n            onClick={connectWallet} \n            className=\"w-full\" \n            size=\"lg\"\n            data-testid=\"button-connect-wallet-payment\"\n          >\n            <Wallet className=\"w-4 h-4 mr-2\" />\n            Connect Wallet\n          </Button>\n\n          <div className=\"text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Supports MetaMask, WalletConnect, and other Web3 wallets\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"crypto-payment-form\">\n      {/* Wallet Status */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 rounded-full bg-green-100 dark:bg-green-900 flex items-center justify-center\">\n                <Wallet className=\"w-4 h-4 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"font-medium\">Wallet Connected</p>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"connected-wallet-address\">\n                  {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'N/A'}\n                </p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <Badge variant=\"outline\" data-testid=\"connected-network\">\n                {getNetworkName(chainId)}\n              </Badge>\n              <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"wallet-balance-display\">\n                Balance: {formatBalance(balance)} ETH\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Payment Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Zap className=\"w-5 h-5 text-yellow-500\" />\n            Crypto Contribution\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Amount and Currency */}\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"col-span-2 space-y-2\">\n                <Label htmlFor=\"amount\">Contribution Amount</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.001\"\n                  placeholder=\"0.1\"\n                  value={amount}\n                  onChange={(e) => setAmount(e.target.value)}\n                  data-testid=\"input-contribution-amount\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"currency\">Currency</Label>\n                <Select value={currency} onValueChange={setCurrency}>\n                  <SelectTrigger data-testid=\"select-payment-currency\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"ETH\">ETH</SelectItem>\n                    <SelectItem value=\"MATIC\">MATIC</SelectItem>\n                    <SelectItem value=\"USDC\">USDC</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* USD Conversion */}\n            {amount && (\n              <div className=\"text-center\">\n                <p className=\"text-lg font-semibold text-muted-foreground\">\n                  ≈ ${getUSDValue(amount, currency)} USD\n                </p>\n              </div>\n            )}\n          </div>\n\n          {/* Message */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"message\">Message (Optional)</Label>\n            <Input\n              id=\"message\"\n              placeholder=\"Leave a message of support...\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              data-testid=\"input-contribution-message\"\n            />\n          </div>\n\n          <Separator />\n\n          {/* Transaction Summary */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium\">Transaction Summary</h4>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span>Contribution:</span>\n                <span>{amount || \"0\"} {currency}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Estimated Gas:</span>\n                <span>{getEstimatedGas()}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Network:</span>\n                <span>{getNetworkName(chainId)}</span>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between font-medium\">\n                <span>Total Cost:</span>\n                <span>\n                  {amount ? (parseFloat(amount) + 0.002).toFixed(3) : \"0\"} ETH\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3\">\n            {onCancel && (\n              <Button \n                variant=\"outline\" \n                onClick={onCancel}\n                disabled={isProcessing}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-payment\"\n              >\n                Cancel\n              </Button>\n            )}\n            \n            <Button\n              onClick={handlePayment}\n              disabled={!amount || parseFloat(amount) <= 0 || isProcessing}\n              className=\"flex-1\"\n              data-testid=\"button-submit-crypto-payment\"\n            >\n              {isProcessing ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Processing...\n                </>\n              ) : (\n                <>\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Contribute {amount ? `${amount} ${currency}` : \"Now\"}\n                </>\n              )}\n            </Button>\n          </div>\n\n          {/* Security Notice */}\n          <Alert>\n            <CheckCircle className=\"h-4 w-4\" />\n            <AlertDescription className=\"text-xs\">\n              All transactions are secured by blockchain technology. Your contribution will be recorded \n              on-chain for full transparency. Transaction fees may apply based on network congestion.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10291},"client/src/components/web3/WalletConnector.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Wallet, Power, RefreshCw } from \"lucide-react\";\nimport { useWeb3 } from \"@/hooks/useWeb3\";\n\ninterface WalletConnectorProps {\n  onConnect?: (account: string) => void;\n  onDisconnect?: () => void;\n}\n\nexport function WalletConnector({ onConnect, onDisconnect }: WalletConnectorProps) {\n  const {\n    provider,\n    isLoading,\n    connectWallet,\n    disconnectWallet,\n    getNetworkName,\n    formatBalance,\n    isConnected,\n    account,\n    balance,\n    chainId,\n  } = useWeb3();\n\n  const handleConnect = async () => {\n    const success = await connectWallet();\n    if (success && account && onConnect) {\n      onConnect(account);\n    }\n  };\n\n  const handleDisconnect = async () => {\n    await disconnectWallet();\n    if (onDisconnect) {\n      onDisconnect();\n    }\n  };\n\n  if (!isConnected) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\" data-testid=\"wallet-connector-card\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col items-center space-y-4\">\n            <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-cyan-500 to-purple-600 flex items-center justify-center\">\n              <Wallet className=\"w-8 h-8 text-white\" />\n            </div>\n            \n            <div className=\"text-center space-y-2\">\n              <h3 className=\"text-xl font-semibold\">Connect Your Wallet</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Connect your Web3 wallet to contribute to campaigns and create projects\n              </p>\n            </div>\n\n            <Button\n              onClick={handleConnect}\n              disabled={isLoading}\n              className=\"w-full\"\n              data-testid=\"button-connect-wallet\"\n            >\n              {isLoading ? (\n                <>\n                  <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Connecting...\n                </>\n              ) : (\n                <>\n                  <Wallet className=\"w-4 h-4 mr-2\" />\n                  Connect Wallet\n                </>\n              )}\n            </Button>\n\n            <p className=\"text-xs text-center text-muted-foreground\">\n              Supports MetaMask, WalletConnect, and other Web3 wallets\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\" data-testid=\"wallet-connected-card\">\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 rounded-full bg-green-500 flex items-center justify-center\">\n                <Wallet className=\"w-4 h-4 text-white\" />\n              </div>\n              <span className=\"font-medium\">Wallet Connected</span>\n            </div>\n            <Badge variant=\"secondary\" className=\"text-green-600\">\n              Active\n            </Badge>\n          </div>\n\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Address:</span>\n              <span className=\"text-sm font-mono\" data-testid=\"wallet-address\">\n                {account ? `${account.slice(0, 6)}...${account.slice(-4)}` : 'N/A'}\n              </span>\n            </div>\n\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Network:</span>\n              <Badge variant=\"outline\" data-testid=\"wallet-network\">\n                {getNetworkName(chainId)}\n              </Badge>\n            </div>\n\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Balance:</span>\n              <span className=\"text-sm font-semibold\" data-testid=\"wallet-balance\">\n                {formatBalance(balance)} ETH\n              </span>\n            </div>\n          </div>\n\n          <div className=\"pt-4 border-t\">\n            <Button\n              onClick={handleDisconnect}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"w-full\"\n              data-testid=\"button-disconnect-wallet\"\n            >\n              <Power className=\"w-4 h-4 mr-2\" />\n              Disconnect\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4574},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Fixed Three.js shader error (renamed color attribute to particleColor)\n[x] 5. Fixed KYC document upload issue (changed button structure)  \n[x] 6. Enhanced admin KYC system with document preview and review workflow\n[x] 7. Fixed authentication route consistency issues\n[x] 8. Complete final testing and update replit.md\n[x] 9. Migration successfully completed","size_bytes":523},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"cryptofund-secret-key-2024\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          return done(null, user);\n        }\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { username, email, password, firstName, lastName } = req.body;\n      \n      if (!username || !email || !password) {\n        return res.status(400).json({ message: \"Username, email, and password are required\" });\n      }\n\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const user = await storage.createUser({\n        username,\n        email,\n        password: await hashPassword(password),\n        firstName: firstName || null,\n        lastName: lastName || null,\n        profileImageUrl: null,\n        walletAddress: null,\n        kycStatus: \"pending\",\n        kycDocuments: null,\n        role: \"user\",\n        isFlagged: false,\n        flaggedReason: null,\n        flaggedBy: null,\n        flaggedAt: null,\n        profileCompletion: 0,\n        joinDate: new Date(),\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          kycStatus: user.kycStatus,\n          profileImageUrl: user.profileImageUrl,\n          walletAddress: user.walletAddress,\n        });\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // GET /api/login - Check if user is already logged in or provide login info\n  app.get(\"/api/login\", (req, res) => {\n    if (req.isAuthenticated()) {\n      const user = req.user as SelectUser;\n      res.json({\n        authenticated: true,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          kycStatus: user.kycStatus,\n          profileImageUrl: user.profileImageUrl,\n          walletAddress: user.walletAddress,\n        }\n      });\n    } else {\n      res.json({\n        authenticated: false,\n        message: \"Please login\",\n        endpoints: {\n          login: \"POST /api/login with username and password\",\n          register: \"POST /api/register with user details\"\n        }\n      });\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Authentication error\", error: err.message });\n      }\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      req.logIn(user, (err: any) => {\n        if (err) {\n          return res.status(500).json({ message: \"Login error\", error: err.message });\n        }\n        res.status(200).json({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          kycStatus: user.kycStatus,\n          profileImageUrl: user.profileImageUrl,\n          walletAddress: user.walletAddress,\n        });\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.json(null);\n    const user = req.user as SelectUser;\n    res.json({\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      kycStatus: user.kycStatus,\n      profileImageUrl: user.profileImageUrl,\n      walletAddress: user.walletAddress,\n    });\n  });\n}\n\nexport function isAuthenticated(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Authentication required\" });\n}\n\nexport function requireAdmin(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Authentication required\" });\n  }\n  \n  const user = req.user;\n  if (user.role !== \"admin\") {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  \n  return next();\n}","size_bytes":6688},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}","size_bytes":704},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { MainNavigation } from \"@/components/navigation/MainNavigation\";\nimport { ThreeBackground } from \"@/components/three/ThreeBackground\";\nimport { \n  Lock, \n  Mail, \n  User, \n  Eye, \n  EyeOff,\n  Shield,\n  Zap,\n  Globe,\n  UserPlus\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  // Redirect if already logged in\n  if (user) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginForm) => {\n      return await apiRequest(\"POST\", \"/api/login\", credentials);\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome back!\",\n        description: `Successfully logged in as ${user.username}`,\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterForm) => {\n      return await apiRequest(\"POST\", \"/api/register\", credentials);\n    },\n    onSuccess: (user) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Account created!\",\n        description: `Welcome to CryptoFund, ${user.firstName || user.username}!`,\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onLogin = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background relative\">\n      <ThreeBackground />\n      <MainNavigation />\n      \n      <div className=\"relative z-10 pt-16\">\n        <section className=\"py-12 min-h-screen flex items-center justify-center\">\n          <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 w-full\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n              \n              {/* Hero Section */}\n              <motion.div\n                initial={{ opacity: 0, x: -50 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8 }}\n                className=\"space-y-8\"\n              >\n                <div>\n                  <h1 className=\"text-4xl md:text-6xl font-black mb-6 gradient-text\">\n                    Join the Future of Crowdfunding\n                  </h1>\n                  <p className=\"text-xl text-muted-foreground leading-relaxed\">\n                    Launch revolutionary campaigns, raise funds transparently on blockchain, \n                    and connect with innovators worldwide on our Web3 crowdfunding platform.\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center\">\n                      <Shield className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold\">Secure</h3>\n                      <p className=\"text-sm text-muted-foreground\">Blockchain verified</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-green-500 to-cyan-600 flex items-center justify-center\">\n                      <Zap className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold\">Fast</h3>\n                      <p className=\"text-sm text-muted-foreground\">Instant transactions</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-orange-500 to-red-600 flex items-center justify-center\">\n                      <Globe className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold\">Global</h3>\n                      <p className=\"text-sm text-muted-foreground\">Worldwide access</p>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Auth Forms */}\n              <motion.div\n                initial={{ opacity: 0, x: 50 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.8, delay: 0.2 }}\n                className=\"w-full max-w-md mx-auto\"\n              >\n                <Card className=\"glass-morphism\">\n                  <CardHeader className=\"text-center\">\n                    <CardTitle className=\"text-2xl font-bold\">Get Started</CardTitle>\n                    <CardDescription>\n                      Sign in to your account or create a new one\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n                      <TabsList className=\"grid w-full grid-cols-2\">\n                        <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                        <TabsTrigger value=\"register\">Sign Up</TabsTrigger>\n                      </TabsList>\n                      \n                      <TabsContent value=\"login\">\n                        <Form {...loginForm}>\n                          <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                            <FormField\n                              control={loginForm.control}\n                              name=\"username\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Username</FormLabel>\n                                  <FormControl>\n                                    <div className=\"relative\">\n                                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                                      <Input\n                                        placeholder=\"Enter your username\"\n                                        className=\"pl-10 form-focus\"\n                                        {...field}\n                                        data-testid=\"input-username\"\n                                      />\n                                    </div>\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={loginForm.control}\n                              name=\"password\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Password</FormLabel>\n                                  <FormControl>\n                                    <div className=\"relative\">\n                                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                                      <Input\n                                        type={showPassword ? \"text\" : \"password\"}\n                                        placeholder=\"Enter your password\"\n                                        className=\"pl-10 pr-10 form-focus\"\n                                        {...field}\n                                        data-testid=\"input-password\"\n                                      />\n                                      <Button\n                                        type=\"button\"\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-auto p-1\"\n                                        onClick={() => setShowPassword(!showPassword)}\n                                        data-testid=\"button-toggle-password\"\n                                      >\n                                        {showPassword ? (\n                                          <EyeOff className=\"w-4 h-4\" />\n                                        ) : (\n                                          <Eye className=\"w-4 h-4\" />\n                                        )}\n                                      </Button>\n                                    </div>\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <Button\n                              type=\"submit\"\n                              className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:scale-105 transition-all duration-300\"\n                              disabled={loginMutation.isPending}\n                              data-testid=\"button-login\"\n                            >\n                              {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                            </Button>\n                          </form>\n                        </Form>\n                      </TabsContent>\n                      \n                      <TabsContent value=\"register\">\n                        <Form {...registerForm}>\n                          <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <FormField\n                                control={registerForm.control}\n                                name=\"firstName\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>First Name</FormLabel>\n                                    <FormControl>\n                                      <Input\n                                        placeholder=\"John\"\n                                        className=\"form-focus\"\n                                        {...field}\n                                        data-testid=\"input-firstname\"\n                                      />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={registerForm.control}\n                                name=\"lastName\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Last Name</FormLabel>\n                                    <FormControl>\n                                      <Input\n                                        placeholder=\"Doe\"\n                                        className=\"form-focus\"\n                                        {...field}\n                                        data-testid=\"input-lastname\"\n                                      />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                            </div>\n                            <FormField\n                              control={registerForm.control}\n                              name=\"username\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Username *</FormLabel>\n                                  <FormControl>\n                                    <div className=\"relative\">\n                                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                                      <Input\n                                        placeholder=\"Choose a username\"\n                                        className=\"pl-10 form-focus\"\n                                        {...field}\n                                        data-testid=\"input-username-register\"\n                                      />\n                                    </div>\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={registerForm.control}\n                              name=\"email\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Email *</FormLabel>\n                                  <FormControl>\n                                    <div className=\"relative\">\n                                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                                      <Input\n                                        type=\"email\"\n                                        placeholder=\"john@example.com\"\n                                        className=\"pl-10 form-focus\"\n                                        {...field}\n                                        data-testid=\"input-email\"\n                                      />\n                                    </div>\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={registerForm.control}\n                              name=\"password\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Password *</FormLabel>\n                                  <FormControl>\n                                    <div className=\"relative\">\n                                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                                      <Input\n                                        type={showPassword ? \"text\" : \"password\"}\n                                        placeholder=\"Choose a strong password\"\n                                        className=\"pl-10 pr-10 form-focus\"\n                                        {...field}\n                                        data-testid=\"input-password-register\"\n                                      />\n                                      <Button\n                                        type=\"button\"\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-auto p-1\"\n                                        onClick={() => setShowPassword(!showPassword)}\n                                        data-testid=\"button-toggle-password-register\"\n                                      >\n                                        {showPassword ? (\n                                          <EyeOff className=\"w-4 h-4\" />\n                                        ) : (\n                                          <Eye className=\"w-4 h-4\" />\n                                        )}\n                                      </Button>\n                                    </div>\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <Button\n                              type=\"submit\"\n                              className=\"w-full bg-gradient-to-r from-green-600 to-blue-600 hover:scale-105 transition-all duration-300\"\n                              disabled={registerMutation.isPending}\n                              data-testid=\"button-register\"\n                            >\n                              {registerMutation.isPending ? (\n                                <>\n                                  <UserPlus className=\"w-4 h-4 mr-2 animate-spin\" />\n                                  Creating Account...\n                                </>\n                              ) : (\n                                <>\n                                  <UserPlus className=\"w-4 h-4 mr-2\" />\n                                  Create Account\n                                </>\n                              )}\n                            </Button>\n                          </form>\n                        </Form>\n                      </TabsContent>\n                    </Tabs>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}","size_bytes":19685},"server/seed.ts":{"content":"import { storage } from \"./storage\";\nimport { sql } from \"drizzle-orm\";\nimport { db } from \"./db\";\n\nexport async function seedDatabase() {\n  try {\n    console.log(\"Starting database seeding...\");\n\n    // Check if we already have data\n    const existingCampaigns = await storage.getCampaigns({ limit: 1 });\n    if (existingCampaigns.length > 0) {\n      console.log(\"Database already has data, skipping seed\");\n      return;\n    }\n\n    // Create sample users\n    const sampleUsers = [\n      {\n        username: \"johntech\",\n        email: \"john@example.com\",\n        password: \"$scrypt$N=16384,r=8,p=1$8f8c4e6a9b8d7c5e$a8f5f167f44f4964e6c998dee827110c\",\n        firstName: \"John\",\n        lastName: \"Tech\",\n        kycStatus: \"approved\" as const,\n        profileImageUrl: null,\n        walletAddress: \"0x742d35Cc6e1B5b5e8b8E2Be2B8D8B8B8B8B8B8B8\",\n        kycDocuments: null,\n      },\n      {\n        username: \"sarahdesign\",\n        email: \"sarah@example.com\", \n        password: \"$scrypt$N=16384,r=8,p=1$8f8c4e6a9b8d7c5e$a8f5f167f44f4964e6c998dee827110c\",\n        firstName: \"Sarah\",\n        lastName: \"Design\",\n        kycStatus: \"approved\" as const,\n        profileImageUrl: null,\n        walletAddress: \"0x1234567890123456789012345678901234567890\",\n        kycDocuments: null,\n      },\n    ];\n\n    const createdUsers = [];\n    for (const userData of sampleUsers) {\n      const user = await storage.createUser(userData);\n      createdUsers.push(user);\n      console.log(`Created user: ${user.username}`);\n    }\n\n    // Create sample campaigns\n    const sampleCampaigns = [\n      {\n        creatorId: createdUsers[0].id,\n        title: \"Revolutionary Blockchain Gaming Platform\",\n        description: \"Building the next-generation gaming platform that combines blockchain technology with immersive gameplay. Our platform will feature NFT-based characters, decentralized tournaments, and cross-game asset portability.\",\n        category: \"technology\",\n        fundingType: \"equity\" as const,\n        goalAmount: \"500000.0\",\n        currency: \"ETH\",\n        deadline: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000), // 60 days from now\n        imageUrl: \"https://images.unsplash.com/photo-1552820728-8b83bb6b773f?w=400&h=300&fit=crop&crop=entropy\",\n        status: \"active\" as const,\n        smartContractAddress: \"0x9876543210987654321098765432109876543210\",\n        tags: [\"gaming\", \"blockchain\", \"nft\", \"web3\"],\n        rewards: [\n          { tier: \"bronze\", amount: \"100\", description: \"Early access to beta + digital collectible\" },\n          { tier: \"silver\", amount: \"500\", description: \"Beta access + limited edition NFT character\" },\n          { tier: \"gold\", amount: \"1000\", description: \"All above + private tournament access\" }\n        ],\n        updates: [],\n      },\n      {\n        creatorId: createdUsers[1].id,\n        title: \"Sustainable Fashion Marketplace\",\n        description: \"An eco-friendly fashion marketplace connecting sustainable brands with conscious consumers. We're creating a platform that tracks the entire supply chain using blockchain technology for complete transparency.\",\n        category: \"fashion\",\n        fundingType: \"donation\" as const,\n        goalAmount: \"250000.0\",\n        currency: \"ETH\",\n        deadline: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000), // 45 days from now\n        imageUrl: \"https://images.unsplash.com/photo-1445205170230-053b83016050?w=400&h=300&fit=crop&crop=entropy\",\n        status: \"active\" as const,\n        smartContractAddress: \"0x1111222233334444555566667777888899990000\",\n        tags: [\"fashion\", \"sustainability\", \"marketplace\", \"eco-friendly\"],\n        rewards: [\n          { tier: \"supporter\", amount: \"50\", description: \"Thank you note + sticker pack\" },\n          { tier: \"advocate\", amount: \"200\", description: \"Sustainable fashion starter kit\" },\n          { tier: \"champion\", amount: \"500\", description: \"Limited edition sustainable wardrobe\" }\n        ],\n        updates: [],\n      },\n      {\n        creatorId: createdUsers[0].id,\n        title: \"DeFi Lending Protocol\",\n        description: \"A decentralized lending protocol that allows users to lend and borrow crypto assets with dynamic interest rates. Our innovative algorithm optimizes yields while minimizing risks.\",\n        category: \"finance\",\n        fundingType: \"equity\" as const,\n        goalAmount: \"1000000.0\",\n        currency: \"ETH\",\n        deadline: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days from now\n        imageUrl: \"https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?w=400&h=300&fit=crop&crop=entropy\",\n        status: \"active\" as const,\n        smartContractAddress: \"0xABCDEF1234567890ABCDEF1234567890ABCDEF12\",\n        tags: [\"defi\", \"lending\", \"protocol\", \"yield\"],\n        rewards: [],\n        updates: [],\n      }\n    ];\n\n    const createdCampaigns = [];\n    for (const campaignData of sampleCampaigns) {\n      const campaign = await storage.createCampaign(campaignData);\n      createdCampaigns.push(campaign);\n      console.log(`Created campaign: ${campaign.title}`);\n    }\n\n    // Create sample contributions\n    const sampleContributions = [\n      {\n        campaignId: createdCampaigns[0].id,\n        backerId: createdUsers[1].id,\n        amount: \"5000.0\",\n        currency: \"ETH\",\n        transactionHash: \"0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890\",\n        paymentMethod: \"crypto\" as const,\n        isAnonymous: false,\n        message: \"Excited to see this project succeed!\",\n        rewardTier: \"silver\",\n        status: \"confirmed\" as const,\n      },\n      {\n        campaignId: createdCampaigns[1].id,\n        backerId: createdUsers[0].id,\n        amount: \"1000.0\",\n        currency: \"ETH\",\n        transactionHash: \"0x9876543210987654321098765432109876543210987654321098765432109876\",\n        paymentMethod: \"crypto\" as const,\n        isAnonymous: false,\n        message: \"Supporting sustainable fashion innovation!\",\n        rewardTier: \"advocate\",\n        status: \"confirmed\" as const,\n      }\n    ];\n\n    for (const contributionData of sampleContributions) {\n      const contribution = await storage.createContribution(contributionData);\n      console.log(`Created contribution: ${contribution.amount} ${contribution.currency}`);\n    }\n\n    // Update campaign current amounts\n    await db.execute(sql`\n      UPDATE campaigns \n      SET current_amount = COALESCE((\n        SELECT SUM(CAST(amount AS DECIMAL)) \n        FROM contributions \n        WHERE campaign_id = campaigns.id AND status = 'confirmed'\n      ), 0),\n      backer_count = COALESCE((\n        SELECT COUNT(DISTINCT backer_id) \n        FROM contributions \n        WHERE campaign_id = campaigns.id AND status = 'confirmed'\n      ), 0)\n    `);\n\n    console.log(\"Database seeding completed successfully!\");\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n  }\n}","size_bytes":6880},"client/src/pages/kyc-new.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport KYCStatus from \"@/components/kyc/KYCStatus\";\nimport KYCForm from \"@/components/kyc/KYCForm\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, CheckCircle, ArrowLeft, Info } from \"lucide-react\";\n\ninterface KYCStatusData {\n  status: 'not_submitted' | 'pending' | 'approved' | 'rejected' | 'under_review';\n  submittedAt?: string;\n  reviewedAt?: string;\n  adminComments?: string;\n}\n\nexport default function KYC() {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const [, navigate] = useLocation();\n  const [showForm, setShowForm] = useState(false);\n\n  const { data: kycStatus, isLoading: statusLoading } = useQuery<KYCStatusData>({\n    queryKey: [\"/api/kyc/status\"],\n    enabled: isAuthenticated,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      navigate(\"/auth\");\n    }\n  }, [authLoading, isAuthenticated, navigate]);\n\n  if (authLoading || statusLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n              <div className=\"h-64 bg-muted rounded\"></div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user) {\n    return null;\n  }\n\n  const status = kycStatus?.status || 'not_submitted';\n  const canShowForm = status === 'not_submitted' || status === 'rejected';\n\n  const handleFormSuccess = () => {\n    setShowForm(false);\n    // Status will be updated automatically via query invalidation\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto space-y-8\">\n          {/* Header */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"text-center space-y-4\"\n          >\n            <div className=\"flex items-center justify-center gap-3\">\n              <div className=\"p-3 rounded-full bg-primary/10\">\n                <Shield className=\"w-8 h-8 text-primary\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold\">KYC Verification</h1>\n                <p className=\"text-muted-foreground\">\n                  Know Your Customer identity verification\n                </p>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Information Card */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n          >\n            <Card className=\"border-blue-200 bg-blue-50/50 dark:border-blue-800 dark:bg-blue-950/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start gap-3\">\n                  <Info className=\"w-5 h-5 text-blue-600 dark:text-blue-400 mt-0.5\" />\n                  <div>\n                    <h3 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">\n                      Why do we need KYC verification?\n                    </h3>\n                    <p className=\"text-blue-700 dark:text-blue-300 text-sm leading-relaxed\">\n                      KYC (Know Your Customer) verification helps us comply with financial regulations \n                      and ensures the security of our platform. Verified users can create fundraising \n                      campaigns and access advanced features. The verification process typically takes \n                      1-3 business days.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Main Content */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n          >\n            {!showForm ? (\n              <div className=\"space-y-6\">\n                {/* KYC Status */}\n                <KYCStatus />\n\n                {/* Action Buttons */}\n                {canShowForm && (\n                  <div className=\"text-center\">\n                    <Button\n                      onClick={() => setShowForm(true)}\n                      size=\"lg\"\n                      className=\"w-full max-w-md\"\n                      data-testid=\"button-start-kyc\"\n                    >\n                      <Shield className=\"w-5 h-5 mr-2\" />\n                      {status === 'rejected' ? 'Resubmit KYC Application' : 'Start KYC Verification'}\n                    </Button>\n                  </div>\n                )}\n\n                {/* Verification Steps */}\n                {status === 'not_submitted' && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Verification Process</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid gap-4 md:grid-cols-3\">\n                        <div className=\"text-center space-y-2\">\n                          <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto\">\n                            <span className=\"text-lg font-semibold text-primary\">1</span>\n                          </div>\n                          <h4 className=\"font-medium\">Personal Information</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Provide your basic personal details\n                          </p>\n                        </div>\n                        <div className=\"text-center space-y-2\">\n                          <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto\">\n                            <span className=\"text-lg font-semibold text-primary\">2</span>\n                          </div>\n                          <h4 className=\"font-medium\">Identity Verification</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Enter your ID details and financial information\n                          </p>\n                        </div>\n                        <div className=\"text-center space-y-2\">\n                          <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mx-auto\">\n                            <span className=\"text-lg font-semibold text-primary\">3</span>\n                          </div>\n                          <h4 className=\"font-medium\">Document Upload</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Upload photos of your ID and selfie\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Success Message */}\n                {status === 'approved' && (\n                  <Card className=\"border-green-200 bg-green-50/50 dark:border-green-800 dark:bg-green-950/20\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center gap-3\">\n                        <CheckCircle className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                        <div>\n                          <h3 className=\"font-semibold text-green-900 dark:text-green-100\">\n                            Verification Complete!\n                          </h3>\n                          <p className=\"text-green-700 dark:text-green-300 text-sm\">\n                            You can now create campaigns and access all platform features.\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {/* Back Button */}\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowForm(false)}\n                  className=\"mb-4\"\n                  data-testid=\"button-back-to-status\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Status\n                </Button>\n\n                {/* KYC Form */}\n                <KYCForm onSubmitSuccess={handleFormSuccess} />\n              </div>\n            )}\n          </motion.div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":9092},"client/src/components/admin/KYCManagement.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Eye, \n  Edit,\n  CheckCircle, \n  XCircle, \n  Clock, \n  AlertCircle,\n  Search,\n  Filter,\n  Download,\n  User,\n  Calendar,\n  MessageSquare,\n  FileText\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface KycApplication {\n  id: string;\n  userId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  dateOfBirth: string;\n  address: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n  idType: string;\n  idNumber: string;\n  occupation: string;\n  sourceOfFunds: string;\n  monthlyIncome: string;\n  idFrontImageUrl?: string;\n  idBackImageUrl?: string;\n  selfieImageUrl?: string;\n  status: 'pending' | 'approved' | 'rejected' | 'under_review';\n  adminComments?: string;\n  reviewedBy?: string;\n  reviewedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function KYCManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedApplication, setSelectedApplication] = useState<KycApplication | null>(null);\n  const [reviewStatus, setReviewStatus] = useState<string>(\"\");\n  const [adminComments, setAdminComments] = useState(\"\");\n\n  const { data: applications, isLoading } = useQuery<KycApplication[]>({\n    queryKey: [\"/api/admin/kyc/applications\", selectedStatus],\n    queryFn: () => apiRequest(\"GET\", `/api/admin/kyc/applications?status=${selectedStatus === 'all' ? '' : selectedStatus}`),\n  });\n\n  const reviewMutation = useMutation({\n    mutationFn: async ({ id, status, comments }: { id: string; status: string; comments: string }) => {\n      return await apiRequest(\"PUT\", `/api/admin/kyc/applications/${id}`, {\n        status,\n        adminComments: comments,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Application Updated\",\n        description: \"KYC application has been reviewed successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/kyc/applications\"] });\n      // Also invalidate user queries so KYC status updates everywhere\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/kyc/status\"] });\n      setSelectedApplication(null);\n      setReviewStatus(\"\");\n      setAdminComments(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Review Failed\",\n        description: error.message || \"Failed to update KYC application.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const configs = {\n      pending: { color: \"bg-yellow-100 text-yellow-800 border-yellow-300\", icon: Clock },\n      under_review: { color: \"bg-blue-100 text-blue-800 border-blue-300\", icon: AlertCircle },\n      approved: { color: \"bg-green-100 text-green-800 border-green-300\", icon: CheckCircle },\n      rejected: { color: \"bg-red-100 text-red-800 border-red-300\", icon: XCircle },\n    };\n    \n    const config = configs[status as keyof typeof configs] || configs.pending;\n    const Icon = config.icon;\n    \n    return (\n      <Badge className={`${config.color} flex items-center gap-1`}>\n        <Icon className=\"w-3 h-3\" />\n        {status.replace('_', ' ').toUpperCase()}\n      </Badge>\n    );\n  };\n\n  const filteredApplications = applications?.filter(app => {\n    const matchesSearch = searchTerm === \"\" || \n      app.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      app.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      app.email.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = selectedStatus === \"all\" || app.status === selectedStatus;\n    \n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  const handleReview = () => {\n    if (!selectedApplication || !reviewStatus) return;\n    \n    reviewMutation.mutate({\n      id: selectedApplication.id,\n      status: reviewStatus,\n      comments: adminComments,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-4\"></div>\n          <div className=\"h-64 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"kyc-management\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">KYC Management</h2>\n          <p className=\"text-muted-foreground\">Review and manage user verification applications</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <Label htmlFor=\"search\">Search Applications</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search by name or email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"status-filter\">Status Filter</Label>\n              <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"All Statuses\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"under_review\">Under Review</SelectItem>\n                  <SelectItem value=\"approved\">Approved</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        {['pending', 'under_review', 'approved', 'rejected'].map((status) => {\n          const count = applications?.filter(app => app.status === status).length || 0;\n          const configs = {\n            pending: { color: \"text-yellow-600\", bg: \"bg-yellow-50\", label: \"Pending\" },\n            under_review: { color: \"text-blue-600\", bg: \"bg-blue-50\", label: \"Under Review\" },\n            approved: { color: \"text-green-600\", bg: \"bg-green-50\", label: \"Approved\" },\n            rejected: { color: \"text-red-600\", bg: \"bg-red-50\", label: \"Rejected\" },\n          };\n          const config = configs[status as keyof typeof configs];\n          \n          return (\n            <Card key={status}>\n              <CardContent className={`p-4 ${config.bg}`}>\n                <div className=\"text-center\">\n                  <div className={`text-2xl font-bold ${config.color}`}>{count}</div>\n                  <div className=\"text-sm text-muted-foreground\">{config.label}</div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Applications Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>KYC Applications ({filteredApplications.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Applicant</TableHead>\n                <TableHead>Email</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Submitted</TableHead>\n                <TableHead>Reviewed</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredApplications.map((application) => (\n                <TableRow key={application.id} data-testid={`row-application-${application.id}`}>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <User className=\"w-4 h-4\" />\n                      </div>\n                      <div>\n                        <div className=\"font-medium\">\n                          {application.firstName} {application.lastName}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {application.country}\n                        </div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>{application.email}</TableCell>\n                  <TableCell>{getStatusBadge(application.status)}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                      <Calendar className=\"w-3 h-3\" />\n                      {format(new Date(application.createdAt), 'MMM dd, yyyy')}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {application.reviewedAt ? (\n                      <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                        <Calendar className=\"w-3 h-3\" />\n                        {format(new Date(application.reviewedAt), 'MMM dd, yyyy')}\n                      </div>\n                    ) : (\n                      <span className=\"text-muted-foreground\">-</span>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedApplication(application);\n                            setReviewStatus(application.status);\n                            setAdminComments(application.adminComments || \"\");\n                          }}\n                          data-testid={`button-view-${application.id}`}\n                        >\n                          <Eye className=\"w-4 h-4 mr-1\" />\n                          View & Review\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                        <DialogHeader>\n                          <DialogTitle>\n                            KYC Application Review - {application.firstName} {application.lastName}\n                          </DialogTitle>\n                        </DialogHeader>\n                        \n                        {selectedApplication && (\n                          <div className=\"space-y-6\">\n                            {/* Personal Information */}\n                            <Card>\n                              <CardHeader>\n                                <CardTitle className=\"text-lg\">Personal Information</CardTitle>\n                              </CardHeader>\n                              <CardContent className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <Label>Full Name</Label>\n                                  <p className=\"text-sm\">{selectedApplication.firstName} {selectedApplication.lastName}</p>\n                                </div>\n                                <div>\n                                  <Label>Date of Birth</Label>\n                                  <p className=\"text-sm\">{selectedApplication.dateOfBirth}</p>\n                                </div>\n                                <div>\n                                  <Label>Email</Label>\n                                  <p className=\"text-sm\">{selectedApplication.email}</p>\n                                </div>\n                                <div>\n                                  <Label>Phone</Label>\n                                  <p className=\"text-sm\">{selectedApplication.phone}</p>\n                                </div>\n                                <div className=\"col-span-2\">\n                                  <Label>Address</Label>\n                                  <p className=\"text-sm\">\n                                    {selectedApplication.address}, {selectedApplication.city}, {selectedApplication.state} {selectedApplication.zipCode}, {selectedApplication.country}\n                                  </p>\n                                </div>\n                              </CardContent>\n                            </Card>\n\n                            {/* Identity Information */}\n                            <Card>\n                              <CardHeader>\n                                <CardTitle className=\"text-lg\">Identity & Financial Information</CardTitle>\n                              </CardHeader>\n                              <CardContent className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <Label>ID Type</Label>\n                                  <p className=\"text-sm\">{selectedApplication.idType.replace('_', ' ').toUpperCase()}</p>\n                                </div>\n                                <div>\n                                  <Label>ID Number</Label>\n                                  <p className=\"text-sm\">{selectedApplication.idNumber}</p>\n                                </div>\n                                <div>\n                                  <Label>Occupation</Label>\n                                  <p className=\"text-sm\">{selectedApplication.occupation}</p>\n                                </div>\n                                <div>\n                                  <Label>Monthly Income</Label>\n                                  <p className=\"text-sm\">{selectedApplication.monthlyIncome}</p>\n                                </div>\n                                <div className=\"col-span-2\">\n                                  <Label>Source of Funds</Label>\n                                  <p className=\"text-sm\">{selectedApplication.sourceOfFunds}</p>\n                                </div>\n                              </CardContent>\n                            </Card>\n\n                            {/* Document Images */}\n                            <Card>\n                              <CardHeader>\n                                <CardTitle className=\"text-lg\">Uploaded Documents</CardTitle>\n                              </CardHeader>\n                              <CardContent className=\"space-y-4\">\n                                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                                  {[\n                                    { label: \"ID Front\", url: selectedApplication.idFrontImageUrl },\n                                    { label: \"ID Back\", url: selectedApplication.idBackImageUrl },\n                                    { label: \"Selfie\", url: selectedApplication.selfieImageUrl },\n                                  ].map((doc, index) => (\n                                    <div key={index} className=\"text-center\">\n                                      <Label className=\"text-sm font-medium\">{doc.label}</Label>\n                                      <div className=\"mt-2 border-2 border-dashed border-muted-foreground/25 rounded-lg p-8\">\n                                        {doc.url ? (\n                                          <div className=\"space-y-2\">\n                                            {doc.url.startsWith('data:image') ? (\n                                              <img \n                                                src={doc.url} \n                                                alt={doc.label}\n                                                className=\"w-full h-32 object-cover rounded border\"\n                                              />\n                                            ) : (\n                                              <FileText className=\"w-8 h-8 mx-auto text-green-600\" />\n                                            )}\n                                            <p className=\"text-sm text-green-600\">Document uploaded</p>\n                                            {doc.url.startsWith('data:image') && (\n                                              <Button \n                                                variant=\"outline\" \n                                                size=\"sm\"\n                                                onClick={() => window.open(doc.url, '_blank')}\n                                              >\n                                                View Full Size\n                                              </Button>\n                                            )}\n                                          </div>\n                                        ) : (\n                                          <div className=\"space-y-2\">\n                                            <AlertCircle className=\"w-8 h-8 mx-auto text-muted-foreground\" />\n                                            <p className=\"text-sm text-muted-foreground\">No document</p>\n                                          </div>\n                                        )}\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              </CardContent>\n                            </Card>\n\n                            {/* Review Section */}\n                            <Card>\n                              <CardHeader>\n                                <CardTitle className=\"text-lg\">Application Review</CardTitle>\n                              </CardHeader>\n                              <CardContent className=\"space-y-4\">\n                                <div>\n                                  <Label htmlFor=\"review-status\">Review Decision</Label>\n                                  <Select value={reviewStatus} onValueChange={setReviewStatus}>\n                                    <SelectTrigger data-testid=\"select-review-status\">\n                                      <SelectValue placeholder=\"Select decision\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"under_review\">Under Review</SelectItem>\n                                      <SelectItem value=\"approved\">Approve</SelectItem>\n                                      <SelectItem value=\"rejected\">Reject</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n\n                                <div>\n                                  <Label htmlFor=\"admin-comments\">Admin Comments</Label>\n                                  <Textarea\n                                    id=\"admin-comments\"\n                                    placeholder=\"Add comments about this application...\"\n                                    value={adminComments}\n                                    onChange={(e) => setAdminComments(e.target.value)}\n                                    rows={4}\n                                    data-testid=\"textarea-admin-comments\"\n                                  />\n                                </div>\n\n                                <div className=\"flex justify-end gap-2\">\n                                  <Button\n                                    variant=\"outline\"\n                                    onClick={() => setSelectedApplication(null)}\n                                    data-testid=\"button-cancel-review\"\n                                  >\n                                    Cancel\n                                  </Button>\n                                  <Button\n                                    onClick={handleReview}\n                                    disabled={!reviewStatus || reviewMutation.isPending}\n                                    data-testid=\"button-submit-review\"\n                                  >\n                                    {reviewMutation.isPending ? \"Updating...\" : \"Submit Review\"}\n                                  </Button>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          </div>\n                        )}\n                      </DialogContent>\n                    </Dialog>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n\n          {filteredApplications.length === 0 && (\n            <div className=\"text-center py-8\">\n              <FileText className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No applications found</h3>\n              <p className=\"text-muted-foreground\">\n                {searchTerm || selectedStatus !== \"all\" \n                  ? \"Try adjusting your search or filter criteria.\"\n                  : \"No KYC applications have been submitted yet.\"}\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":22636},"client/src/components/kyc/KYCForm.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Upload, FileText, User, Building, Shield, AlertCircle } from \"lucide-react\";\n\nconst kycFormSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  phone: z.string().min(10, \"Please enter a valid phone number\"),\n  dateOfBirth: z.string().min(1, \"Date of birth is required\"),\n  address: z.string().min(10, \"Please enter your complete address\"),\n  city: z.string().min(2, \"City is required\"),\n  state: z.string().min(2, \"State/Province is required\"),\n  zipCode: z.string().min(3, \"ZIP/Postal code is required\"),\n  country: z.string().min(2, \"Country is required\"),\n  idType: z.enum([\"passport\", \"driver_license\", \"national_id\"], {\n    required_error: \"Please select an ID type\",\n  }),\n  idNumber: z.string().min(5, \"ID number is required\"),\n  occupation: z.string().min(2, \"Occupation is required\"),\n  sourceOfFunds: z.string().min(2, \"Source of funds is required\"),\n  monthlyIncome: z.string().min(1, \"Monthly income range is required\"),\n});\n\ntype KycFormData = z.infer<typeof kycFormSchema>;\n\ninterface KYCFormProps {\n  onSubmitSuccess: () => void;\n}\n\nexport default function KYCForm({ onSubmitSuccess }: KYCFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [uploadedFiles, setUploadedFiles] = useState({\n    idFront: null as File | null,\n    idBack: null as File | null,\n    selfie: null as File | null,\n  });\n\n  const form = useForm<KycFormData>({\n    resolver: zodResolver(kycFormSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      dateOfBirth: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      zipCode: \"\",\n      country: \"\",\n      idType: \"passport\",\n      idNumber: \"\",\n      occupation: \"\",\n      sourceOfFunds: \"\",\n      monthlyIncome: \"\",\n    },\n  });\n\n  const submitKycMutation = useMutation({\n    mutationFn: async (data: KycFormData) => {\n      // Convert uploaded files to base64 for storage\n      const processFile = (file: File): Promise<string> => {\n        return new Promise((resolve) => {\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result as string);\n          reader.readAsDataURL(file);\n        });\n      };\n\n      const formData = {\n        ...data,\n        idFrontImageUrl: uploadedFiles.idFront ? await processFile(uploadedFiles.idFront) : null,\n        idBackImageUrl: uploadedFiles.idBack ? await processFile(uploadedFiles.idBack) : null,\n        selfieImageUrl: uploadedFiles.selfie ? await processFile(uploadedFiles.selfie) : null,\n      };\n      \n      return await apiRequest(\"POST\", \"/api/kyc/submit\", formData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"KYC Application Submitted\",\n        description: \"Your verification documents have been submitted for review. You'll be notified within 1-3 business days.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/kyc/status\"] });\n      onSubmitSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Submission Failed\",\n        description: error.message || \"Failed to submit KYC application. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = (type: 'idFront' | 'idBack' | 'selfie', file: File) => {\n    // Check file size (max 5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select an image smaller than 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploadedFiles(prev => ({\n      ...prev,\n      [type]: file,\n    }));\n  };\n\n  const validateCurrentStep = (data: KycFormData): boolean => {\n    if (currentStep === 1) {\n      // Validate personal information fields\n      const requiredFields = ['firstName', 'lastName', 'email', 'phone', 'dateOfBirth', 'address', 'city', 'state', 'zipCode', 'country'];\n      return requiredFields.every(field => {\n        const value = data[field as keyof KycFormData];\n        return value && value.toString().trim() !== '';\n      });\n    } else if (currentStep === 2) {\n      // Validate identity verification fields\n      const requiredFields = ['idType', 'idNumber', 'occupation', 'sourceOfFunds', 'monthlyIncome'];\n      return requiredFields.every(field => {\n        const value = data[field as keyof KycFormData];\n        return value && value.toString().trim() !== '';\n      });\n    }\n    return true;\n  };\n\n  const handleNextStep = () => {\n    // Get current form values\n    const formData = form.getValues();\n    console.log('Current form data:', formData);\n    console.log('Current step:', currentStep);\n    \n    // Validate current step without triggering full form validation\n    const stepValid = validateCurrentStep(formData);\n    console.log('Step valid:', stepValid);\n    \n    if (stepValid) {\n      setCurrentStep(currentStep + 1);\n      toast({\n        title: `Step ${currentStep} completed!`,\n        description: \"Proceeding to the next step.\",\n      });\n    } else {\n      toast({\n        title: \"Please fill all required fields\",\n        description: \"Complete all fields in this step before proceeding.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const onSubmit = async (data: KycFormData) => {\n    console.log('Final form submitted with data:', data);\n    \n    // This should only be called on the final step\n    if (currentStep !== 3) {\n      handleNextStep();\n      return;\n    }\n    \n    // Final step - validate documents and submit\n    if (!uploadedFiles.idFront || !uploadedFiles.selfie) {\n      toast({\n        title: \"Documents Required\",\n        description: \"Please upload your ID document and selfie before submitting.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitKycMutation.mutate(data);\n  };\n\n  const steps = [\n    { number: 1, title: \"Personal Information\", icon: User },\n    { number: 2, title: \"Identity Verification\", icon: FileText },\n    { number: 3, title: \"Document Upload\", icon: Upload },\n  ];\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-8\" data-testid=\"kyc-form\">\n      {/* Progress Steps */}\n      <div className=\"flex justify-center mb-8\">\n        <div className=\"flex items-center space-x-4\">\n          {steps.map((step) => (\n            <div key={step.number} className=\"flex items-center\">\n              <div\n                className={`flex items-center justify-center w-12 h-12 rounded-full border-2 ${\n                  currentStep >= step.number\n                    ? \"bg-primary border-primary text-primary-foreground\"\n                    : \"border-muted-foreground text-muted-foreground\"\n                }`}\n              >\n                <step.icon className=\"w-5 h-5\" />\n              </div>\n              <div className=\"ml-3 text-sm font-medium\">{step.title}</div>\n              {step.number < steps.length && (\n                <div\n                  className={`ml-4 w-16 h-0.5 ${\n                    currentStep > step.number ? \"bg-primary\" : \"bg-muted\"\n                  }`}\n                />\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Step 1: Personal Information */}\n          {currentStep === 1 && (\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n            >\n              <Card data-testid=\"personal-info-step\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <User className=\"w-5 h-5\" />\n                    Personal Information\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-firstName\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Last Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-lastName\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email Address</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" {...field} data-testid=\"input-email\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"phone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Phone Number</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-phone\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"dateOfBirth\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date of Birth</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-dateOfBirth\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Address</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} data-testid=\"input-address\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"city\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>City</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-city\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"state\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>State/Province</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-state\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"zipCode\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>ZIP/Postal Code</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-zipCode\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"country\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Country</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-country\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n            </motion.div>\n          )}\n\n          {/* Step 2: Identity Verification */}\n          {currentStep === 2 && (\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n            >\n              <Card data-testid=\"identity-verification-step\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <FileText className=\"w-5 h-5\" />\n                    Identity Verification\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"idType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ID Document Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-idType\">\n                              <SelectValue placeholder=\"Select ID type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"passport\">Passport</SelectItem>\n                            <SelectItem value=\"driver_license\">Driver's License</SelectItem>\n                            <SelectItem value=\"national_id\">National ID</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"idNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>ID Number</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-idNumber\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"occupation\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Occupation</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-occupation\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"sourceOfFunds\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Source of Funds</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., Employment, Business, Investment\" data-testid=\"input-sourceOfFunds\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"monthlyIncome\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Monthly Income Range</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-monthlyIncome\">\n                              <SelectValue placeholder=\"Select income range\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"0-1000\">$0 - $1,000</SelectItem>\n                            <SelectItem value=\"1000-5000\">$1,000 - $5,000</SelectItem>\n                            <SelectItem value=\"5000-10000\">$5,000 - $10,000</SelectItem>\n                            <SelectItem value=\"10000-25000\">$10,000 - $25,000</SelectItem>\n                            <SelectItem value=\"25000+\">$25,000+</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n            </motion.div>\n          )}\n\n          {/* Step 3: Document Upload */}\n          {currentStep === 3 && (\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n            >\n              <Card data-testid=\"document-upload-step\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Upload className=\"w-5 h-5\" />\n                    Document Upload\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {/* ID Front */}\n                    <div className=\"space-y-2\">\n                      <Label>ID Document (Front)</Label>\n                      <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center\">\n                        <Upload className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          Upload front side of your ID\n                        </p>\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={(e) => {\n                            const file = e.target.files?.[0];\n                            if (file) handleFileUpload('idFront', file);\n                          }}\n                          className=\"hidden\"\n                          id=\"id-front-upload\"\n                          data-testid=\"upload-idFront\"\n                        />\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => document.getElementById('id-front-upload')?.click()}\n                        >\n                          Choose File\n                        </Button>\n                        {uploadedFiles.idFront && (\n                          <p className=\"text-sm text-green-600 mt-2\">\n                            ✓ {uploadedFiles.idFront.name}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* ID Back */}\n                    <div className=\"space-y-2\">\n                      <Label>ID Document (Back) - Optional</Label>\n                      <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center\">\n                        <Upload className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          Upload back side of your ID (if applicable)\n                        </p>\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={(e) => {\n                            const file = e.target.files?.[0];\n                            if (file) handleFileUpload('idBack', file);\n                          }}\n                          className=\"hidden\"\n                          id=\"id-back-upload\"\n                          data-testid=\"upload-idBack\"\n                        />\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => document.getElementById('id-back-upload')?.click()}\n                        >\n                          Choose File\n                        </Button>\n                        {uploadedFiles.idBack && (\n                          <p className=\"text-sm text-green-600 mt-2\">\n                            ✓ {uploadedFiles.idBack.name}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Selfie */}\n                    <div className=\"space-y-2 md:col-span-2\">\n                      <Label>Selfie with ID</Label>\n                      <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center max-w-md mx-auto\">\n                        <Upload className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          Upload a selfie holding your ID document\n                        </p>\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={(e) => {\n                            const file = e.target.files?.[0];\n                            if (file) handleFileUpload('selfie', file);\n                          }}\n                          className=\"hidden\"\n                          id=\"selfie-upload\"\n                          data-testid=\"upload-selfie\"\n                        />\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => document.getElementById('selfie-upload')?.click()}\n                        >\n                          Choose File\n                        </Button>\n                        {uploadedFiles.selfie && (\n                          <p className=\"text-sm text-green-600 mt-2\">\n                            ✓ {uploadedFiles.selfie.name}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-blue-50 dark:bg-blue-950/50 p-4 rounded-lg border border-blue-200 dark:border-blue-800\">\n                    <div className=\"flex items-start gap-3\">\n                      <AlertCircle className=\"w-5 h-5 text-blue-600 dark:text-blue-400 mt-0.5\" />\n                      <div>\n                        <h4 className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\n                          Document Guidelines\n                        </h4>\n                        <ul className=\"text-sm text-blue-700 dark:text-blue-300 mt-1 space-y-1\">\n                          <li>• Ensure all text is clearly visible and readable</li>\n                          <li>• Photos should be well-lit and in focus</li>\n                          <li>• Accepted formats: JPG, PNG, PDF</li>\n                          <li>• Maximum file size: 10MB per document</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          )}\n\n          {/* Navigation Buttons */}\n          <div className=\"flex justify-between pt-6\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n              disabled={currentStep === 1}\n              data-testid=\"button-previous\"\n            >\n              Previous\n            </Button>\n\n            {currentStep < 3 ? (\n              <Button\n                type=\"button\"\n                onClick={handleNextStep}\n                data-testid=\"button-next\"\n              >\n                Next\n              </Button>\n            ) : (\n              <Button\n                type=\"submit\"\n                disabled={submitKycMutation.isPending}\n                data-testid=\"button-submit\"\n              >\n                {submitKycMutation.isPending ? \"Submitting...\" : \"Submit KYC Application\"}\n              </Button>\n            )}\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}","size_bytes":27204},"client/src/components/kyc/KYCStatus.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useState } from \"react\";\nimport { \n  Shield, \n  CheckCircle, \n  Clock, \n  AlertTriangle,\n  FileText,\n  XCircle,\n  Calendar,\n  MessageCircle,\n  RefreshCw\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface KYCStatusProps {\n  className?: string;\n}\n\ninterface KYCStatusData {\n  status: 'not_submitted' | 'pending' | 'approved' | 'rejected' | 'under_review';\n  submittedAt?: string;\n  reviewedAt?: string;\n  adminComments?: string;\n}\n\nexport default function KYCStatus({ className = \"\" }: KYCStatusProps) {\n  const { user, isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const { data: kycStatus, isLoading, refetch } = useQuery<KYCStatusData>({\n    queryKey: [\"/api/kyc/status\"],\n    enabled: isAuthenticated,\n  });\n\n  const handleRefreshStatus = async () => {\n    setIsRefreshing(true);\n    try {\n      const { data } = await refetch();\n      // Also invalidate user query to update the user profile\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      \n      if (data?.status !== kycStatus?.status) {\n        // Status changed, show notification\n        console.log('KYC status updated:', data?.status);\n      } else {\n        console.log('Still under review, please check back later');\n      }\n    } catch (error) {\n      console.error('Failed to refresh status:', error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  if (!user || isLoading) {\n    return (\n      <Card className={`border-muted ${className}`}>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-muted rounded w-1/3 mb-2\"></div>\n            <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getStatusConfig = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return {\n          icon: CheckCircle,\n          color: \"text-green-500\",\n          bgColor: \"bg-green-500/10\",\n          borderColor: \"border-green-500/30\",\n          title: \"KYC Verified\",\n          description: \"Your identity has been successfully verified. You can now create campaigns!\",\n          actionText: \"Create Campaign\",\n          actionVariant: \"default\" as const,\n          actionLink: \"/create-campaign\",\n          progress: 100,\n          step: 4,\n        };\n      case \"pending\":\n      case \"under_review\":\n        return {\n          icon: Clock,\n          color: \"text-yellow-500\",\n          bgColor: \"bg-yellow-500/10\",\n          borderColor: \"border-yellow-500/30\",\n          title: \"KYC Under Review\",\n          description: \"Your documents are being reviewed. You'll be notified within 1-3 business days.\",\n          actionText: \"Check Back Later\",\n          actionVariant: \"outline\" as const,\n          progress: 50,\n          step: 2,\n        };\n      case \"rejected\":\n        return {\n          icon: XCircle,\n          color: \"text-red-500\",\n          bgColor: \"bg-red-500/10\",\n          borderColor: \"border-red-500/30\",\n          title: \"KYC Rejected\",\n          description: \"Your application needs corrections. Please resubmit with updated documents.\",\n          actionText: \"Resubmit Application\",\n          actionVariant: \"destructive\" as const,\n          actionLink: \"/kyc\",\n          progress: 25,\n          step: 1,\n        };\n      default:\n        return {\n          icon: AlertTriangle,\n          color: \"text-blue-500\",\n          bgColor: \"bg-blue-500/10\",\n          borderColor: \"border-blue-500/30\",\n          title: \"KYC Required\",\n          description: \"Complete identity verification to create fundraising campaigns.\",\n          actionText: \"Start Verification\",\n          actionVariant: \"default\" as const,\n          actionLink: \"/kyc\",\n          progress: 25,\n          step: 1,\n        };\n    }\n  };\n\n  const getStepConfig = (stepNumber: number, currentStep: number) => {\n    const steps = [\n      { title: \"Document Submission\", description: \"Submit your verification documents\" },\n      { title: \"Under Review\", description: \"Documents being reviewed by our team\" },\n      { title: \"Verification Complete\", description: \"Identity successfully verified\" },\n      { title: \"Ready to Launch Campaign\", description: \"Create unlimited fundraising campaigns\" },\n    ];\n    \n    const isActive = stepNumber <= currentStep;\n    const isCurrent = stepNumber === currentStep;\n    \n    return {\n      ...steps[stepNumber - 1],\n      isActive,\n      isCurrent,\n      percentage: stepNumber * 25,\n    };\n  };\n\n  // Always use the KYC status from the API, fallback to user.kycStatus, then 'not_submitted'\n  const status = kycStatus?.status || user?.kycStatus || 'not_submitted';\n  const config = getStatusConfig(status);\n  const StatusIcon = config.icon;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className={className}\n    >\n      <Card \n        className={`border-2 ${config.borderColor} ${config.bgColor} backdrop-blur-sm`}\n        data-testid=\"kyc-status-card\"\n      >\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-3\">\n            <div className={`p-2 rounded-full ${config.bgColor}`}>\n              <StatusIcon className={`w-5 h-5 ${config.color}`} />\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-lg font-semibold\">{config.title}</span>\n                <Badge \n                  variant={status === 'approved' ? 'default' : 'secondary'}\n                  className={`${config.color} border-current`}\n                  data-testid={`badge-status-${status}`}\n                >\n                  {status.replace('_', ' ').toUpperCase()}\n                </Badge>\n              </div>\n              \n              {/* KYC Process Steps */}\n              <div className=\"mt-4 space-y-3\">\n                <div className=\"flex items-center justify-between text-sm font-medium\">\n                  <span>Step {config.step} of 4 – {config.progress}% Complete</span>\n                  {(status === 'pending' || status === 'under_review') && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={handleRefreshStatus}\n                      disabled={isRefreshing}\n                      className=\"h-6 px-2 text-xs\"\n                    >\n                      <RefreshCw className={`w-3 h-3 mr-1 ${isRefreshing ? 'animate-spin' : ''}`} />\n                      Refresh Status\n                    </Button>\n                  )}\n                </div>\n                \n                {/* Progress Steps */}\n                <div className=\"grid grid-cols-4 gap-2\">\n                  {[1, 2, 3, 4].map((stepNum) => {\n                    const stepConfig = getStepConfig(stepNum, config.step);\n                    return (\n                      <div key={stepNum} className=\"text-center\">\n                        <div className={`w-6 h-6 rounded-full mx-auto mb-1 flex items-center justify-center text-xs font-medium ${\n                          stepConfig.isCurrent \n                            ? 'bg-primary text-primary-foreground animate-pulse'\n                            : stepConfig.isActive \n                            ? 'bg-green-500 text-white'\n                            : 'bg-muted text-muted-foreground'\n                        }`}>\n                          {stepConfig.isActive && !stepConfig.isCurrent ? '✓' : stepNum}\n                        </div>\n                        <div className={`text-xs leading-tight ${\n                          stepConfig.isCurrent \n                            ? 'font-medium text-primary'\n                            : stepConfig.isActive \n                            ? 'text-green-600 dark:text-green-400'\n                            : 'text-muted-foreground'\n                        }`}>\n                          {stepConfig.title}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n                \n                <Progress \n                  value={config.progress} \n                  className=\"h-2\" \n                  data-testid=\"progress-kyc\"\n                />\n              </div>\n            </div>\n          </CardTitle>\n        </CardHeader>\n\n        <CardContent className=\"pt-0 space-y-4\">\n          <p className=\"text-muted-foreground text-sm leading-relaxed\">\n            {config.description}\n          </p>\n\n          {/* Timeline Information */}\n          {kycStatus && kycStatus.status !== 'not_submitted' && (\n            <div className=\"space-y-2 text-sm\">\n              {kycStatus.submittedAt && (\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <Calendar className=\"w-4 h-4\" />\n                  <span>Submitted: {new Date(kycStatus.submittedAt).toLocaleDateString()}</span>\n                </div>\n              )}\n              \n              {kycStatus.reviewedAt && (\n                <div className=\"flex items-center gap-2 text-muted-foreground\">\n                  <Clock className=\"w-4 h-4\" />\n                  <span>Reviewed: {new Date(kycStatus.reviewedAt).toLocaleDateString()}</span>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Admin Comments */}\n          {kycStatus?.adminComments && (\n            <div className=\"p-3 rounded-lg bg-muted/50 border\">\n              <div className=\"flex items-start gap-2\">\n                <MessageCircle className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                <div>\n                  <p className=\"text-sm font-medium\">Admin Feedback:</p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {kycStatus.adminComments}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Action Button */}\n          {config.actionLink ? (\n            <Link href={config.actionLink}>\n              <Button \n                variant={config.actionVariant} \n                className=\"w-full\"\n                data-testid={`button-${config.actionText.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <Shield className=\"w-4 h-4 mr-2\" />\n                {config.actionText}\n              </Button>\n            </Link>\n          ) : (\n            <Button \n              variant={config.actionVariant} \n              className=\"w-full\" \n              disabled\n              data-testid={`button-${config.actionText.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <Clock className=\"w-4 h-4 mr-2\" />\n              {config.actionText}\n            </Button>\n          )}\n\n          {/* KYC Benefits */}\n          {status === 'not_submitted' && (\n            <div className=\"mt-4 p-3 rounded-lg bg-gradient-to-r from-blue-500/10 to-purple-500/10 border border-blue-500/20\">\n              <h4 className=\"text-sm font-medium mb-2\">Unlock with KYC Verification:</h4>\n              <ul className=\"text-xs text-muted-foreground space-y-1\">\n                <li>• Create unlimited fundraising campaigns</li>\n                <li>• Access to advanced analytics and insights</li>\n                <li>• Higher contribution limits</li>\n                <li>• Priority customer support</li>\n              </ul>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}","size_bytes":11942},"client/src/hooks/useAdminWebSocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\n\ninterface WebSocketMessage {\n  type: string;\n  event?: string;\n  data?: any;\n  timestamp?: string;\n}\n\nexport function useAdminWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n  const queryClient = useQueryClient();\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n  const [lastUpdate, setLastUpdate] = useState<string>('');\n\n  const connect = () => {\n    try {\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${protocol}//${window.location.host}/ws/admin`;\n      \n      wsRef.current = new WebSocket(wsUrl);\n\n      wsRef.current.onopen = () => {\n        console.log('Admin WebSocket connected');\n        setIsConnected(true);\n        \n        // Authenticate as admin\n        wsRef.current?.send(JSON.stringify({\n          type: 'authenticate',\n          role: 'admin',\n          userId: 'admin', // In a real app, get from user context\n        }));\n\n        // Clear any pending reconnect timeout\n        if (reconnectTimeoutRef.current) {\n          clearTimeout(reconnectTimeoutRef.current);\n        }\n      };\n\n      wsRef.current.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          handleWebSocketMessage(message);\n        } catch (error) {\n          console.error('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      wsRef.current.onclose = () => {\n        console.log('Admin WebSocket disconnected');\n        setIsConnected(false);\n        \n        // Attempt to reconnect after 3 seconds\n        reconnectTimeoutRef.current = setTimeout(() => {\n          connect();\n        }, 3000);\n      };\n\n      wsRef.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      };\n\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n      setIsConnected(false);\n    }\n  };\n\n  const handleWebSocketMessage = (message: WebSocketMessage) => {\n    console.log('Received WebSocket message:', message);\n    \n    switch (message.type) {\n      case 'authenticated':\n        console.log('Admin authenticated');\n        break;\n        \n      case 'update':\n        handleRealTimeUpdate(message.event, message.data);\n        setLastUpdate(message.timestamp || new Date().toISOString());\n        break;\n        \n      case 'pong':\n        // Keep-alive response\n        break;\n        \n      default:\n        console.log('Unknown message type:', message.type);\n    }\n  };\n\n  const handleRealTimeUpdate = (event: string | undefined, data: any) => {\n    if (!event) return;\n\n    console.log(`Real-time update: ${event}`, data);\n\n    switch (event) {\n      case 'user_created':\n      case 'user_updated':\n      case 'user_flagged':\n      case 'user_unflagged':\n        // Invalidate user-related queries\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n        break;\n\n      case 'user_deleted':\n        // Remove user from cache and refresh lists\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n        break;\n\n      case 'campaign_created':\n      case 'campaign_updated':\n      case 'campaign_status_changed':\n        // Invalidate campaign-related queries\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/campaigns'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/campaigns'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n        break;\n\n      case 'kyc_submitted':\n      case 'kyc_status_changed':\n        // Invalidate KYC-related queries\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/kyc/applications'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n        break;\n\n      default:\n        console.log('Unknown event type:', event);\n    }\n  };\n\n  // Send keep-alive ping every 30 seconds\n  useEffect(() => {\n    const pingInterval = setInterval(() => {\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({ type: 'ping' }));\n      }\n    }, 30000);\n\n    return () => clearInterval(pingInterval);\n  }, []);\n\n  // Connect on mount\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n  const sendMessage = (message: any) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    isConnected,\n    lastUpdate,\n    sendMessage,\n    reconnect: connect,\n  };\n}","size_bytes":5060},"server/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { Server } from 'http';\nimport type { IncomingMessage } from 'http';\nimport url from 'url';\n\ninterface AuthenticatedWebSocket extends WebSocket {\n  userId?: string;\n  isAdmin?: boolean;\n  isAuthenticated?: boolean;\n}\n\nclass AdminWebSocketManager {\n  private wss: WebSocketServer;\n  private adminClients: Set<AuthenticatedWebSocket> = new Set();\n\n  constructor(server: Server) {\n    this.wss = new WebSocketServer({ \n      server,\n      path: '/ws/admin'\n    });\n\n    this.wss.on('connection', this.handleConnection.bind(this));\n  }\n\n  private handleConnection(ws: AuthenticatedWebSocket, request: IncomingMessage) {\n    console.log('New WebSocket connection attempt');\n\n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        this.handleMessage(ws, data);\n      } catch (error) {\n        console.error('Invalid WebSocket message:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      this.adminClients.delete(ws);\n      console.log('Admin WebSocket disconnected');\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n  }\n\n  private handleMessage(ws: AuthenticatedWebSocket, data: any) {\n    switch (data.type) {\n      case 'authenticate':\n        // In a real app, you'd verify the session/token\n        // For now, we'll accept admin authentication\n        if (data.role === 'admin') {\n          ws.isAdmin = true;\n          ws.isAuthenticated = true;\n          ws.userId = data.userId;\n          this.adminClients.add(ws);\n          \n          ws.send(JSON.stringify({\n            type: 'authenticated',\n            success: true\n          }));\n          \n          console.log('Admin authenticated via WebSocket');\n        }\n        break;\n\n      case 'ping':\n        ws.send(JSON.stringify({ type: 'pong' }));\n        break;\n    }\n  }\n\n  // Broadcast real-time updates to all connected admin clients\n  public broadcastToAdmins(event: string, data: any) {\n    const message = JSON.stringify({\n      type: 'update',\n      event,\n      data,\n      timestamp: new Date().toISOString()\n    });\n\n    this.adminClients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN && client.isAdmin) {\n        client.send(message);\n      }\n    });\n\n    console.log(`Broadcasted ${event} to ${this.adminClients.size} admin clients`);\n  }\n\n  // Specific broadcast methods for different events\n  public userCreated(user: any) {\n    this.broadcastToAdmins('user_created', user);\n  }\n\n  public userUpdated(user: any) {\n    this.broadcastToAdmins('user_updated', user);\n  }\n\n  public userDeleted(userId: string) {\n    this.broadcastToAdmins('user_deleted', { userId });\n  }\n\n  public userFlagged(user: any) {\n    this.broadcastToAdmins('user_flagged', user);\n  }\n\n  public userUnflagged(user: any) {\n    this.broadcastToAdmins('user_unflagged', user);\n  }\n\n  public campaignCreated(campaign: any) {\n    this.broadcastToAdmins('campaign_created', campaign);\n  }\n\n  public campaignUpdated(campaign: any) {\n    this.broadcastToAdmins('campaign_updated', campaign);\n  }\n\n  public campaignStatusChanged(campaign: any) {\n    this.broadcastToAdmins('campaign_status_changed', campaign);\n  }\n\n  public kycSubmitted(application: any) {\n    this.broadcastToAdmins('kyc_submitted', application);\n  }\n\n  public kycStatusChanged(application: any) {\n    this.broadcastToAdmins('kyc_status_changed', application);\n  }\n}\n\nlet adminWSManager: AdminWebSocketManager | null = null;\n\nexport function setupWebSocket(server: Server): AdminWebSocketManager {\n  if (!adminWSManager) {\n    adminWSManager = new AdminWebSocketManager(server);\n  }\n  return adminWSManager;\n}\n\nexport function getWebSocketManager(): AdminWebSocketManager | null {\n  return adminWSManager;\n}","size_bytes":3803}}}